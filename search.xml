<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>B3611</title>
    <url>/2021/12/06/B3611/</url>
    <content><![CDATA[<p>【模板】传递闭包</p>
<p>跑 Floyd 即可。</p>
<p>还可以用 bitset 进行优化，但现在不想写。</p>
<p>时间复杂度 $O(n^3)$。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">1e2</span>;</span><br><span class="line"></span><br><span class="line">ll n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> f[N+<span class="number">5</span>][N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;=n;j++) &#123;</span><br><span class="line">            f[i][j]=<span class="built_in">read</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(ll k=<span class="number">1</span>;k&lt;=n;k++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;=n;j++) &#123;</span><br><span class="line">                f[i][j]=f[i][j]||(f[i][k]&amp;&amp;f[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;=n;j++) &#123;</span><br><span class="line">            <span class="built_in">write</span>(f[i][j]);<span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>Floyd</tag>
        <tag>传递闭包</tag>
      </tags>
  </entry>
  <entry>
    <title>EssayAD20211212</title>
    <url>/2021/12/11/EssayAD20211212/</url>
    <content><![CDATA[<pre><code>リズと青い鳥，あなたを永遠に好きになりたいです。
</code></pre>
<p>想来自己最初邂逅《莉兹与青鸟》，大概要到 2020 年的 12 月份了。</p>
<p>近乎是第一眼就喜欢上了这部作品。</p>
<p>看完之后我的头像就换成了伞木希美的那张“昂首雀过图”。（原因是当时的希美正在做数论）</p>
<p>记得当时看着 唯风Wephon 老师的青鸟解读，反复翻阅和观看之后越来越觉得神妙。当时甚至还把这个故事写成了作文，语文老师似乎评价还不错，为此还修改了好几次（最重要的是我的中考作文就是把这篇作文改编后直接套上的，想来大概为此多扣了不少分吧）。</p>
<p>后来尝试从几个不同的角度分析了这部作品，但因为最后的成品都不太满意，所以还是封在了博客里。</p>
<p>感觉自己正在 Enjoying 这部作品，来来回回又翻阅了许多解读的资料、赏析、MAD/AMV 等等。大概形成了自己的一种认知观念。</p>
<p>暑假的时候，找到了改编《莉兹与青鸟》的一篇英语读后续写，心血来潮抄了下来，顺便当作练字，似乎还在不经意间积累了一些词汇。</p>
<p>难以言喻的喜爱。</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/qfzctlt7.png"></p>
<p>偶尔喜欢作一些奇怪的东西，比如：</p>
<pre><code>Obliviousness
I&#39;m waiting
a girl tenderly smiling,
in the endless night
behind the starry city lights.
    ——  AD20210928 初稿
        AD20211004 一改
</code></pre>
<p>还比如：</p>
<pre><code>我登上了山峰，只为看这城市的风景。
不因为什么别的理由，只因这里无人问津。
深邃的夜空中，还能看见星星。
不过归程中的我，仍踽踽独行。
    ——  与众不同，为何偏要是孤独的远行？
        ——  AD20211006
</code></pre>
<p>最喜欢的曲子是《reflexion,allegretto,you》，上传了《Easter Egg》。其次大概才是第三乐章。感觉非常震撼人心。</p>
<p>一度有着隐居宇治的愿望。</p>
<p>虽然圈子很小，但是大家都是很不错的人。</p>
<p>尝试与某些大佬交流的时候也收获了不少。</p>
<p>喜欢这份静谧的美好。我是这样想的。</p>
<p>不过后来人就越来越少了。因为各种各样的原因。最后等到唯风老师也离开的时候，我才恍然发现，自己早已是孤身一人了。</p>
<p>我突然反应过来，2018 年，早已经是三、四年前了。</p>
<pre><code>曲终人散尽，
回首只孤影。
笛声悠扬在，
故人却无音。
</code></pre>
<p>难以释然罢。</p>
<p>但我仍然喜欢着这份美好。</p>
<p>即便所有的美好终将逝去。</p>
<p>$\Large\color{CornflowerBlue}神明啊，为什么要教会我打开鸟笼的方法？$</p>
<p>$\color{CadetBlue}あぁ、神様、どうして私にカゴの開け方を教えたのですか？$</p>
<p>$–Liz\space und\space ein\space Blauer\space Vogel$</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/5zr0t73b.png"></p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>EssayAD20211211</title>
    <url>/2021/12/11/EssayAD20211211/</url>
    <content><![CDATA[<p>2020 年初。</p>
<p>那个时候发生了很多事。</p>
<p>第一次开始认真学 OI（虽然也没什么长进），第一次写影评（写得很烂），第一次抄完了《读者》卷尾的诗（大概是 13-15 年左右的了，整整抄了两个小本子，当时是为了练字，现在看来那个字怎么能写这么难看。。。），第一次看 Key 社的三部:《Clannad》、《Kanon》、《Air》，第一次玩 Gal，第一次体会到“屏幕里的人笑着笑着，屏幕外的人就哭了”是什么感觉（《Steins;Gate 0》Re-awake）……</p>
<p>那时候感觉自己还是个单纯到不能再单纯的少年，看什么都很理想化。</p>
<p>虽然从精神压力和生活上来说确实很理想化。</p>
<p>复学回来之后，初中的文化课尚可应付，似乎突击了一波开学考勉强蹭到了不错的位置，物理还顺便考了年级第一。</p>
<p>于是又开始学 OI 什么的。记得当时还很喜欢物理，那个学期还抽时间自学了初三的物理书，拿了一本启东中学初中物理竞赛之类的诡异书目散做了一些题目。</p>
<p>半个学期左右过去，没有什么阻碍地进入了学科走班。暑假的时候又刷了些 OI，但我很快被 8 月份的走班课程弄死了。</p>
<p>记得当时是我第一次体会到作业还能有凌晨 1 点前写不完的。拼命熬了一个多月之后觉得实在撑不下去，于是又跑去搞 OI（准备 11 月份的 J）。结果开学到 J 结束的一段时间里养成了作业摆烂的习惯，实在被逼到走投无路就熬夜大补。不过后来还算补救了回来，但熬夜的习惯撑到上学期结束就撑不下去了。想起当时老丁还经常挖苦我，说我效率低下（虽然是事实）。</p>
<p>寒假的时候几乎是每天都严格按照时间表行动，基本和上课时没有区别，结果寒假没有休息好，下学期一开学一个多月，我的作业基本就开始摆烂，再到了一模过后，甚至还有几次在家睡觉旷大课的神奇经历。不过好在基本都是复习课了，倒也对自己没什么影响，不过倒引来了老丁新的挖苦和讽刺。。。</p>
<p>后来的中考倒是云淡风轻，虽然嘴上说着上小庙中学什么的，其实当时也没有想过一中以外的学校。</p>
<p>只不过，当我回过头来看的时候，发现走班真的让我失去了很多。突然发现自己对物理再没什么兴趣了，发现自己变得喜欢摆烂了，发现自己把时间白白浪费在初三机械重复的做题而没有提前学习新知识，发现自己丢失了最宝贵的一段初三训练 OI 的时间……</p>
<p>来到暑假，又陷入了新的轮回。</p>
<p>被一中的老师坑害了一个月去上了预科（结果是什么也没学到，还耽误了学 OI 的时间）。</p>
<p>暑假基本是每天都在刷题，可最后累积下来，中考结束到开学我的题量只增加了 190 道左右。从量上讲大概还是作业写不完的那一类人。</p>
<p>初赛小做了一些准备，最后考场上的 The method of four Russians 只做对 5 道，解码基本摆烂，拿了 78pts 这个中不溜秋的成绩。</p>
<p>没想到的是，到 CSP 之前，whk 的压力空前巨大。于是我选择半烂 whk，每节晚自习跑去做题，但可惜时间有限，不仅题没做多少，还天天被班主任拉去做思想教育，感觉到又被深深鄙视。</p>
<p>最后 CSP 考得奇烂，我的 T1 是一个混着暴力和三分的神奇程序，T2 本能做出来结果惨淡爆零，T3 只能用最后 10min 写下暴力（然后在收卷的时候大概发现了这道题比 T2 好调还好想），T4 无奈摆烂。最后 T1 喜提 65pts（搞笑的是这部分分是三分拿到的，我的暴力写挂了），T2 显然爆零，T3 喜提暴力分，甚至没有混到一等。顿时感觉崩溃，因为从题目难度的角度来说至少能拿 300pts。。。</p>
<p>于是被班主任予以了更深层次的鄙视。本来想申请 CSP 之后大停课的，最后迫于这个破分数张不开口。想来自己的惨淡并非没有来头。。。</p>
<p>结果就是，到 NOIP 之前我压根学不下去 whk，只得在最后一周申请了停课。最终结果就是双烂。</p>
<p>回来之后班主任基本把我当作废人。我大概也是不想管了。</p>
<p>记得当时申请停课的时候班主任一脸“你菜成这样停个屁”的神色，问我搞 OI 的目标是什么，我大概支吾了一句“进省队，然后最好能拿到银牌吧”。他冷笑了一声，弄得我浑身不舒服（现在想来大概是被深深嘲笑了），然后他答应我停课了。</p>
<p>停课一周并没有把状态调整回来，反倒是考前出了点意外，被迫转坐高铁弄得我心情很差。想来自己实在太容易被这些琐事困扰，结果自己心态爆炸。</p>
<p>最后 NOIP 依旧没有吸取教训，死磕 T2 数小时之后，仅剩的 1 个多小时时间没有去考虑 T3 的暴力，而是花了大概 5 分钟丢了个贪心走人，T4 再次摆烂。最终结果就是喜提 T2 暴力垫底分，成为垫底人。</p>
<p>结果回来之后我的心态彻底就炸裂了。感觉人完蛋了。</p>
<p>最后放弃了熬夜补 whk 的想法。因为觉得不值得。</p>
<p>看到其他人基本都还好好活着，才发觉自己早已经死了。</p>
<p>不过是自作自受罢了。</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>EssayAD20211213</title>
    <url>/2021/12/11/EssayAD20211213/</url>
    <content><![CDATA[<p>一些无聊时所作的文字。</p>
<hr>
<pre><code>流雲，
    碎月。
蝉鸣，
    夏鄉。
笛声，
    静夜。
晚風，
    微凉。
</code></pre>
<p>大概是看完《夢想夏鄉4》的时候写的。</p>
<hr>
<pre><code>西行望，寺宇旁，幽幽芬芳，子在何方？
</code></pre>
<p>无意中看到的，于是尝试对出下一句。</p>
<pre><code>东风拂，谷阁处，弥弥霡霂，生愿逢汝。
</code></pre>
<p>大概考虑的就是西对东，望对拂，寺宇旁对谷阁处，幽幽芬芳对弥弥霡霂（前两个字是叠字，后面两个字有相同的偏旁），子在何方对生愿逢汝（觉得对的最不好的一句）。并且保证押 <code>u</code> 的韵，与上面押 <code>ang</code> 的韵相对。而且把东这一句放在上面的话整体都是仄起平收的。然后大概也使两个句子有一定的故事性。</p>
<p>可惜的是东风谷弥生是个二创角色。如果用早苗的话我真的不会对。</p>
<hr>
<pre><code>为何天空如此湛蓝？
</code></pre>
<p>很有感觉的一句话。</p>
<hr>
<pre><code>春之风花，夏之流云，秋之夜月，冬之初雪。
    ——  美しきもの
</code></pre>
<p>抄的歌词。</p>
<hr>
<pre><code>はらはらはら はらはらはら 静かに舞い上がれ
翩翩跹跹 袅袅娜娜 沉静飞舞吧
はらはらはら はらはらはら 零れ落ちる雫
星星点点 影影绰绰 泪珠悄然滑落
はらはらはら はらはらはら 気高く舞い上がれ
悠悠滔滔 浩浩荡荡 傲然飞舞吧
はらはらはら はらはらはら 羽根傷んでゆく
庸庸碌碌 惝惝恍恍 双翅伤痕累累
はらはらはら はらはらはら 儚く舞い上がれ
婆婆娑娑 零零落落 飞舞至终吧
    ——  摘自《melt in the sky》翻译
</code></pre>
<p>觉得这个很强大。《声声慢》里曾有一句“寻寻觅觅冷冷清清凄凄惨惨戚戚”。上课的时候想到了这个翻译，尝试去对这个句子但是不会（问题在于我想不到类似于“凄凄惨惨戚戚”这种存在读音相同、含义相近且为仄声的两个字）。</p>
<hr>
<pre><code>Ref:rain
</code></pre>
<p>这个是 Aimer 的一首歌的歌名。感觉妙不可言。</p>
<hr>
<pre><code>笛声与夜，青羽和你。
</code></pre>
<p>感觉不太好。</p>
<hr>
<pre><code>花开堪折无需折，静赏花开春自来。
</code></pre>
<p>我在某篇作文里写的题记。感觉不太好。</p>
<hr>
<pre><code>花未眠
    一花一世界，一树一菩提。
</code></pre>
<p>在听 whk 讲座的时候随手记下来的（现在才发现这个人居然名字缩写这么的文化课）。</p>
<hr>
<pre><code>抬眼，满目潇濏雨。
回首，尽是艳阳春。
</code></pre>
<p>无聊的时候把二模的某篇作文标题对了一个上联。</p>
<hr>
<pre><code>王来允许，王来背负，王来定义这个世界。
</code></pre>
<p>lmz 二模 rk1 后有感（当时感觉实在太生草就记了下来）。</p>
<hr>
<pre><code>By making it a song,
Can I keep the memory?
I just came to love it now.
</code></pre>
<p>以及</p>
<pre><code>Fell asleep in a shelter,
Made out of old junk.
</code></pre>
<p>还有</p>
<pre><code>How would I sing?
</code></pre>
<p>然后</p>
<pre><code>In the afternoon sunlight,
Chocolates melting in my pocket.
</code></pre>
<p>都是《Songbirds》的歌词。这几句尤为喜爱。</p>
<hr>
<pre><code>Can you feel my,Can you feel my,Can you feel my tears?
They won&#39;t dry.
</code></pre>
<p>《The Loneliest girl》中最喜欢的一句歌词。虽然我不看《卡罗尔与星期二》。</p>
<p>知道这首歌是因为唯风老师的一个 AMV。</p>
<hr>
<pre><code>&quot;Time&quot; is so sad and fleeting
Can&#39;t be controlled,like a river,never stops
&quot;Space&quot; is emptiness dark and so cold
Can you define it&#39;s presence, does it exist?
We drift through the heavens 果てない想い
Filled with the love from up above
He guides my travels せまる刻限
Shed a tear and leap to a new world
A drop in the darkness 小さな命
Unique and precious forever
Bittersweet memories 夢幻の刹那
Make this moment last,last forever
We drift through the heavens 果てない想い
Filled with the love from up above
He guides my travels せまる刻限
Shed a tear and leap to a new world
    ——  《GATE OF STEINER》
</code></pre>
<p>《Steins;gate》中最喜欢的一首歌。歌词非常值得品味。</p>
<hr>
<pre><code>When I look down from the starry, I will never touch the sky.
</code></pre>
<p>好像是我写的？</p>
<hr>
<pre><code>Unknown melody
created the scenes of unknown hearts.
Unknown tears
were sheded for unknown ones.

All the future I see
is a lie,
which is tender
and hides my sorrow
in silence.
</code></pre>
<p>不知道什么时候写的了。感觉好像还行。</p>
<p>好像那个时候在听《Brave Song》。</p>
<hr>
<pre><code>恍恍六载成过往，此间却难忘。
</code></pre>
<p>听《南山南》的时候写的。</p>
<hr>
<pre><code>I have ever been silent and and stop in front of my afraidness.
But I finally decided to walk ahead and sing the life as the brightest light.
</code></pre>
<p>听《海の見える街》时写的。</p>
<hr>
<pre><code>你看见了海的街道吗？
你看，它在那月华下的波光上
极尽繁华，却终为幻梦
极尽明亮，却终归飘渺
极尽向往，却终化释然
</code></pre>
<p>同样是听《海の見える街》时写的。</p>
<hr>
<pre><code>天高云阔，风雨如歌。
</code></pre>
<p>非常喜欢的一句歌词翻译。</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>NOI_Linux</title>
    <url>/2021/11/27/NOI-Linux/</url>
    <content><![CDATA[<h1 id="0x01-基础使用"><a href="#0x01-基础使用" class="headerlink" title="0x01 基础使用"></a>0x01 基础使用</h1><p><code>Ctrl+Alt+T</code> 召唤终端。</p>
<p>新建文件的指令是 <code>touch+文件名</code> 。</p>
<h1 id="0x02-VSCode-的使用技巧"><a href="#0x02-VSCode-的使用技巧" class="headerlink" title="0x02 VSCode 的使用技巧"></a>0x02 VSCode 的使用技巧</h1><p>现在给一些在英文环境下使用 VSC 的指北。</p>
<p>左下角有一个设置按钮，点开，第二行的 Settings。</p>
<p>然后点第一行 Text Editor，再点第三行 Font，选择 Font Size，选择至合适大小（这里在 Windows 下 30 比较合适）。</p>
<p>然后是 Text Editor 下倒数第三行的 Minimap，Maxcolumn 调整为 240（差不多罢），然后下面的 Scale 调整为 3。</p>
<p>大概可以了，在 NOI Linux 的环境下应该可以较为正常的使用了。</p>
<p>然后 VSC 里撤销是 <code>Ctrl+Z</code>，恢复上一步操作是 <code>Ctrl+Shift+Z</code>。</p>
<p>VSCode 里 <code>shift+&#123;</code> 可以把选中的内容套上大括号，小括号同理，方括号不行。</p>
<p><code>Ctrl+&#123;</code> 可以减去区域的整体缩进，<code>Ctrl+&#125;</code> 可以增加区域的整体缩进。</p>
<p>在底边栏中可以调整缩进是空格还是真的缩进。</p>
<h1 id="0x03-gdb-的相关使用"><a href="#0x03-gdb-的相关使用" class="headerlink" title="0x03 gdb 的相关使用"></a>0x03 gdb 的相关使用</h1><p>然后再补充一些指令，以及 gdb 的使用。</p>
<p><code>time ./code</code> 可以在运行的同时显示运行所需的时间。</p>
<p>gdb 最强大的地方在于可以快速找到段错误（除 0，数组越界，爆栈等），我们可以直接在 gdb 下运行，然后就可以直接给你返回出错的地方。</p>
<p>然后还有一些它的调试功能。</p>
<p>在编译时使用该指令：</p>
<p><code>g++ -g code.cpp -o code -Wall</code></p>
<p>然后我们在调试的时候这样：</p>
<p><code>gdb code</code></p>
<p>这样我们就能进入 gdb 的调试。</p>
<p><code>r</code> 可以直接运行。如果想要干大事，可以 <code>start</code>，从 main 函数的第一行开始执行，然后不断地 <code>n</code> （执行下一行）即可。<code>disp ans</code> 可以一直显示 ans 的值，方便调试。</p>
<p><code>s</code> 可以进入函数内部。</p>
<p><code>b</code> 可以设置断点，还有一些附加比如：</p>
<p><code>b 34 if i==4</code></p>
<p>在 i==4 的时候断点才会起作用。</p>
<p><code>d</code> 可以删除所有断点。</p>
<p>当然有的时候也需要在调试时使用 <code>s</code>，表示执行时进入函数内部，看内部的使用。</p>
<p><code>u</code> 会执行当前行直到当前行对应的循环结束。</p>
<p><code>finish</code> 运行到当前函数结束，如果有返回值，会输出返回值。</p>
<p><code>return</code> 强行 return，可以返回指定的值。</p>
<p><code>p x=4</code>，将此时的 x 赋值 4。</p>
<p><code>l</code> 可以显示代码。<code>l,r</code> 显示区间代码，<code>l</code> 显示 l 附近的 10 行代码。</p>
<p><code>q</code> 可以退出调试。</p>
<p>还有一个东西叫做 <code>Ctrl+C</code>。</p>
<h1 id="0x04-Windows-下实现指令编译（主要是为了适应-Windows-下的-VSC-编程并且避免使用其插件）"><a href="#0x04-Windows-下实现指令编译（主要是为了适应-Windows-下的-VSC-编程并且避免使用其插件）" class="headerlink" title="0x04 Windows 下实现指令编译（主要是为了适应 Windows 下的 VSC 编程并且避免使用其插件）"></a>0x04 Windows 下实现指令编译（主要是为了适应 Windows 下的 VSC 编程并且避免使用其插件）</h1><p>一些比较神奇的东西。。。在 Windows 下装 MinGW 其实完全不需要重新下载，只要找到 Dev-Cpp 的路径，然后把里面 MinGW 的 bin 路径赋值到系统变量 path 里就完事了。。。弄了半天。。。</p>
<p>学校 hwc 机房里的 MinGW 居然是 1999 年的令我大为震撼，这时指令只可以使用 <code>gcc</code>。</p>
<p>然后 Win7 的路径修改还和 Win10 不太相同，其实就是多一个 <code>;</code> 隔开每一条路径而已。</p>
<p>另外，一定注意编译的路径是英文的，千万不能有中文符号，否则编译一次真的可以爽上一年。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>NOI-Linux</tag>
        <tag>VScode</tag>
        <tag>gdb</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>P1017</title>
    <url>/2021/12/04/P1017/</url>
    <content><![CDATA[<p>[NOIP2000 提高组] 进制转换</p>
<p>比较好想的一个做法是转换表示。</p>
<p>因为奇数次幂的 $-R$ 是个负数，而偶数次幂的 $-R$ 是正的，在表示正数 $n$ 的时候，我们可以采取如下策略：</p>
<p>首先用 $R$ 进制表示该数。</p>
<p>假如说第 $k$ 位是奇数位，这一位的数字为 $a_k$，我们可以用 $a_{k+1}\times (-R)^{k+1}+(R-a_k)\times (-R)^k$ 来表示。</p>
<p>于是乎先这样表示，再在后面处理进位即可。</p>
<p>可以分 $n$ 的正负来讨论。</p>
<p>负数与正数同理，不过是把奇数位和偶数位的作用颠倒一下。</p>
<p>时间复杂度在 $O(\log n)$ 级别。</p>
<p>当然也可以直接转化负进制数，以上的过程可以用类似于短除法的方法搞出来。</p>
<p>带余除法搞出该位余数之后，C++ 下的除法中如果把这一位的数字搞成负数了，就说明该位应该用上述方法表示出来，那么我们把余数换正，再把剩下的商加 1，相当于向下一位借一个 1。</p>
<p>其实分奇偶位的实质是在向下一位借一个 1。</p>
<p>代码（分奇偶位讨论）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">1e3</span>;</span><br><span class="line"></span><br><span class="line">ll R,tmp,m,n;</span><br><span class="line"></span><br><span class="line">ll a[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">22</span>]=&#123;<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;L&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();R=<span class="built_in">read</span>();tmp=n;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">write</span>(n);<span class="built_in">putchar</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">write</span>(n);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;(base%lld)&quot;</span>,R);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(n&gt;<span class="number">0</span>) &#123;</span><br><span class="line">		R=-R;m=<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">while</span>(tmp) &#123;</span><br><span class="line">			a[++m]=tmp%R;tmp/=R;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=m;i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]!=<span class="number">0</span>&amp;&amp;(i&amp;<span class="number">1</span>)) &#123;</span><br><span class="line">				a[i]=R-a[i];a[i+<span class="number">1</span>]++;</span><br><span class="line">			&#125;</span><br><span class="line">			a[i+<span class="number">1</span>]+=a[i]/R;a[i]%=R;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(a[m+<span class="number">1</span>]&gt;<span class="number">0</span>) &#123;</span><br><span class="line">			m++;</span><br><span class="line">			<span class="keyword">if</span>(m&amp;<span class="number">1</span>) &#123;</span><br><span class="line">				a[m]=R-a[m];a[m+<span class="number">1</span>]++;</span><br><span class="line">			&#125;</span><br><span class="line">			a[m+<span class="number">1</span>]+=a[m]/R;a[m]%=R;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(ll i=m;i&gt;=<span class="number">0</span>;i--) <span class="built_in">putchar</span>(s[a[i]]);</span><br><span class="line">		R=-R;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;(base%lld)&quot;</span>,R);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(n&lt;<span class="number">0</span>) &#123;</span><br><span class="line">		R=-R;m=<span class="number">-1</span>;tmp=-tmp;</span><br><span class="line">		<span class="keyword">while</span>(tmp) &#123;</span><br><span class="line">			a[++m]=tmp%R;tmp/=R;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=m;i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]!=<span class="number">0</span>&amp;&amp;!(i&amp;<span class="number">1</span>)) &#123;</span><br><span class="line">				a[i]=R-a[i];a[i+<span class="number">1</span>]++;</span><br><span class="line">			&#125;</span><br><span class="line">			a[i+<span class="number">1</span>]+=a[i]/R;a[i]%=R;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(a[m+<span class="number">1</span>]&gt;<span class="number">0</span>) &#123;</span><br><span class="line">			m++;</span><br><span class="line">			<span class="keyword">if</span>(!(m&amp;<span class="number">1</span>)) &#123;</span><br><span class="line">				a[m]=R-a[m];a[m+<span class="number">1</span>]++;</span><br><span class="line">			&#125;</span><br><span class="line">			a[m+<span class="number">1</span>]+=a[m]/R;a[m]%=R;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(ll i=m;i&gt;=<span class="number">0</span>;i--) <span class="built_in">putchar</span>(s[a[i]]);</span><br><span class="line">		R=-R;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;(base%lld)&quot;</span>,R);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码（带余除法）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">1e3</span>;</span><br><span class="line"></span><br><span class="line">ll R,m,n;</span><br><span class="line"></span><br><span class="line">ll a[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">22</span>]=&#123;<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;L&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();R=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">write</span>(n);<span class="built_in">putchar</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	m=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span>(n) &#123;</span><br><span class="line">		a[++m]=n%R;n/=R;</span><br><span class="line">		<span class="keyword">if</span>(a[m]&lt;<span class="number">0</span>) &#123;a[m]-=R;n++;&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=m;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(s[a[i]]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;(base%lld)&quot;</span>,R);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>进制</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>P1194</title>
    <url>/2021/12/06/P1194/</url>
    <content><![CDATA[<p>买礼物</p>
<p>最小生成树跑一下即可。最好用 Prim，这里用了 Kruskal。</p>
<p>唯一坑点在于 $a$ 可能小于 $k$。</p>
<p>时间复杂度 $O(n\log n^2)$。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll M=<span class="number">5e5</span>,N=<span class="number">5e2</span>;</span><br><span class="line"></span><br><span class="line">ll n,a,x,ans,tot,cnt;</span><br><span class="line"></span><br><span class="line">ll fa[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">	ll u,v,w;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> w&lt;rhs.w;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;edge[M+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">find</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(fa[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">return</span> fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uni</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">	fa[<span class="built_in">find</span>(x)]=<span class="built_in">find</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=tot;i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">find</span>(edge[i].u)!=<span class="built_in">find</span>(edge[i].v)) &#123;</span><br><span class="line">			ans+=edge[i].w;cnt++;</span><br><span class="line">			<span class="built_in">uni</span>(edge[i].u,edge[i].v);</span><br><span class="line">			<span class="keyword">if</span>(cnt==n<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	a=<span class="built_in">read</span>();n=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;=n;j++) &#123;</span><br><span class="line">			x=<span class="built_in">read</span>();</span><br><span class="line">			<span class="keyword">if</span>(i!=j&amp;&amp;x==<span class="number">0</span>) x=a;</span><br><span class="line">			<span class="keyword">if</span>(i&gt;=j) <span class="keyword">continue</span>;</span><br><span class="line">			edge[++tot].u=i;edge[tot].v=j;edge[tot].w=<span class="built_in">min</span>(a,x);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">sort</span>(edge+<span class="number">1</span>,edge+tot+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	ans=a;</span><br><span class="line">	<span class="built_in">kruskal</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">write</span>(ans);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>P1069</title>
    <url>/2021/12/05/P1069/</url>
    <content><![CDATA[<p>[NOIP2009 普及组] 细胞分裂</p>
<p>我们想了一想，相当于问 $s_i$ 的 $k$ 次幂是 $m_1^{m_2}$ 的倍数，这个最小的 $k$ 是多少。</p>
<p>显然就是对 $m_1$ 质因数分解，每个质数的次幂乘上 $m_2$ 就可以分解该数，然后再看每个质因子是否都是 $s_i$ 的质因子，如果不是，那么这个不可能有方案；如果是，那么取次幂的商的上取整的最大值作为 $s_i$ 的答案。</p>
<p>最后比较一个最小值即可。</p>
<p>时间复杂度 $O(\sqrt m_1+n\log m_1\log s)$。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">3e5</span>;</span><br><span class="line"></span><br><span class="line">ll n,m1,m2,cnt,ans,s;</span><br><span class="line"></span><br><span class="line">ll f[N+<span class="number">5</span>],g[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	m1=<span class="built_in">read</span>();m2=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">2</span>;i*i&lt;=m1;i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(m1%i!=<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">		f[++cnt]=i;</span><br><span class="line">		<span class="keyword">while</span>(m1%f[cnt]==<span class="number">0</span>) &#123;</span><br><span class="line">			g[cnt]++;m1/=f[cnt];</span><br><span class="line">		&#125;</span><br><span class="line">		g[cnt]*=m2;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(m1&gt;<span class="number">1</span>) &#123;f[++cnt]=m1;g[cnt]=m2;&#125;</span><br><span class="line"></span><br><span class="line">	ans=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		s=<span class="built_in">read</span>();ll tmp=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;=cnt;j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(s%f[j]!=<span class="number">0</span>) &#123;tmp=<span class="number">-1</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">			ll tot=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span>(s%f[j]==<span class="number">0</span>) &#123;</span><br><span class="line">				tot++;s/=f[j];</span><br><span class="line">			&#125;</span><br><span class="line">			tmp=<span class="built_in">max</span>(tmp,(g[j]+tot<span class="number">-1</span>)/tot);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(tmp==<span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span>(ans==<span class="number">-1</span>) ans=tmp;</span><br><span class="line">		<span class="keyword">else</span> ans=<span class="built_in">min</span>(ans,tmp);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">write</span>(ans);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>P1195</title>
    <url>/2021/12/06/P1195/</url>
    <content><![CDATA[<p>口袋的天空</p>
<p>这个题实际上仍然是跑 Kruskal，只不过在达到 $k$ 个连通块时（即有 $n-k$ 条边时）我们就找到了最优解，此时直接输出即可。</p>
<p>时间复杂度 $O(m\log m)$。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll M=<span class="number">1e4</span>,N=<span class="number">1e3</span>;</span><br><span class="line"></span><br><span class="line">ll n,m,k,ans,cnt;</span><br><span class="line"></span><br><span class="line">ll fa[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">	ll u,v,w;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp; rhs) <span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> w&lt;rhs.w;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;edge[M+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">find</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(fa[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">return</span> fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uni</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">	fa[<span class="built_in">find</span>(x)]=<span class="built_in">find</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">find</span>(edge[i].u)!=<span class="built_in">find</span>(edge[i].v)) &#123;</span><br><span class="line">			ans+=edge[i].w;cnt++;</span><br><span class="line">			<span class="built_in">uni</span>(edge[i].u,edge[i].v);</span><br><span class="line">			<span class="keyword">if</span>(cnt&gt;=n-k) <span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();k=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">		edge[i].u=<span class="built_in">read</span>();edge[i].v=<span class="built_in">read</span>();edge[i].w=<span class="built_in">read</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">sort</span>(edge+<span class="number">1</span>,edge+m+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">kruskal</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(cnt&gt;=n-k) <span class="built_in">write</span>(ans);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No Answer&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>P1246</title>
    <url>/2021/12/05/P1246/</url>
    <content><![CDATA[<p>编码</p>
<p>这个东西可以看作组合的编号。然后一切都好搞了。</p>
<p>显然小于串长度的组合都符合。</p>
<p>接着等于串长度的组合我们逐位计数。</p>
<p>于是就有：</p>
<p>$$Ans=\sum_{i=1}^{n-1}C_{26}^i+\sum_{i=1}^n\sum_{j=s[i-1]-‘a’+1}^{s[i]-‘a’-1}C_{25-j}^{n-i}$$</p>
<p>输出就完了。</p>
<p>一开始想过直接暴力预处理出编号的方法，其实很可做，因为用 map 的话很容易出奇迹。</p>
<p>这个时间复杂度是 $O(n\cdot siz[a\cdots z])$ 的。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">ll n,ans,flg;</span><br><span class="line"></span><br><span class="line">ll f[<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=<span class="number">26</span>;i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;=i;j++) &#123;</span><br><span class="line">			f[i][j]=f[i<span class="number">-1</span>][j]+f[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);s[<span class="number">0</span>]=<span class="string">&#x27;a&#x27;</span><span class="number">-1</span>;</span><br><span class="line">	n=<span class="built_in">strlen</span>(s)<span class="number">-1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(s[i]&gt;=s[i+<span class="number">1</span>]) &#123;</span><br><span class="line">			flg=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(flg) &#123;</span><br><span class="line">		<span class="built_in">write</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">			ans+=f[<span class="number">26</span>][i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(ll j=s[i<span class="number">-1</span>]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>;j&lt;=s[i]-<span class="string">&#x27;a&#x27;</span><span class="number">-1</span>;j++) &#123;</span><br><span class="line">				ans+=f[<span class="number">25</span>-j][n-i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">write</span>(ans+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>计数</tag>
        <tag>组合</tag>
      </tags>
  </entry>
  <entry>
    <title>P1471</title>
    <url>/2021/12/06/P1471/</url>
    <content><![CDATA[<p>方差</p>
<p>想到了 NOIP2021 考场上的那道题。</p>
<p>所以自然地想到让这个方差乘上 $n^2$，然后我们简化之后就可以得到：</p>
<p>$$n^2s^2=n\sum_{i=1}^nA_i^2-(\sum_{i=1}^nA_i)^2$$</p>
<p>于是我们的方差就是把左边的 $n^2$ 除过去。</p>
<p>然后这样的话我们的序列就只需要维护两种和了，一种是 $\sum_{i=1}^nA_i$，另一种是 $\sum_{i=1}^nA_i^2$。</p>
<p>第一种值比较好维护，关键是如何维护第二种值。</p>
<p>我们假设一段区间都加上了常数 $k$，那么这一段区间的第二种值的变化量就是：</p>
<p>$$\Delta=\sum_{i=1}^n(A_i+k)^2-\sum_{i=1}^nA_i^2$$</p>
<p>化简之后得到：</p>
<p>$$\Delta=nk^2+2k\sum_{i=1}^nA_i$$</p>
<p>然后显然这个 $\sum_{i=1}^nA_i$ 我们可以直接用，所以直接更新。懒标记的下传也是同理。</p>
<p>最后这题解决了。</p>
<p>然后时刻要注意线段树中的参数类型要写成 double。</p>
<p>时间复杂度 $O((m+n)\log n)$。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line">ll n,m,op,l,r;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> a[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sgt</span>&#123;</span></span><br><span class="line">	ll l,r;</span><br><span class="line">	<span class="keyword">double</span> dat1,dat2,laz;</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> l(x) tree[x].l</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> r(x) tree[x].r</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> dat1(x) tree[x].dat1</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> dat2(x) tree[x].dat2</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> laz(x) tree[x].laz</span></span><br><span class="line">&#125;tree[N*<span class="number">4</span>+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(ll p,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">l</span>(p)=l;<span class="built_in">r</span>(p)=r;</span><br><span class="line">	<span class="keyword">if</span>(l==r) &#123;<span class="built_in">dat1</span>(p)=a[l];<span class="built_in">dat2</span>(p)=a[l]*a[l];<span class="keyword">return</span>;&#125;</span><br><span class="line">	ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>,l,mid);<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">	<span class="built_in">dat1</span>(p)=<span class="built_in">dat1</span>(p&lt;&lt;<span class="number">1</span>)+<span class="built_in">dat1</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">dat2</span>(p)=<span class="built_in">dat2</span>(p&lt;&lt;<span class="number">1</span>)+<span class="built_in">dat2</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spread</span><span class="params">(ll p)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">dat2</span>(p&lt;&lt;<span class="number">1</span>)+=<span class="built_in">laz</span>(p)*<span class="built_in">laz</span>(p)*(<span class="built_in">r</span>(p&lt;&lt;<span class="number">1</span>)-<span class="built_in">l</span>(p&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>)+<span class="number">2</span>*<span class="built_in">laz</span>(p)*<span class="built_in">dat1</span>(p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">dat1</span>(p&lt;&lt;<span class="number">1</span>)+=<span class="built_in">laz</span>(p)*(<span class="built_in">r</span>(p&lt;&lt;<span class="number">1</span>)-<span class="built_in">l</span>(p&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>);<span class="built_in">laz</span>(p&lt;&lt;<span class="number">1</span>)+=<span class="built_in">laz</span>(p);</span><br><span class="line">	<span class="built_in">dat2</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)+=<span class="built_in">laz</span>(p)*<span class="built_in">laz</span>(p)*(<span class="built_in">r</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)-<span class="built_in">l</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)+<span class="number">1</span>)+<span class="number">2</span>*<span class="built_in">laz</span>(p)*<span class="built_in">dat1</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">dat1</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)+=<span class="built_in">laz</span>(p)*(<span class="built_in">r</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)-<span class="built_in">l</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)+<span class="number">1</span>);<span class="built_in">laz</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)+=<span class="built_in">laz</span>(p);</span><br><span class="line">	<span class="built_in">laz</span>(p)=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll p,ll l,ll r,<span class="keyword">double</span> k)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>(p)&gt;=l&amp;&amp;<span class="built_in">r</span>(p)&lt;=r) &#123;</span><br><span class="line">		<span class="built_in">dat2</span>(p)+=k*k*(<span class="built_in">r</span>(p)-<span class="built_in">l</span>(p)+<span class="number">1</span>)+<span class="number">2</span>*k*<span class="built_in">dat1</span>(p);</span><br><span class="line">		<span class="built_in">dat1</span>(p)+=k*(<span class="built_in">r</span>(p)-<span class="built_in">l</span>(p)+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">laz</span>(p)+=k;<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid=(<span class="built_in">l</span>(p)+<span class="built_in">r</span>(p))&gt;&gt;<span class="number">1</span>;<span class="built_in">spread</span>(p);</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=mid) <span class="built_in">add</span>(p&lt;&lt;<span class="number">1</span>,l,r,k);</span><br><span class="line">	<span class="keyword">if</span>(r&gt;mid) <span class="built_in">add</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line">	<span class="built_in">dat1</span>(p)=<span class="built_in">dat1</span>(p&lt;&lt;<span class="number">1</span>)+<span class="built_in">dat1</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">dat2</span>(p)=<span class="built_in">dat2</span>(p&lt;&lt;<span class="number">1</span>)+<span class="built_in">dat2</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">ask1</span><span class="params">(ll p,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>(p)&gt;=l&amp;&amp;<span class="built_in">r</span>(p)&lt;=r) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">dat1</span>(p);</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid=(<span class="built_in">l</span>(p)+<span class="built_in">r</span>(p))&gt;&gt;<span class="number">1</span>;<span class="built_in">spread</span>(p);</span><br><span class="line">	<span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">ask1</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">ask1</span>(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">ask1</span>(p&lt;&lt;<span class="number">1</span>,l,r)+<span class="built_in">ask1</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">ask2</span><span class="params">(ll p,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>(p)&gt;=l&amp;&amp;<span class="built_in">r</span>(p)&lt;=r) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">dat2</span>(p);</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid=(<span class="built_in">l</span>(p)+<span class="built_in">r</span>(p))&gt;&gt;<span class="number">1</span>;<span class="built_in">spread</span>(p);</span><br><span class="line">	<span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">ask2</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">ask2</span>(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">ask2</span>(p&lt;&lt;<span class="number">1</span>,l,r)+<span class="built_in">ask2</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;a[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(m--) &#123;</span><br><span class="line">		op=<span class="built_in">read</span>();l=<span class="built_in">read</span>();r=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;k);<span class="built_in">add</span>(<span class="number">1</span>,l,r,k);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="number">2</span>) &#123;</span><br><span class="line">			<span class="keyword">double</span> tmp1=<span class="built_in">ask1</span>(<span class="number">1</span>,l,r),tmp3=r-l+<span class="number">1</span>;</span><br><span class="line">			tmp1=tmp1/tmp3;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%.4f\n&quot;</span>,tmp1);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="number">3</span>) &#123;</span><br><span class="line">			<span class="keyword">double</span> ans,tmp1,tmp2,tmp3;</span><br><span class="line">			tmp1=<span class="built_in">ask1</span>(<span class="number">1</span>,l,r);tmp2=<span class="built_in">ask2</span>(<span class="number">1</span>,l,r);tmp3=r-l+<span class="number">1</span>;</span><br><span class="line">			ans=tmp2/tmp3-(tmp1/tmp3)*(tmp1/tmp3);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%.4f\n&quot;</span>,ans);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PTS</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>P1835</title>
    <url>/2021/12/05/P1835/</url>
    <content><![CDATA[<p>素数密度</p>
<p>根号筛法。据说有低于线性的方法，但是我不会。</p>
<p>我们筛出 $[1,\sqrt R]$ 之间的素数，用这些素数取筛除 $[L,R]$ 中的合数。</p>
<p>为什么一定可以筛完？</p>
<p>显然一个合数可以用 $x=ab$ 表示。</p>
<p>那么不妨设 $a\le b$，那么就会有 $a^2\le ab=x$。即 $x$ 必有一个因子是 $\le \sqrt x$ 的。</p>
<p>然后就是一般筛法什么的了。</p>
<p>时间复杂度 $O(\sqrt R+\dfrac{\sqrt R}{\ln \sqrt R}\ln (R-L))$。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line">ll n,ans,l,r,st,cnt;</span><br><span class="line"></span><br><span class="line">ll prime[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> f[N+<span class="number">5</span>],ff[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">2</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(!f[i]) prime[++cnt]=i;</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;prime[j]*i&lt;=n;i++) &#123;</span><br><span class="line">			f[prime[j]*i]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	l=<span class="built_in">read</span>();r=<span class="built_in">read</span>();</span><br><span class="line">	n=<span class="built_in">sqrt</span>(r)+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">init</span>();ans=r-l+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=cnt;i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(l&lt;=prime[i]) st=l+l;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">if</span>(l%prime[i]==<span class="number">0</span>) st=l;</span><br><span class="line">		<span class="keyword">else</span> st=l/prime[i]*prime[i]+prime[i];</span><br><span class="line">		<span class="keyword">for</span>(ll j=st;j&lt;=r;j+=prime[i]) &#123;</span><br><span class="line">			<span class="keyword">if</span>(!ff[j-l]) ans--;ff[j-l]=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">write</span>(ans);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>P1856</title>
    <url>/2021/12/16/P1856/</url>
    <content><![CDATA[<p>[IOI1998] [USACO5.5] 矩形周长Picture</p>
<p>求一个周长并。</p>
<p>实际上一开始想真的有一定难度。</p>
<p>我们同样是作离散化和扫描，垂直于扫描线的线段可以直接通过区间被割断的段数（可以在线段树上维护）来维护处理。</p>
<p>问题是怎么处理平行的这些个线段。</p>
<p>因为重叠等等的问题，这个东西没有想象中那么的容易。</p>
<p>一个好的想法是，分开单个位置上的区间加和区间减操作，然后统计这个操作位置与上一个操作位置之间的竖直线段长度之差。</p>
<p>可以这样想，重叠的线段在这里被处理掉了，不需要再考虑。作差实际上就是把裸露的那几段线段给统计上了。</p>
<p>我也解释不清楚。</p>
<p>所以有没有大爷来救救孩子啊？</p>
<p>时间复杂度 $O(n\log n)$。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">1e4</span>;</span><br><span class="line"></span><br><span class="line">ll n,tot,totx,toty,ans,lastlen;</span><br><span class="line"></span><br><span class="line">ll xa[N+<span class="number">5</span>],xb[N+<span class="number">5</span>],ya[N+<span class="number">5</span>],yb[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">ll uqx[N+<span class="number">5</span>],uqy[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sgt</span>&#123;</span></span><br><span class="line">	ll l,r,cnt,len,num;</span><br><span class="line">	<span class="keyword">bool</span> lf,rf;</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> l(x) tree[x].l</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> r(x) tree[x].r</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> cnt(x) tree[x].cnt</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> len(x) tree[x].len</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> num(x) tree[x].num</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> lf(x) tree[x].lf</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> rf(x) tree[x].rf</span></span><br><span class="line">&#125;tree[N*<span class="number">4</span>+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ll p)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">cnt</span>(p)&gt;<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">len</span>(p)=uqy[<span class="built_in">r</span>(p)+<span class="number">1</span>]-uqy[<span class="built_in">l</span>(p)];</span><br><span class="line">		<span class="built_in">num</span>(p)=<span class="number">1</span>;<span class="built_in">lf</span>(p)=<span class="number">1</span>;<span class="built_in">rf</span>(p)=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>(p)==<span class="built_in">r</span>(p)) &#123;</span><br><span class="line">		<span class="built_in">len</span>(p)=<span class="number">0</span>;<span class="built_in">num</span>(p)=<span class="number">0</span>;<span class="built_in">lf</span>(p)=<span class="number">0</span>;<span class="built_in">rf</span>(p)=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">len</span>(p)=<span class="built_in">len</span>(p&lt;&lt;<span class="number">1</span>)+<span class="built_in">len</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">num</span>(p)=<span class="built_in">num</span>(p&lt;&lt;<span class="number">1</span>)+<span class="built_in">num</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">lf</span>(p)=<span class="built_in">lf</span>(p&lt;&lt;<span class="number">1</span>);<span class="built_in">rf</span>(p)=<span class="built_in">rf</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">rf</span>(p&lt;&lt;<span class="number">1</span>)&amp;&amp;<span class="built_in">lf</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)) <span class="built_in">num</span>(p)--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(ll p,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">l</span>(p)=l;<span class="built_in">r</span>(p)=r;</span><br><span class="line">	<span class="keyword">if</span>(l==r) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">	ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>,l,mid);<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll p,ll l,ll r,ll k)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>(p)&gt;=l&amp;&amp;<span class="built_in">r</span>(p)&lt;=r) &#123;</span><br><span class="line">		<span class="built_in">cnt</span>(p)+=k;</span><br><span class="line">		<span class="built_in">update</span>(p);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid=(<span class="built_in">l</span>(p)+<span class="built_in">r</span>(p))&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=mid) <span class="built_in">add</span>(p&lt;&lt;<span class="number">1</span>,l,r,k);</span><br><span class="line">	<span class="keyword">if</span>(r&gt;mid) <span class="built_in">add</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line">	<span class="built_in">update</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">	ll l,r,pos,v;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> pos==rhs.pos?(v&gt;rhs.v):(pos&lt;rhs.pos);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;a[N*<span class="number">2</span>+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		xa[i]=<span class="built_in">read</span>();ya[i]=<span class="built_in">read</span>();xb[i]=<span class="built_in">read</span>();yb[i]=<span class="built_in">read</span>();</span><br><span class="line">		uqx[++totx]=xa[i];uqx[++totx]=xb[i];</span><br><span class="line">		uqy[++toty]=ya[i];uqy[++toty]=yb[i];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">sort</span>(uqx+<span class="number">1</span>,uqx+totx+<span class="number">1</span>);totx=<span class="built_in">unique</span>(uqx+<span class="number">1</span>,uqx+totx+<span class="number">1</span>)-uqx<span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">sort</span>(uqy+<span class="number">1</span>,uqy+toty+<span class="number">1</span>);toty=<span class="built_in">unique</span>(uqy+<span class="number">1</span>,uqy+toty+<span class="number">1</span>)-uqy<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		xa[i]=<span class="built_in">lower_bound</span>(uqx+<span class="number">1</span>,uqx+totx+<span class="number">1</span>,xa[i])-uqx;</span><br><span class="line">		ya[i]=<span class="built_in">lower_bound</span>(uqy+<span class="number">1</span>,uqy+toty+<span class="number">1</span>,ya[i])-uqy;</span><br><span class="line">		xb[i]=<span class="built_in">lower_bound</span>(uqx+<span class="number">1</span>,uqx+totx+<span class="number">1</span>,xb[i])-uqx;</span><br><span class="line">		yb[i]=<span class="built_in">lower_bound</span>(uqy+<span class="number">1</span>,uqy+toty+<span class="number">1</span>,yb[i])-uqy;</span><br><span class="line">		a[++tot].pos=xa[i];a[tot].l=ya[i];a[tot].r=yb[i];a[tot].v=<span class="number">1</span>;</span><br><span class="line">		a[++tot].pos=xb[i];a[tot].l=ya[i];a[tot].r=yb[i];a[tot].v=<span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">sort</span>(a+<span class="number">1</span>,a+tot+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,toty<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=tot;i++) &#123;</span><br><span class="line">		<span class="built_in">add</span>(<span class="number">1</span>,a[i].l,a[i].r<span class="number">-1</span>,a[i].v);</span><br><span class="line">		<span class="keyword">if</span>(a[i].pos==a[i+<span class="number">1</span>].pos&amp;&amp;a[i].v==a[i+<span class="number">1</span>].v) <span class="keyword">continue</span>;</span><br><span class="line">		ans+=<span class="built_in">num</span>(<span class="number">1</span>)*<span class="number">2</span>*(uqx[a[i+<span class="number">1</span>].pos]-uqx[a[i].pos]);</span><br><span class="line">		ans+=<span class="built_in">abs</span>(lastlen-<span class="built_in">len</span>(<span class="number">1</span>));</span><br><span class="line">		lastlen=<span class="built_in">len</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">write</span>(ans);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>扫描线</tag>
      </tags>
  </entry>
  <entry>
    <title>P1866</title>
    <url>/2021/12/04/P1866/</url>
    <content><![CDATA[<p>编号</p>
<p>简单乘法原理。</p>
<p>先从小到大排序，然后答案就是：</p>
<p>$$Ans=\prod_{i=1}^n (a_i-i+1)$$</p>
<p>如果有元素 $\le 0$ 就直接输出 0。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">50</span>,mo=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">ll n,ans;</span><br><span class="line"></span><br><span class="line">ll a[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		a[i]=<span class="built_in">read</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	ans=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]-i+<span class="number">1</span>&lt;=<span class="number">0</span>) &#123;ans=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">		ans=(ans*(a[i]-i+<span class="number">1</span>))%mo;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">write</span>(ans);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>计数</tag>
      </tags>
  </entry>
  <entry>
    <title>P2261</title>
    <url>/2021/12/14/P2261/</url>
    <content><![CDATA[<p>[CQOI2007]余数求和</p>
<p>这题是整除分块的一个应用。</p>
<p>可以直接推导：</p>
<p>$$\begin{aligned}Ans&amp;=\sum_{i=1}^n(k\bmod i)\&amp;=\sum_{i=1}^n(k-i\lfloor\dfrac{n}{i}\rfloor)\&amp;=\sum_{i=1}^nk-\sum_{i=1}^n(i\lfloor\dfrac{n}{i}\rfloor)\end{aligned}$$</p>
<p>到这里就差不多了。</p>
<p>我们发现仍然可以把这个东西分块来计算，仍旧是块内的数字都相等，只不过我们要统计的块长会更长，因为需要作一个等差数列求和。</p>
<p>另外，一定要注意这里后面的求和中不要越界，$n$ 与 $k$ 都是其影响因素。</p>
<p>时间复杂度 $O(\sqrt n)$。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">ll n,k,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();k=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	ans=n*k;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>,j;i&lt;=k&amp;&amp;i&lt;=n;i=j+<span class="number">1</span>) &#123;</span><br><span class="line">		j=k/(k/i);<span class="keyword">if</span>(j&gt;n) j=n; </span><br><span class="line">		ans-=((j-i+<span class="number">1</span>)*(i+j)/<span class="number">2</span>)*(k/i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">write</span>(ans);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PTS</category>
      </categories>
      <tags>
        <tag>整除分块</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>P2638</title>
    <url>/2021/12/04/P2638/</url>
    <content><![CDATA[<p>安全系统</p>
<p>这个题目描述是真的屑。</p>
<p>还有这个题为什么要转化为组合数学的问题啊。。。</p>
<p>完全可以直接无脑 DP 好不好。。。</p>
<p>定义 $f(i,j,k)$ 表示前 $n$ 个位置恰用了 $i$ 个 0 和 $j$ 个 1。</p>
<p>那么很显然 $f(i,j,k)=\sum_{p=0}^j\sum_{q=0}^kf(i-1,p,q)$。</p>
<p>很显然这个东西是可以用前缀和优化的。</p>
<p>于是乎我们甚至连 $f(i,j,k)$ 都不需要了。</p>
<p>直接根据 $c(i,j,k)=\sum_{p=0}^j\sum_{q=0}^kf(i,j,k)$ 来转移即可。</p>
<p>就是 $c(i,j,k)=c(i,j-1,k)+c(i,j,k-1)-c(i,j-1,k-1)+c(i-1,j,k)$。</p>
<p>最后的答案就是 $Ans=c(n,a,b)$。</p>
<p>初始化 $\forall i\in[0,a],j\in[0,b]$，都有 $c(0,i,j)=1$。</p>
<p>时间复杂度 $O(nab)$。</p>
<p>数组还可以用滚动数组优化。</p>
<p>对于这种思路的递推来讲，这个多项式复杂度估计是下限了，除非有更强的递推方式优化到线性递推，然后再矩阵快速幂什么的，不过我不会。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll __int128</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">1e2</span>;</span><br><span class="line"></span><br><span class="line">ll n,a,b;</span><br><span class="line"></span><br><span class="line">ll c[N+<span class="number">5</span>][N+<span class="number">5</span>][N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();a=<span class="built_in">read</span>();b=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=a;i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;=b;j++) &#123;</span><br><span class="line">			c[<span class="number">0</span>][i][j]=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;=a;j++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(ll k=<span class="number">0</span>;k&lt;=b;k++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(j&gt;=<span class="number">1</span>) c[i][j][k]+=c[i][j<span class="number">-1</span>][k];</span><br><span class="line">				<span class="keyword">if</span>(k&gt;=<span class="number">1</span>) c[i][j][k]+=c[i][j][k<span class="number">-1</span>];</span><br><span class="line">				<span class="keyword">if</span>(j&gt;=<span class="number">1</span>&amp;&amp;k&gt;=<span class="number">1</span>) c[i][j][k]-=c[i][j<span class="number">-1</span>][k<span class="number">-1</span>];</span><br><span class="line">				c[i][j][k]+=c[i<span class="number">-1</span>][j][k];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">write</span>(c[n][a][b]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>计数</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>P2789</title>
    <url>/2021/12/04/P2789/</url>
    <content><![CDATA[<p>直线交点数</p>
<p>看到 $n$ 这么小，想必多项式复杂度的做法是不太现实的，那我们想一些暴力的非多项式做法。</p>
<p>其实这个交点的情况和平行的线有关。</p>
<p>如果说有 $m$ 组线，第 $i$ 组有 $a_i$ 条线，这 $a_i$ 条线相互平行。</p>
<p>那么我们的答案非常好解决：</p>
<p>$$Ans=\sum_{i=1}^ma_i(n-\sum_{j=1}^ia_j)$$</p>
<p>这个显然是可以 $O(n)$ 计算出来的。</p>
<p>那么我们考虑如何枚举序列 ${a_m}$。</p>
<p>比如说我们对于第 $i$ 条直线，我们可以考虑它放到前一组直线还是放到后一组直线。</p>
<p>然后就可以了。</p>
<p>因为每条直线只有两种选择，所以最后的复杂度是 $O(2^n)$ 的。</p>
<p>然后总的时间复杂度是 $O(n2^n)$。</p>
<p>考虑到这个序列实际上是组合，我们可以尝试使 $a_i\ge a_{i-1}$ 来剪枝。</p>
<p>然后更优的做法是 $O(n^4)$ 的魔幻 DP。</p>
<p>我们定义 $f(i,j)$ 表示 $i$ 条线交出 $j$ 个交点是否有可能。</p>
<p>那么我们可以有转移 $f(i,k+(i-j)*j)|=f(j,k)$。</p>
<p>这里可以用 bitset 优化。</p>
<p>但是据说还有复杂度更优的做法，但是我不会。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">1e3</span>;</span><br><span class="line"></span><br><span class="line">ll n,ans,m;</span><br><span class="line"></span><br><span class="line">ll a[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> f[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll step)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(step&gt;n) &#123;</span><br><span class="line">		ll sum=<span class="number">0</span>,tmp=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">			tmp+=a[i];</span><br><span class="line">			sum+=a[i]*(n-tmp);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!f[sum]) &#123;f[sum]=<span class="number">1</span>;ans++;&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	a[m]++;<span class="built_in">dfs</span>(step+<span class="number">1</span>);a[m]--;</span><br><span class="line">	<span class="keyword">if</span>(n-step+<span class="number">1</span>&lt;a[m]) <span class="keyword">return</span>;</span><br><span class="line">	m++;a[m]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">dfs</span>(step+<span class="number">1</span>);</span><br><span class="line">	a[m]=<span class="number">0</span>;m--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	m++;a[m]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">write</span>(ans);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码（DP）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">700</span>,M=<span class="number">5e5</span>;</span><br><span class="line"></span><br><span class="line">ll n,ans;</span><br><span class="line"></span><br><span class="line">bitset&lt;M&gt; f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) f[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">2</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;=i;j++) &#123;</span><br><span class="line">			f[i]|=f[j]&lt;&lt;((i-j)*j);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">write</span>(f[n].<span class="built_in">count</span>());</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>计数</tag>
      </tags>
  </entry>
  <entry>
    <title>P2926</title>
    <url>/2021/12/05/P2926/</url>
    <content><![CDATA[<p>[USACO08DEC]Patting Heads S</p>
<p>直接倍数筛即可。</p>
<p>时间复杂度 $O(n\ln n)$。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">1e5</span>,M=<span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line">ll n;</span><br><span class="line"></span><br><span class="line">ll f[M+<span class="number">5</span>],ans[M+<span class="number">5</span>],a[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeln</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">write</span>(x);<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		a[i]=<span class="built_in">read</span>();f[a[i]]++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=M;i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(f[i]) &#123;</span><br><span class="line">			<span class="keyword">for</span>(ll j=i;j&lt;=M;j+=i) &#123;</span><br><span class="line">				ans[j]+=f[i];</span><br><span class="line">			&#125;</span><br><span class="line">			ans[i]-=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		<span class="built_in">writeln</span>(ans[a[i]]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>P3157</title>
    <url>/2021/12/19/P3157/</url>
    <content><![CDATA[<p>[CQOI2011]动态逆序对</p>
<p>一开始想了个 naive 的树套树。</p>
<p>显然是可做的。</p>
<p>但实际上用 CDQ 分治更为巧妙。</p>
<p>我们把被删除时间另外作一维，这个问题就又能化成三维偏序。</p>
<p>统计的目标为删除该数之后将会减少多少逆序对。</p>
<p>实际处理的时候要左对右，再右对左进行两种贡献统计。</p>
<p>另外还需要单独统计答案。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line">ll n,m,ans;</span><br><span class="line"></span><br><span class="line">ll delta[N+<span class="number">5</span>],c[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(;x&lt;=m+<span class="number">1</span>;x+=x&amp;-x) c[x]+=y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">ask</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	ll res=<span class="number">0</span>;<span class="keyword">for</span>(;x;x-=x&amp;-x) res+=c[x];<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">	ll a,b,c;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp; rhs) <span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> a&gt;rhs.a;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;a[N+<span class="number">5</span>],tmp[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">	ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">solve</span>(l,mid);<span class="built_in">solve</span>(mid+<span class="number">1</span>,r);</span><br><span class="line">	ll i=l,j=mid+<span class="number">1</span>,k=l;</span><br><span class="line">	<span class="keyword">while</span>(j&lt;=r) &#123;</span><br><span class="line">		<span class="keyword">while</span>(i&lt;=mid) &#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i].b&lt;a[j].b) &#123;</span><br><span class="line">				<span class="built_in">add</span>(a[i].c,<span class="number">1</span>);</span><br><span class="line">				tmp[k++]=a[i++];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ans+=i-l;</span><br><span class="line">		delta[a[j].c]+=<span class="built_in">ask</span>(m+<span class="number">1</span>)-<span class="built_in">ask</span>(a[j].c<span class="number">-1</span>);</span><br><span class="line">		tmp[k++]=a[j++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;=mid) &#123;</span><br><span class="line">		<span class="built_in">add</span>(a[i].c,<span class="number">1</span>);tmp[k++]=a[i++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(j&lt;=r) &#123;</span><br><span class="line">		ans+=i-l;</span><br><span class="line">		delta[a[j].c]+=<span class="built_in">ask</span>(m+<span class="number">1</span>)-<span class="built_in">ask</span>(a[j].c<span class="number">-1</span>);</span><br><span class="line">		tmp[k++]=a[j++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(ll i=l;i&lt;=mid;i++) <span class="built_in">add</span>(a[i].c,<span class="number">-1</span>);</span><br><span class="line">	i=mid;j=r;</span><br><span class="line">	<span class="keyword">while</span>(i&gt;=l) &#123;</span><br><span class="line">		<span class="keyword">while</span>(j&gt;=mid+<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>(a[j].b&gt;a[i].b) &#123;</span><br><span class="line">				<span class="built_in">add</span>(a[j].c,<span class="number">1</span>);j--;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		delta[a[i].c]+=<span class="built_in">ask</span>(m+<span class="number">1</span>)-<span class="built_in">ask</span>(a[i].c<span class="number">-1</span>);</span><br><span class="line">		i--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(j&gt;=mid+<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="built_in">add</span>(a[j].c,<span class="number">1</span>);j--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(i&gt;=l) &#123;</span><br><span class="line">		delta[a[i].c]+=<span class="built_in">ask</span>(m+<span class="number">1</span>)-<span class="built_in">ask</span>(a[i].c<span class="number">-1</span>);</span><br><span class="line">		i--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(ll i=mid+<span class="number">1</span>;i&lt;=r;i++) <span class="built_in">add</span>(a[i].c,<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">for</span>(ll i=l;i&lt;=r;i++) a[i]=tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">writeln</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">write</span>(x);<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		ll x;x=<span class="built_in">read</span>();</span><br><span class="line">		a[x].b=i;a[x].a=x;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">		ll x;x=<span class="built_in">read</span>();</span><br><span class="line">		a[x].c=i;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(!a[i].c) a[i].c=m+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">solve</span>(<span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">		<span class="built_in">writeln</span>(ans);</span><br><span class="line">		ans-=delta[i];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>CDQ分治</tag>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title>P3792</title>
    <url>/2021/12/06/P3792/</url>
    <content><![CDATA[<p>由乃与大母神原型和偶像崇拜</p>
<p>神奇的做法。</p>
<p>一个比较好想的正解是维护序列的最大值、最小值，再用带修主席树维护值域，查询每个区间内的数是否都仅出现一次。但估计空间承受不下。</p>
<p>这个的复杂度大概是 $O(n\log^2 n)$ 的。但是考虑到维护的细节其实不少，所以有一种奇技淫巧：Hash。</p>
<p>我们将序列的和与平方和作为键值与我们想要的值比较即可。</p>
<p>因为卡了 Hash，所以要精心构造一些模数才能通过（并且还需要精心处理逆元）。</p>
<p>当然也有更省事的办法：<code>__int128</code> 。</p>
<p>据说维护区间异或和的 Hash 也可以。</p>
<p>时间复杂度 $O(m\log n)$。</p>
<p>正解可以记录一个数的前驱，具体需要用 map 和 set 来实现。然后就可以用这个来判断区间内是否有重复的数。</p>
<p>这个题对我这种人傻自带大常数的非常不友好，调了一节晚自习才搞过去。</p>
<p>代码（记录前驱）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">5e5</span>,M=<span class="number">6e5</span>;</span><br><span class="line"></span><br><span class="line">ll n,m,op,x,y,tot,top;</span><br><span class="line"></span><br><span class="line">ll a[N+<span class="number">5</span>],pre[N+<span class="number">5</span>],st[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">set&lt;ll&gt; s[M+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">map&lt;ll,ll&gt; ss,mp;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sgt</span>&#123;</span></span><br><span class="line">	ll l,r,ma,mi,mpre;</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> l(x) tree[x].l</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> r(x) tree[x].r</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> ma(x) tree[x].ma</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> mi(x) tree[x].mi</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> mpre(x) tree[x].mpre</span></span><br><span class="line">&#125;tree[N*<span class="number">4</span>+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(ll p,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">l</span>(p)=l;<span class="built_in">r</span>(p)=r;</span><br><span class="line">	<span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">		<span class="built_in">ma</span>(p)=a[l];<span class="built_in">mi</span>(p)=a[l];<span class="built_in">mpre</span>(p)=pre[l];</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>,l,mid);<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">	<span class="built_in">ma</span>(p)=<span class="built_in">max</span>(<span class="built_in">ma</span>(p&lt;&lt;<span class="number">1</span>),<span class="built_in">ma</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">	<span class="built_in">mi</span>(p)=<span class="built_in">min</span>(<span class="built_in">mi</span>(p&lt;&lt;<span class="number">1</span>),<span class="built_in">mi</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">	<span class="built_in">mpre</span>(p)=<span class="built_in">max</span>(<span class="built_in">mpre</span>(p&lt;&lt;<span class="number">1</span>),<span class="built_in">mpre</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifypre</span><span class="params">(ll p,ll x,ll y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>(p)==<span class="built_in">r</span>(p)) &#123;</span><br><span class="line">		<span class="built_in">mpre</span>(p)=y;<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid=(<span class="built_in">l</span>(p)+<span class="built_in">r</span>(p))&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modifypre</span>(p&lt;&lt;<span class="number">1</span>,x,y);</span><br><span class="line">	<span class="keyword">if</span>(x&gt;mid) <span class="built_in">modifypre</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,y);</span><br><span class="line">	<span class="built_in">mpre</span>(p)=<span class="built_in">max</span>(<span class="built_in">mpre</span>(p&lt;&lt;<span class="number">1</span>),<span class="built_in">mpre</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyval</span><span class="params">(ll p,ll x,ll y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>(p)==<span class="built_in">r</span>(p)) &#123;</span><br><span class="line">		<span class="built_in">ma</span>(p)=y;<span class="built_in">mi</span>(p)=y;<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid=(<span class="built_in">l</span>(p)+<span class="built_in">r</span>(p))&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modifyval</span>(p&lt;&lt;<span class="number">1</span>,x,y);</span><br><span class="line">	<span class="keyword">if</span>(x&gt;mid) <span class="built_in">modifyval</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,y);</span><br><span class="line">	<span class="built_in">ma</span>(p)=<span class="built_in">max</span>(<span class="built_in">ma</span>(p&lt;&lt;<span class="number">1</span>),<span class="built_in">ma</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">	<span class="built_in">mi</span>(p)=<span class="built_in">min</span>(<span class="built_in">mi</span>(p&lt;&lt;<span class="number">1</span>),<span class="built_in">mi</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">sgt <span class="title">get</span><span class="params">(ll p,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>(p)&gt;=l&amp;&amp;<span class="built_in">r</span>(p)&lt;=r) <span class="keyword">return</span> tree[p];</span><br><span class="line">	ll mid=(<span class="built_in">l</span>(p)+<span class="built_in">r</span>(p))&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">get</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">get</span>(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">	sgt L=<span class="built_in">get</span>(p&lt;&lt;<span class="number">1</span>,l,r),R=<span class="built_in">get</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r),res;</span><br><span class="line">	res.ma=<span class="built_in">max</span>(L.ma,R.ma);</span><br><span class="line">	res.mi=<span class="built_in">min</span>(L.mi,R.mi);</span><br><span class="line">	res.mpre=<span class="built_in">max</span>(L.mpre,R.mpre);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		a[i]=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">if</span>(ss.<span class="built_in">find</span>(a[i])==ss.<span class="built_in">end</span>()) pre[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span> pre[i]=ss[a[i]];</span><br><span class="line">		ss[a[i]]=i;</span><br><span class="line">		<span class="keyword">if</span>(mp.<span class="built_in">find</span>(a[i])==mp.<span class="built_in">end</span>()) mp[a[i]]=++tot;</span><br><span class="line">		s[mp[a[i]]].<span class="built_in">insert</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(m--) &#123;</span><br><span class="line">		op=<span class="built_in">read</span>();x=<span class="built_in">read</span>();y=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="number">1</span>) &#123;</span><br><span class="line">			ll temp1=mp[a[x]],temp2=<span class="number">0</span>,tmppre=<span class="number">0</span>,pos=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(mp.<span class="built_in">find</span>(y)!=mp.<span class="built_in">end</span>()) temp2=mp[y];</span><br><span class="line">			<span class="keyword">else</span> temp2=mp[y]=++tot;</span><br><span class="line">			set&lt;ll&gt;::iterator it1,it2,it0;</span><br><span class="line">			it0=it1=it2=s[temp1].<span class="built_in">find</span>(x);</span><br><span class="line">			<span class="keyword">if</span>(it1!=s[temp1].<span class="built_in">begin</span>()) tmppre=*--it1;</span><br><span class="line">			<span class="keyword">if</span>(++it2!=s[temp1].<span class="built_in">end</span>()) pos=*it2;</span><br><span class="line">			<span class="keyword">if</span>(pos&gt;<span class="number">0</span>) <span class="built_in">modifypre</span>(<span class="number">1</span>,pos,tmppre);</span><br><span class="line">			s[temp1].<span class="built_in">erase</span>(it0);</span><br><span class="line">			s[temp2].<span class="built_in">insert</span>(x);</span><br><span class="line">			it1=it2=s[temp2].<span class="built_in">find</span>(x);</span><br><span class="line">			<span class="keyword">if</span>(it1==s[temp2].<span class="built_in">begin</span>()) <span class="built_in">modifypre</span>(<span class="number">1</span>,x,<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">modifypre</span>(<span class="number">1</span>,x,*--it1);</span><br><span class="line">			<span class="keyword">if</span>(++it2!=s[temp2].<span class="built_in">end</span>()) <span class="built_in">modifypre</span>(<span class="number">1</span>,*it2,x);</span><br><span class="line">			<span class="built_in">modifyval</span>(<span class="number">1</span>,x,y);a[x]=y;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="number">2</span>) &#123;</span><br><span class="line">			sgt tmp=<span class="built_in">get</span>(<span class="number">1</span>,x,y);</span><br><span class="line">			<span class="keyword">if</span>(tmp.mpre&lt;x&amp;&amp;tmp.ma-tmp.mi==y-x) <span class="built_in">printf</span>(<span class="string">&quot;damushen\n&quot;</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;yuanxing\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码（Hash）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll __int128</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">5e5</span>;</span><br><span class="line"></span><br><span class="line">ll n,m,op,x,y;</span><br><span class="line"></span><br><span class="line">ll a[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sgt</span>&#123;</span></span><br><span class="line">	ll l,r,hash1,hash2,hash3,ma,mi;</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> l(x) tree[x].l</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> r(x) tree[x].r</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> hash1(x) tree[x].hash1</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> hash2(x) tree[x].hash2</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> ma(x) tree[x].ma</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> mi(x) tree[x].mi</span></span><br><span class="line">&#125;tree[N*<span class="number">4</span>+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(ll p,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">l</span>(p)=l;<span class="built_in">r</span>(p)=r;</span><br><span class="line">	<span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">		<span class="built_in">ma</span>(p)=a[l];<span class="built_in">mi</span>(p)=a[l];</span><br><span class="line">		<span class="built_in">hash1</span>(p)=a[l];<span class="built_in">hash2</span>(p)=a[l]*a[l];</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>,l,mid);<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">	<span class="built_in">ma</span>(p)=<span class="built_in">max</span>(<span class="built_in">ma</span>(p&lt;&lt;<span class="number">1</span>),<span class="built_in">ma</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">	<span class="built_in">mi</span>(p)=<span class="built_in">min</span>(<span class="built_in">mi</span>(p&lt;&lt;<span class="number">1</span>),<span class="built_in">mi</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">	<span class="built_in">hash1</span>(p)=<span class="built_in">hash1</span>(p&lt;&lt;<span class="number">1</span>)+<span class="built_in">hash1</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">hash2</span>(p)=<span class="built_in">hash2</span>(p&lt;&lt;<span class="number">1</span>)+<span class="built_in">hash2</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(ll p,ll x,ll y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>(p)==<span class="built_in">r</span>(p)) &#123;</span><br><span class="line">		<span class="built_in">ma</span>(p)=y;<span class="built_in">mi</span>(p)=y;</span><br><span class="line">		<span class="built_in">hash1</span>(p)=y;<span class="built_in">hash2</span>(p)=y*y;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid=(<span class="built_in">l</span>(p)+<span class="built_in">r</span>(p))&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modify</span>(p&lt;&lt;<span class="number">1</span>,x,y);</span><br><span class="line">	<span class="keyword">if</span>(x&gt;mid) <span class="built_in">modify</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,y);</span><br><span class="line">	<span class="built_in">ma</span>(p)=<span class="built_in">max</span>(<span class="built_in">ma</span>(p&lt;&lt;<span class="number">1</span>),<span class="built_in">ma</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">	<span class="built_in">mi</span>(p)=<span class="built_in">min</span>(<span class="built_in">mi</span>(p&lt;&lt;<span class="number">1</span>),<span class="built_in">mi</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">	<span class="built_in">hash1</span>(p)=<span class="built_in">hash1</span>(p&lt;&lt;<span class="number">1</span>)+<span class="built_in">hash1</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">hash2</span>(p)=<span class="built_in">hash2</span>(p&lt;&lt;<span class="number">1</span>)+<span class="built_in">hash2</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">ask1</span><span class="params">(ll p,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>(p)&gt;=l&amp;&amp;<span class="built_in">r</span>(p)&lt;=r) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">hash1</span>(p);</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid=(<span class="built_in">l</span>(p)+<span class="built_in">r</span>(p))&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">ask1</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">ask1</span>(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">ask1</span>(p&lt;&lt;<span class="number">1</span>,l,r)+<span class="built_in">ask1</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">ask2</span><span class="params">(ll p,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>(p)&gt;=l&amp;&amp;<span class="built_in">r</span>(p)&lt;=r) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">hash2</span>(p);</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid=(<span class="built_in">l</span>(p)+<span class="built_in">r</span>(p))&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">ask2</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">ask2</span>(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">ask2</span>(p&lt;&lt;<span class="number">1</span>,l,r)+<span class="built_in">ask2</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">getmax</span><span class="params">(ll p,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>(p)&gt;=l&amp;&amp;<span class="built_in">r</span>(p)&lt;=r) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">ma</span>(p);</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid=(<span class="built_in">l</span>(p)+<span class="built_in">r</span>(p))&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">getmax</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">getmax</span>(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">getmax</span>(p&lt;&lt;<span class="number">1</span>,l,r),<span class="built_in">getmax</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">getmin</span><span class="params">(ll p,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>(p)&gt;=l&amp;&amp;<span class="built_in">r</span>(p)&lt;=r) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">mi</span>(p);</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid=(<span class="built_in">l</span>(p)+<span class="built_in">r</span>(p))&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">getmin</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">getmin</span>(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">getmin</span>(p&lt;&lt;<span class="number">1</span>,l,r),<span class="built_in">getmin</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (l+r)*(r-l+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sqsum</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x*(x+<span class="number">1</span>)*(<span class="number">2</span>*x+<span class="number">1</span>)/<span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		a[i]=<span class="built_in">read</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(m--) &#123;</span><br><span class="line">		op=<span class="built_in">read</span>();x=<span class="built_in">read</span>();y=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">modify</span>(<span class="number">1</span>,x,y);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="number">2</span>) &#123;</span><br><span class="line">			ll maxx=<span class="built_in">getmax</span>(<span class="number">1</span>,x,y),minn=<span class="built_in">getmin</span>(<span class="number">1</span>,x,y);</span><br><span class="line">			<span class="keyword">if</span>(maxx-minn+<span class="number">1</span>!=y-x+<span class="number">1</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;yuanxing\n&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				ll key1=<span class="built_in">ask1</span>(<span class="number">1</span>,x,y),key2=<span class="built_in">ask2</span>(<span class="number">1</span>,x,y);</span><br><span class="line">				ll tmp1=<span class="built_in">sum</span>(minn,maxx),tmp2=<span class="built_in">sqsum</span>(maxx)-<span class="built_in">sqsum</span>(minn<span class="number">-1</span>);</span><br><span class="line">				<span class="keyword">if</span>(tmp1==key1&amp;&amp;tmp2==key2) &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;damushen\n&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;yuanxing\n&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PTS</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>Hash</tag>
        <tag>STL set</tag>
        <tag>STL map</tag>
      </tags>
  </entry>
  <entry>
    <title>P3913</title>
    <url>/2021/12/04/P3913/</url>
    <content><![CDATA[<p>车的攻击</p>
<p>比小学更小学。</p>
<p>但是最优只能到 $O(K\log K)$。</p>
<p>因为要离散化横坐标和纵坐标得到其数目。</p>
<p>然后就随便搞了。</p>
<p>$$Ans=n^2-(n-totc)(n-totr)$$</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll K=<span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line">ll n,k,ans,totc,totr;</span><br><span class="line"></span><br><span class="line">ll r[K+<span class="number">5</span>],c[K+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();k=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=k;i++) &#123;</span><br><span class="line">		r[i]=<span class="built_in">read</span>();c[i]=<span class="built_in">read</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">sort</span>(r+<span class="number">1</span>,r+k+<span class="number">1</span>);<span class="built_in">sort</span>(c+<span class="number">1</span>,c+k+<span class="number">1</span>);</span><br><span class="line">	totr=<span class="built_in">unique</span>(r+<span class="number">1</span>,r+k+<span class="number">1</span>)-r<span class="number">-1</span>;</span><br><span class="line">	totc=<span class="built_in">unique</span>(c+<span class="number">1</span>,c+k+<span class="number">1</span>)-c<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">	ans=n*n-(n-totr)*(n-totc);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">write</span>(ans);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>计数</tag>
      </tags>
  </entry>
  <entry>
    <title>P3959</title>
    <url>/2021/12/14/P3959/</url>
    <content><![CDATA[<p>[NOIP2017 提高组] 宝藏</p>
<p>原来我的题解是用状压 DP 写的，可以戳 <a href="https://www.luogu.com.cn/blog/154279/p3959-post">这里</a>。</p>
<p>然后还咕咕咕咕了一种写法。</p>
<p>然后才知道模拟退火也可以过这题。</p>
<p>可能是因为数据比较小，这个状态的求解范围本身就不是很大，在加上题目数据的强度有限，模拟退火可以很好的过掉这个题。</p>
<p>似乎没有分析复杂度的必要性？</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">20</span>,inf=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-12</span>,delta=<span class="number">0.996</span>;</span><br><span class="line"></span><br><span class="line">ll n,m,ans;</span><br><span class="line"></span><br><span class="line">ll s[N+<span class="number">5</span>],dt[N+<span class="number">5</span>],edge[N+<span class="number">5</span>][N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ans=inf;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) s[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll res=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">	vis[s[<span class="number">1</span>]]=<span class="number">1</span>;dt[s[<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">2</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		ll tmp=inf,v=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;=n;j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(!vis[j]) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(edge[j][s[i]]!=<span class="number">0</span>&amp;&amp;edge[j][s[i]]*dt[j]&lt;tmp) &#123;</span><br><span class="line">				v=j;tmp=edge[j][s[i]]*dt[j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!v) <span class="keyword">return</span> inf;</span><br><span class="line">		vis[s[i]]=<span class="number">1</span>;res+=tmp;dt[s[i]]=dt[v]+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">double</span> T=<span class="number">5000</span>;</span><br><span class="line">	<span class="keyword">while</span>(T&gt;eps) &#123;</span><br><span class="line">		ll x=<span class="built_in">rand</span>()%n+<span class="number">1</span>,y=<span class="built_in">rand</span>()%n+<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">swap</span>(s[x],s[y]);</span><br><span class="line">		ll now=<span class="built_in">f</span>();</span><br><span class="line">		<span class="keyword">if</span>(now&lt;ans) ans=now;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">exp</span>((ans-now)/T)&lt;(<span class="keyword">double</span>)(<span class="built_in">rand</span>()/RAND_MAX)) &#123;</span><br><span class="line">				<span class="built_in">swap</span>(s[x],s[y]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		T*=delta;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">srand</span>(<span class="number">19911225</span>);</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">		ll u,v,w;</span><br><span class="line">		u=<span class="built_in">read</span>();v=<span class="built_in">read</span>();w=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">if</span>(edge[u][v]==<span class="number">0</span>||edge[u][v]&gt;w)</span><br><span class="line">		edge[u][v]=edge[v][u]=w;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++) &#123;</span><br><span class="line">		<span class="built_in">sa</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">write</span>(ans);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>状压DP</tag>
        <tag>模拟退火</tag>
      </tags>
  </entry>
  <entry>
    <title>P4087</title>
    <url>/2021/12/15/P4087/</url>
    <content><![CDATA[<p>[USACO17DEC]Milk Measurement S</p>
<p>wyc 讲题的时候听错了题号结果到了这一题。</p>
<p>不过发现质量居然还相当不错。</p>
<p>非常考验选手的逻辑判断能力。</p>
<p>我们传递参数。</p>
<p>表示假若这个区间是完整区间，里面的最大值的编号是否会更换。</p>
<p>很容易想错。</p>
<p>所以要细致。</p>
<p>假如说比如说 $p$ 的一个左子区间 $q$。</p>
<p>分类讨论：</p>
<ol>
<li><p>如果说原来有 $ma(p)=ma(q)$，且现在 $ma(p)\not =ma(q)$，那就一定会有最大值编号的更换。或者现在 $ma(p)=ma(q)$，但是 $q$ 中有编号更换，那么 $p$ 中也一定有编号更换。</p>
</li>
<li><p>如果说原来有 $ma(p)\not =ma(q)$，且现在 $ma(p)=ma(q)$，那就一定会有最大值编号的更换。</p>
</li>
</ol>
<p>然后完了，正常传参即可。</p>
<p>记得标记清空，而且不要用 <code>memset</code>。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line">ll n,g,tot,ans;</span><br><span class="line"></span><br><span class="line">ll uq[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sgt</span>&#123;</span></span><br><span class="line">	ll l,r,ma;</span><br><span class="line">	<span class="keyword">bool</span> chg;</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> l(x) tree[x].l</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> r(x) tree[x].r</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> ma(x) tree[x].ma</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> chg(x) tree[x].chg</span></span><br><span class="line">&#125;tree[N*<span class="number">4</span>+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">	ll date,id,dt;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp; rhs) <span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> date&lt;rhs.date;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;q[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(ll p,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">l</span>(p)=l;<span class="built_in">r</span>(p)=r;<span class="built_in">ma</span>(p)=g;</span><br><span class="line">	<span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">	ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>,l,mid);<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll p,ll x,ll k)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>(p)==<span class="built_in">r</span>(p)) &#123;</span><br><span class="line">		<span class="built_in">ma</span>(p)+=k;<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid=(<span class="built_in">l</span>(p)+<span class="built_in">r</span>(p))&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	ll tmplma=<span class="built_in">ma</span>(p&lt;&lt;<span class="number">1</span>),tmprma=<span class="built_in">ma</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>),tmpma=<span class="built_in">ma</span>(p);</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=mid) <span class="built_in">add</span>(p&lt;&lt;<span class="number">1</span>,x,k);</span><br><span class="line">	<span class="keyword">if</span>(x&gt;mid) <span class="built_in">add</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,k);</span><br><span class="line">	<span class="built_in">ma</span>(p)=<span class="built_in">max</span>(<span class="built_in">ma</span>(p&lt;&lt;<span class="number">1</span>),<span class="built_in">ma</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">	<span class="keyword">if</span>(tmplma==tmpma) &#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">ma</span>(p&lt;&lt;<span class="number">1</span>)&lt;<span class="built_in">ma</span>(p)) <span class="built_in">chg</span>(p)=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">chg</span>(p&lt;&lt;<span class="number">1</span>)) <span class="built_in">chg</span>(p)=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(tmplma!=tmpma) &#123;<span class="keyword">if</span>(<span class="built_in">ma</span>(p&lt;&lt;<span class="number">1</span>)==<span class="built_in">ma</span>(p)) <span class="built_in">chg</span>(p)=<span class="number">1</span>;&#125;</span><br><span class="line">	<span class="keyword">if</span>(tmprma==tmpma) &#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">ma</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)&lt;<span class="built_in">ma</span>(p)) <span class="built_in">chg</span>(p)=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">chg</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)) <span class="built_in">chg</span>(p)=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(tmprma!=tmpma) &#123;<span class="keyword">if</span>(<span class="built_in">ma</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)==<span class="built_in">ma</span>(p)) <span class="built_in">chg</span>(p)=<span class="number">1</span>;&#125;</span><br><span class="line">	<span class="built_in">chg</span>(p&lt;&lt;<span class="number">1</span>)=<span class="number">0</span>;<span class="built_in">chg</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(ll p)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">chg</span>(p)=<span class="number">0</span>;<span class="keyword">if</span>(<span class="built_in">l</span>(p)==<span class="built_in">r</span>(p)) <span class="keyword">return</span>;</span><br><span class="line">	<span class="built_in">clear</span>(p&lt;&lt;<span class="number">1</span>);<span class="built_in">clear</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();g=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		q[i].date=<span class="built_in">read</span>();</span><br><span class="line">		q[i].id=<span class="built_in">read</span>();q[i].dt=<span class="built_in">read</span>();</span><br><span class="line">		uq[i]=q[i].id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">sort</span>(q+<span class="number">1</span>,q+n+<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">sort</span>(uq+<span class="number">1</span>,uq+n+<span class="number">1</span>);tot=<span class="built_in">unique</span>(uq+<span class="number">1</span>,uq+n+<span class="number">1</span>)-uq<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		q[i].id=<span class="built_in">lower_bound</span>(uq+<span class="number">1</span>,uq+tot+<span class="number">1</span>,q[i].id)-uq;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,tot+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		<span class="built_in">add</span>(<span class="number">1</span>,q[i].id,q[i].dt);</span><br><span class="line">		ans+=<span class="built_in">chg</span>(<span class="number">1</span>);<span class="built_in">chg</span>(<span class="number">1</span>)=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">write</span>(ans);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>P4155</title>
    <url>/2021/12/16/P4155/</url>
    <content><![CDATA[<p>[SCOI2015]国旗计划</p>
<p>和 <a href="https://www.luogu.com.cn/problem/P6902">P6902</a> 差不多。</p>
<p>只不过这里需要开三倍的区间。</p>
<p>因为我们不只需要覆盖环，还需要看以每个区间为顶点的答案。</p>
<p>挺坑的。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">6e5</span>;</span><br><span class="line"></span><br><span class="line">ll n,m,tot,l,r,ans;</span><br><span class="line"></span><br><span class="line">ll f[N+<span class="number">5</span>][<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">	ll c,d,id,ans;</span><br><span class="line">&#125;a[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sett</span>&#123;</span></span><br><span class="line">	ll v,id;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> sett&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> v&lt;rhs.v;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;t;</span><br><span class="line"></span><br><span class="line">set&lt;sett&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(node x,node y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x.c&lt;y.c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(node x,node y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x.id&lt;y.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		a[++tot].c=<span class="built_in">read</span>();a[tot].d=<span class="built_in">read</span>();</span><br><span class="line">		a[tot].id=i;</span><br><span class="line">		<span class="keyword">if</span>(a[tot].d&lt;a[tot].c) &#123;</span><br><span class="line">			a[tot].d+=m;</span><br><span class="line">			tot++;</span><br><span class="line">			a[tot].c=a[tot<span class="number">-1</span>].c+m;</span><br><span class="line">			a[tot].d=a[tot<span class="number">-1</span>].d+m;</span><br><span class="line">			a[tot].id=i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			tot++;</span><br><span class="line">			a[tot].c=a[tot<span class="number">-1</span>].c+m;</span><br><span class="line">			a[tot].d=a[tot<span class="number">-1</span>].d+m;</span><br><span class="line">			a[tot].id=i;</span><br><span class="line">			tot++;</span><br><span class="line">			a[tot].c=a[tot<span class="number">-1</span>].c+m;</span><br><span class="line">			a[tot].d=a[tot<span class="number">-1</span>].d+m;</span><br><span class="line">			a[tot].id=i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">sort</span>(a+<span class="number">1</span>,a+tot+<span class="number">1</span>,cmp1);</span><br><span class="line"></span><br><span class="line">	l=<span class="number">1</span>;r=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=tot;i++) &#123;</span><br><span class="line">		<span class="keyword">while</span>(l&lt;=tot&amp;&amp;a[l].c&lt;a[i].c) &#123;</span><br><span class="line">			t.v=a[l].d;t.id=l;</span><br><span class="line">			s.<span class="built_in">erase</span>(t);l++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(r+<span class="number">1</span>&lt;=tot&amp;&amp;a[r+<span class="number">1</span>].c&lt;=a[i].d) &#123;</span><br><span class="line">			r++;t.v=a[r].d;t.id=r;</span><br><span class="line">			s.<span class="built_in">insert</span>(t);</span><br><span class="line">		&#125;</span><br><span class="line">		f[i][<span class="number">0</span>]=(*--s.<span class="built_in">end</span>()).id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;=<span class="number">20</span>;j++) &#123;	</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=tot;i++) &#123;</span><br><span class="line">			f[i][j]=f[f[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=tot;i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i].d-a[i].c&gt;=m) a[i].ans=<span class="number">1</span>;</span><br><span class="line">		ll x=i,tmp=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(ll k=<span class="number">20</span>;k&gt;=<span class="number">0</span>;k--) &#123;</span><br><span class="line">			<span class="keyword">if</span>(a[f[x][k]].d-a[i].c&lt;m) &#123;</span><br><span class="line">				x=f[x][k];tmp+=<span class="number">1ll</span>&lt;&lt;k;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		x=f[x][<span class="number">0</span>];tmp+=<span class="number">1</span>;a[i].ans=tmp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">sort</span>(a+<span class="number">1</span>,a+tot+<span class="number">1</span>,cmp2);</span><br><span class="line"></span><br><span class="line">	ans=N;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=tot;i++) &#123;</span><br><span class="line">		ans=<span class="built_in">min</span>(ans,a[i].ans);</span><br><span class="line">		<span class="keyword">if</span>(a[i].id==a[i+<span class="number">1</span>].id) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">write</span>(ans);<span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">		ans=N;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PTS</category>
      </categories>
      <tags>
        <tag>倍增</tag>
        <tag>易错点</tag>
      </tags>
  </entry>
  <entry>
    <title>P4377</title>
    <url>/2021/12/15/P4377/</url>
    <content><![CDATA[<p>[USACO18OPEN]Talent Show G</p>
<p>传参 <code>double</code> 内写 <code>ll</code> 居然不报错。</p>
<p>同样是一般 0/1 分数规划。</p>
<p>我们有：</p>
<p>$$\sum_{i=1}^n\dfrac{x_it_i}{x_iw_i}&gt;mid$$</p>
<p>然后化一下：</p>
<p>$$\sum_{i=1}^nx_i(t_i-mid\cdot w_i)&gt;0$$</p>
<p>然后我们知道这里有个限制就是重量总和 $\ge W$。</p>
<p>显然就不能直接贪心了。</p>
<p>但是我们可以背包 DP 一波。</p>
<p>然后就没了。</p>
<p>时间复杂度 $O(nW\log \sum t_i)$。</p>
<p>如果再缩一下的话后面那个 $\log$ 的真数可以更小。但显然现在就已经足够了。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">2.5e2</span>,M=<span class="number">1e3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-6</span>,inf=<span class="number">1e13</span>;</span><br><span class="line"></span><br><span class="line">ll n,W,ans;</span><br><span class="line"></span><br><span class="line">ll w[N+<span class="number">5</span>],t[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> l,r,mid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> f[M+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">double</span> p=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=W;i++) f[i]=-inf;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		p=t[i]-x*w[i];</span><br><span class="line">		<span class="keyword">for</span>(ll j=W;j&gt;=<span class="number">0</span>;j--) &#123;</span><br><span class="line">			f[<span class="built_in">min</span>(W,j+w[i])]=<span class="built_in">max</span>(f[<span class="built_in">min</span>(W,j+w[i])],f[j]+p);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(f[W]&gt;eps) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();W=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		w[i]=<span class="built_in">read</span>();t[i]=<span class="built_in">read</span>();</span><br><span class="line">		r+=t[i];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(r-l&gt;eps) &#123;</span><br><span class="line">		<span class="keyword">double</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l=mid;</span><br><span class="line">		<span class="keyword">else</span> r=mid;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ans=<span class="built_in">floor</span>(l*<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">write</span>(ans);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PTS</category>
      </categories>
      <tags>
        <tag>分数规划</tag>
        <tag>背包</tag>
      </tags>
  </entry>
  <entry>
    <title>P4568</title>
    <url>/2021/12/06/P4568/</url>
    <content><![CDATA[<p>[JLOI2011]飞行路线</p>
<p>分层图最短路跑 Dijkstra 即可。</p>
<p>注意最后答案不一定就是走 $K$ 层，也有可能在 $K$ 层之前就结束了，所以要比较每层得到答案。</p>
<p>时间复杂度 $O((nk+m)\log (nk))$。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">1e4</span>,K=<span class="number">10</span>,M=<span class="number">5e4</span>;</span><br><span class="line"></span><br><span class="line">ll n,m,k,S,T,u,v,w,tot,ans;</span><br><span class="line"></span><br><span class="line">ll ver[M*<span class="number">2</span>+<span class="number">5</span>],nxt[M*<span class="number">2</span>+<span class="number">5</span>],wt[M*<span class="number">2</span>+<span class="number">5</span>],head[N+<span class="number">5</span>],f[N+<span class="number">5</span>][K+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[N+<span class="number">5</span>][K+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">	ll d,v,l;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> node&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> v&gt;rhs.v;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;h,t;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;node,vector&lt;node&gt;,greater&lt;node&gt; &gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dij</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">	f[S][<span class="number">0</span>]=<span class="number">0</span>;t.d=S;t.l=<span class="number">0</span>;t.v=f[S][<span class="number">0</span>];</span><br><span class="line">	q.<span class="built_in">push</span>(t);</span><br><span class="line">	<span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		h=q.<span class="built_in">top</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">if</span>(vis[h.d][h.l]) <span class="keyword">continue</span>;vis[h.d][h.l]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(ll i=head[h.d];i;i=nxt[i]) &#123;</span><br><span class="line">			<span class="keyword">if</span>(f[ver[i]][h.l]&gt;f[h.d][h.l]+wt[i]) &#123;</span><br><span class="line">				f[ver[i]][h.l]=f[h.d][h.l]+wt[i];</span><br><span class="line">				t.d=ver[i];t.l=h.l;t.v=f[ver[i]][h.l];</span><br><span class="line">				q.<span class="built_in">push</span>(t);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(h.l+<span class="number">1</span>&lt;=k&amp;&amp;f[ver[i]][h.l+<span class="number">1</span>]&gt;f[h.d][h.l]) &#123;</span><br><span class="line">				f[ver[i]][h.l+<span class="number">1</span>]=f[h.d][h.l];</span><br><span class="line">				t.d=ver[i];t.l=h.l+<span class="number">1</span>;t.v=f[ver[i]][h.l+<span class="number">1</span>];</span><br><span class="line">				q.<span class="built_in">push</span>(t);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll u,ll v,ll w)</span> </span>&#123;</span><br><span class="line">	ver[++tot]=v;wt[tot]=w;</span><br><span class="line">	nxt[tot]=head[u];head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();k=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	S=<span class="built_in">read</span>();T=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">		u=<span class="built_in">read</span>();v=<span class="built_in">read</span>();w=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">add</span>(u,v,w);<span class="built_in">add</span>(v,u,w);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">dij</span>();</span><br><span class="line"></span><br><span class="line">	ans=f[T][k];</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;k;i++) &#123;</span><br><span class="line">		ans=<span class="built_in">min</span>(ans,f[T][i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">write</span>(ans);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>P5278</title>
    <url>/2021/12/08/P5278/</url>
    <content><![CDATA[<p>算术天才⑨与等差数列</p>
<p><a href="https://www.luogu.com.cn/problem/P3792">P3792</a> 的强化版。</p>
<p>除了判断这个区间的数的最大值最小值满足条件，以及没有重复的数字，还要再弄一些条件才行。</p>
<p>一个可行的方法是对序列差分并维护其绝对值，求出差分区间的 $\gcd$，设其为 $d$。</p>
<p>如果说 $d=k$，可以证明其一定满足条件。反之可以证明一定不成立。</p>
<p>于是 $d=k$ 是充要条件。</p>
<p>那么还要判断特例（为此我与评测机进行了多次友好交流）。公差为 0 以及序列长度为 0 两种情况。</p>
<p>时间复杂度 $O(m\log n\log a)$。</p>
<p>注意卡常。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">3e5</span>;</span><br><span class="line"></span><br><span class="line">ll n,m,op,x,y,tot,top,cnt,k;</span><br><span class="line"></span><br><span class="line">ll a[N+<span class="number">5</span>],pre[N+<span class="number">5</span>],st[N+<span class="number">5</span>],d[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">set&lt;ll&gt; s[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">map&lt;ll,ll&gt; ss,mp;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sgt</span>&#123;</span></span><br><span class="line">	ll l,r,ma,mi,mpre,g;</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> l(x) tree[x].l</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> r(x) tree[x].r</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> ma(x) tree[x].ma</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> mi(x) tree[x].mi</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> mpre(x) tree[x].mpre</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> g(x) tree[x].g</span></span><br><span class="line">&#125;tree[N*<span class="number">4</span>+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(b==<span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">gcd</span>(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(ll p,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">l</span>(p)=l;<span class="built_in">r</span>(p)=r;</span><br><span class="line">	<span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">		<span class="built_in">ma</span>(p)=a[l];<span class="built_in">mi</span>(p)=a[l];<span class="built_in">mpre</span>(p)=pre[l];<span class="built_in">g</span>(p)=d[l];</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>,l,mid);<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">	<span class="built_in">ma</span>(p)=<span class="built_in">max</span>(<span class="built_in">ma</span>(p&lt;&lt;<span class="number">1</span>),<span class="built_in">ma</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">	<span class="built_in">mi</span>(p)=<span class="built_in">min</span>(<span class="built_in">mi</span>(p&lt;&lt;<span class="number">1</span>),<span class="built_in">mi</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">	<span class="built_in">mpre</span>(p)=<span class="built_in">max</span>(<span class="built_in">mpre</span>(p&lt;&lt;<span class="number">1</span>),<span class="built_in">mpre</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">	<span class="built_in">g</span>(p)=<span class="built_in">gcd</span>(<span class="built_in">g</span>(p&lt;&lt;<span class="number">1</span>),<span class="built_in">g</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modifypre</span><span class="params">(ll p,ll x,ll y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>(p)==<span class="built_in">r</span>(p)) &#123;</span><br><span class="line">		<span class="built_in">mpre</span>(p)=y;<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid=(<span class="built_in">l</span>(p)+<span class="built_in">r</span>(p))&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modifypre</span>(p&lt;&lt;<span class="number">1</span>,x,y);</span><br><span class="line">	<span class="keyword">if</span>(x&gt;mid) <span class="built_in">modifypre</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,y);</span><br><span class="line">	<span class="built_in">mpre</span>(p)=<span class="built_in">max</span>(<span class="built_in">mpre</span>(p&lt;&lt;<span class="number">1</span>),<span class="built_in">mpre</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modifyval</span><span class="params">(ll p,ll x,ll y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>(p)==<span class="built_in">r</span>(p)) &#123;</span><br><span class="line">		<span class="built_in">ma</span>(p)=y;<span class="built_in">mi</span>(p)=y;<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid=(<span class="built_in">l</span>(p)+<span class="built_in">r</span>(p))&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modifyval</span>(p&lt;&lt;<span class="number">1</span>,x,y);</span><br><span class="line">	<span class="keyword">if</span>(x&gt;mid) <span class="built_in">modifyval</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,y);</span><br><span class="line">	<span class="built_in">ma</span>(p)=<span class="built_in">max</span>(<span class="built_in">ma</span>(p&lt;&lt;<span class="number">1</span>),<span class="built_in">ma</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">	<span class="built_in">mi</span>(p)=<span class="built_in">min</span>(<span class="built_in">mi</span>(p&lt;&lt;<span class="number">1</span>),<span class="built_in">mi</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modifyg</span><span class="params">(ll p,ll x,ll y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>(p)==<span class="built_in">r</span>(p)) &#123;</span><br><span class="line">		<span class="built_in">g</span>(p)=y;<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid=(<span class="built_in">l</span>(p)+<span class="built_in">r</span>(p))&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modifyg</span>(p&lt;&lt;<span class="number">1</span>,x,y);</span><br><span class="line">	<span class="keyword">if</span>(x&gt;mid) <span class="built_in">modifyg</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,y);</span><br><span class="line">	<span class="built_in">g</span>(p)=<span class="built_in">gcd</span>(<span class="built_in">g</span>(p&lt;&lt;<span class="number">1</span>),<span class="built_in">g</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> sgt <span class="title">get</span><span class="params">(ll p,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>(p)&gt;=l&amp;&amp;<span class="built_in">r</span>(p)&lt;=r) <span class="keyword">return</span> tree[p];</span><br><span class="line">	ll mid=(<span class="built_in">l</span>(p)+<span class="built_in">r</span>(p))&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">get</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">get</span>(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">	sgt L=<span class="built_in">get</span>(p&lt;&lt;<span class="number">1</span>,l,r),R=<span class="built_in">get</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r),res;</span><br><span class="line">	res.ma=<span class="built_in">max</span>(L.ma,R.ma);</span><br><span class="line">	res.mi=<span class="built_in">min</span>(L.mi,R.mi);</span><br><span class="line">	res.mpre=<span class="built_in">max</span>(L.mpre,R.mpre);</span><br><span class="line">	res.g=<span class="built_in">gcd</span>(L.g,R.g);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">abs</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> -x;<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		a[i]=<span class="built_in">read</span>();d[i]=<span class="built_in">abs</span>(a[i]-a[i<span class="number">-1</span>]);</span><br><span class="line">		<span class="keyword">if</span>(ss.<span class="built_in">find</span>(a[i])==ss.<span class="built_in">end</span>()) pre[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span> pre[i]=ss[a[i]];</span><br><span class="line">		ss[a[i]]=i;</span><br><span class="line">		<span class="keyword">if</span>(mp.<span class="built_in">find</span>(a[i])==mp.<span class="built_in">end</span>()) mp[a[i]]=++tot;</span><br><span class="line">		s[mp[a[i]]].<span class="built_in">insert</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(m--) &#123;</span><br><span class="line">		op=<span class="built_in">read</span>();x=<span class="built_in">read</span>();y=<span class="built_in">read</span>();</span><br><span class="line">		x^=cnt;y^=cnt;</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="number">1</span>) &#123;</span><br><span class="line">			ll temp1=mp[a[x]],temp2=<span class="number">0</span>,tmppre=<span class="number">0</span>,pos=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(mp.<span class="built_in">find</span>(y)!=mp.<span class="built_in">end</span>()) temp2=mp[y];</span><br><span class="line">			<span class="keyword">else</span> temp2=mp[y]=++tot;</span><br><span class="line">			set&lt;ll&gt;::iterator it1,it2,it0;</span><br><span class="line">			it0=it1=it2=s[temp1].<span class="built_in">find</span>(x);</span><br><span class="line">			<span class="keyword">if</span>(it1!=s[temp1].<span class="built_in">begin</span>()) tmppre=*--it1;</span><br><span class="line">			<span class="keyword">if</span>(++it2!=s[temp1].<span class="built_in">end</span>()) pos=*it2;</span><br><span class="line">			<span class="keyword">if</span>(pos&gt;<span class="number">0</span>) <span class="built_in">modifypre</span>(<span class="number">1</span>,pos,tmppre);</span><br><span class="line">			s[temp1].<span class="built_in">erase</span>(it0);</span><br><span class="line">			s[temp2].<span class="built_in">insert</span>(x);</span><br><span class="line">			it1=it2=s[temp2].<span class="built_in">find</span>(x);</span><br><span class="line">			<span class="keyword">if</span>(it1==s[temp2].<span class="built_in">begin</span>()) <span class="built_in">modifypre</span>(<span class="number">1</span>,x,<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">modifypre</span>(<span class="number">1</span>,x,*--it1);</span><br><span class="line">			<span class="keyword">if</span>(++it2!=s[temp2].<span class="built_in">end</span>()) <span class="built_in">modifypre</span>(<span class="number">1</span>,*it2,x);</span><br><span class="line">			<span class="built_in">modifyg</span>(<span class="number">1</span>,x,<span class="built_in">abs</span>(y-a[x<span class="number">-1</span>]));</span><br><span class="line">			<span class="keyword">if</span>(x+<span class="number">1</span>&lt;=n) <span class="built_in">modifyg</span>(<span class="number">1</span>,x+<span class="number">1</span>,<span class="built_in">abs</span>(a[x+<span class="number">1</span>]-y));</span><br><span class="line">			<span class="built_in">modifyval</span>(<span class="number">1</span>,x,y);a[x]=y;</span><br><span class="line">			d[x]=<span class="built_in">abs</span>(y-a[x<span class="number">-1</span>]);</span><br><span class="line">			<span class="keyword">if</span>(x+<span class="number">1</span>&lt;=n) d[x+<span class="number">1</span>]=<span class="built_in">abs</span>(a[x+<span class="number">1</span>]-y);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="number">2</span>) &#123;</span><br><span class="line">			k=<span class="built_in">read</span>();k^=cnt;</span><br><span class="line">			sgt tmp=<span class="built_in">get</span>(<span class="number">1</span>,x,y);</span><br><span class="line">			<span class="keyword">if</span>(y-x==<span class="number">0</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);cnt++;<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			sgt tmpp=<span class="built_in">get</span>(<span class="number">1</span>,x+<span class="number">1</span>,y);</span><br><span class="line">			<span class="keyword">if</span>(k==<span class="number">0</span>&amp;&amp;tmp.ma==tmp.mi) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">if</span>(tmp.mpre&lt;x&amp;&amp;tmpp.g==k&amp;&amp;tmp.ma-tmp.mi==k*(y-x)) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PTS</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>数论</tag>
        <tag>STL set</tag>
        <tag>STL map</tag>
      </tags>
  </entry>
  <entry>
    <title>P5522</title>
    <url>/2021/12/01/P5522/</url>
    <content><![CDATA[<p>[yLOI2019] 棠梨煎雪</p>
<p>写了一个树状数组，然后被卡常了。</p>
<p>事实上要写一个状压。</p>
<p>然后我们可以存储两个状态 $a_i$ 和 $b_i$。</p>
<p>$a_i$ 的每一位表示这个串的这一位为 0 还是 1，其中为 <code>?</code> 的位为 0。</p>
<p>然后 $b_i$ 的每一位表示这个串的这一位是否为 <code>?</code>。</p>
<p>然后就可以瞎搞了。</p>
<p>其实这个 <code>?</code> 位，在某次查询中，一个位上的 <code>?</code> 只能全取 0 或全取 1，那么我们想办法实现这个。</p>
<p>于是乎，$a_i\operatorname{xor} b_i$ 就可以让这些位全取 1，$a_i$ 本身就可以让这些位全取 0。</p>
<p>显然前一种值维护区间或，后一种值维护区间与，再多维护一个 $b_i$ 的区间与即可。</p>
<p>线段树维护就好了。</p>
<p>最后看每一位，如果该位不能全 1 并且该位不能全 0 这个区间就是不合法的，否则合法，我们利用 $b_i$ 的区间与看这一位是否都是问号，如果是，使答案乘 2。</p>
<p>时间复杂度 $O(q(n+\log m))$。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">30</span>,M=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">ll n,m,q,pos,l,r,op,ans;</span><br><span class="line"></span><br><span class="line">ll a[M],b[M];</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N+<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sgt</span>&#123;</span></span><br><span class="line">	ll l,r,dat0,dat1,dat2;</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> l(x) tree[x].l</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> r(x) tree[x].r</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> dat0(x) tree[x].dat0</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> dat1(x) tree[x].dat1</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> dat2(x) tree[x].dat2</span></span><br><span class="line">&#125;tree[M*<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(ll p,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">l</span>(p)=l;<span class="built_in">r</span>(p)=r;</span><br><span class="line">	<span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">		<span class="built_in">dat0</span>(p)=a[l];<span class="built_in">dat1</span>(p)=a[l]^b[l];</span><br><span class="line">		<span class="built_in">dat2</span>(p)=b[l];</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>,l,mid);<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">	<span class="built_in">dat0</span>(p)=<span class="built_in">dat0</span>(p&lt;&lt;<span class="number">1</span>)|<span class="built_in">dat0</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">dat1</span>(p)=<span class="built_in">dat1</span>(p&lt;&lt;<span class="number">1</span>)&amp;<span class="built_in">dat1</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">dat2</span>(p)=<span class="built_in">dat2</span>(p&lt;&lt;<span class="number">1</span>)&amp;<span class="built_in">dat2</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">sgt <span class="title">ask</span><span class="params">(ll p,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>(p)&gt;=l&amp;&amp;<span class="built_in">r</span>(p)&lt;=r) &#123;</span><br><span class="line">		<span class="keyword">return</span> tree[p];</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid=(<span class="built_in">l</span>(p)+<span class="built_in">r</span>(p))&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">ask</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">ask</span>(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">	sgt tmpl=<span class="built_in">ask</span>(p&lt;&lt;<span class="number">1</span>,l,r),tmpr=<span class="built_in">ask</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r),res;</span><br><span class="line">	res.dat0=tmpl.dat0|tmpr.dat0;</span><br><span class="line">	res.dat1=tmpl.dat1&amp;tmpr.dat1;</span><br><span class="line">	res.dat2=tmpl.dat2&amp;tmpr.dat2;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(ll p,ll x,ll ka,ll kb)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>(p)==<span class="built_in">r</span>(p)) &#123;</span><br><span class="line">		<span class="built_in">dat0</span>(p)=ka;<span class="built_in">dat1</span>(p)=ka^kb;</span><br><span class="line">		<span class="built_in">dat2</span>(p)=kb;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid=(<span class="built_in">l</span>(p)+<span class="built_in">r</span>(p))&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modify</span>(p&lt;&lt;<span class="number">1</span>,x,ka,kb);</span><br><span class="line">	<span class="keyword">if</span>(x&gt;mid) <span class="built_in">modify</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,ka,kb);</span><br><span class="line">	<span class="built_in">dat0</span>(p)=<span class="built_in">dat0</span>(p&lt;&lt;<span class="number">1</span>)|<span class="built_in">dat0</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">dat1</span>(p)=<span class="built_in">dat1</span>(p&lt;&lt;<span class="number">1</span>)&amp;<span class="built_in">dat1</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">dat2</span>(p)=<span class="built_in">dat2</span>(p&lt;&lt;<span class="number">1</span>)&amp;<span class="built_in">dat2</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();q=<span class="built_in">read</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;=n;j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(s[j]==<span class="string">&#x27;0&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(s[j]==<span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">				a[i]|=(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(s[j]==<span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">				b[i]|=(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,m);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(q--) &#123;</span><br><span class="line">		op=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="number">0</span>) &#123;</span><br><span class="line">			l=<span class="built_in">read</span>();r=<span class="built_in">read</span>();</span><br><span class="line">			sgt tmp=<span class="built_in">ask</span>(<span class="number">1</span>,l,r);</span><br><span class="line">			ll sum=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(((tmp.dat0&gt;&gt;(i<span class="number">-1</span>))&amp;<span class="number">1</span>)&amp;&amp;(!((tmp.dat1&gt;&gt;(i<span class="number">-1</span>))&amp;<span class="number">1</span>))) &#123;</span><br><span class="line">					sum=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>((tmp.dat2&gt;&gt;(i<span class="number">-1</span>))&amp;<span class="number">1</span>) sum&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			ans=ans^sum;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="number">1</span>) &#123;</span><br><span class="line">			pos=<span class="built_in">read</span>();</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">			ll tmpa=<span class="number">0</span>,tmpb=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(s[i]==<span class="string">&#x27;0&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">if</span>(s[i]==<span class="string">&#x27;1&#x27;</span>) &#123;tmpa|=(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>));&#125;</span><br><span class="line">				<span class="keyword">if</span>(s[i]==<span class="string">&#x27;?&#x27;</span>) &#123;tmpb|=(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>));&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">modify</span>(<span class="number">1</span>,pos,tmpa,tmpb);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">write</span>(ans);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>位运算</tag>
        <tag>状态压缩</tag>
      </tags>
  </entry>
  <entry>
    <title>P5960</title>
    <url>/2021/12/06/P5960/</url>
    <content><![CDATA[<p>【模板】差分约束算法</p>
<p>简单来说，这个 $x_i-x_j\le k$ 的形式可以化成 $x_i\le x_j+k$ 这样的类似于松弛的形式。</p>
<p>于是可以建一条 $j\rightarrow i$ 权值为 $k$ 的有向边来表示这种关系。</p>
<p>最后是否有解就是在询问整个差分约束系统是否有负环。</p>
<p>求解的话，很显然如果说 ${a_1,\cdots ,a_n}$ 是一组解，那么必然有 ${a_1+\Delta,\cdots ,a_n+\Delta}$ 也是一组解。</p>
<p>所以我们干脆求出非正数解。</p>
<p>那么就有这样一组差分约束：$x_i-x_{n+1}\le 0$，其中 $x_{n+1}=0$。</p>
<p>就是建 $n$ 条从 $n+1$ 指向各个点的有向边，边权为 0，并且 $dis_{n+1}=0$ 就可以了。</p>
<p>时间复杂度 $O(nm)$。</p>
<p>注意在增加源点 $n+1$ 之后我们的点数变成了 $n+1$，判断负环的时候不要写错。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">5e4</span>,M=<span class="number">5e4</span>;</span><br><span class="line"></span><br><span class="line">ll n,m,u,v,w,tot,flg,h;</span><br><span class="line"></span><br><span class="line">ll ver[M+<span class="number">5</span>],nxt[M+<span class="number">5</span>],head[N+<span class="number">5</span>],wt[M+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">ll inq[N+<span class="number">5</span>],cnt[N+<span class="number">5</span>],f[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">queue&lt;ll&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">	f[n+<span class="number">1</span>]=<span class="number">0</span>;q.<span class="built_in">push</span>(n+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		h=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();vis[h]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(ll i=head[h];i;i=nxt[i]) &#123;</span><br><span class="line">			<span class="keyword">if</span>(f[ver[i]]&gt;f[h]+wt[i]) &#123;</span><br><span class="line">				f[ver[i]]=f[h]+wt[i];cnt[ver[i]]=cnt[h]+<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span>(cnt[ver[i]]&gt;=n+<span class="number">1</span>) &#123;flg=<span class="number">1</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">				<span class="keyword">if</span>(!vis[ver[i]]) &#123;</span><br><span class="line">					q.<span class="built_in">push</span>(ver[i]);vis[ver[i]]=<span class="number">1</span>;</span><br><span class="line">					inq[ver[i]]++;</span><br><span class="line">					<span class="keyword">if</span>(inq[ver[i]]&gt;=n+<span class="number">1</span>) &#123;flg=<span class="number">1</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll u,ll v,ll w)</span> </span>&#123;</span><br><span class="line">	ver[++tot]=v;wt[tot]=w;</span><br><span class="line">	nxt[tot]=head[u];head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">		u=<span class="built_in">read</span>();v=<span class="built_in">read</span>();w=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">add</span>(v,u,w);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		<span class="built_in">add</span>(n+<span class="number">1</span>,i,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">spfa</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(flg) <span class="built_in">printf</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">			<span class="built_in">write</span>(f[i]);<span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>差分约束</tag>
        <tag>负环</tag>
      </tags>
  </entry>
  <entry>
    <title>P6136</title>
    <url>/2021/12/13/P6136/</url>
    <content><![CDATA[<p>【模板】普通平衡树（数据加强版）</p>
<p>原来的题拿了一个 Treap 过了。</p>
<p>然后没有任何封装，导致模板很难再利用什么的，比如说在树套树上。</p>
<p>然后这里写了一个封装的 Splay。</p>
<p>应该比较好用。</p>
<p>但是没有卡常。所以直接加了 inline。好像也能快上不少。</p>
<p>可能 Splay 天生常数大跑不过 Treap 吧。</p>
<p>时间复杂度 $O((n+m)\log n)$。</p>
<p>$Update AD20220123$ 代码修改。使用指针写法为 Splay 动态分配内存，更加方便应用在树套树等嵌套数据结构上。</p>
<p>讲解先咕了。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">2e6</span>;</span><br><span class="line"></span><br><span class="line">ll n,x,op,m,last,ans;</span><br><span class="line"></span><br><span class="line">ll buffa[N+<span class="number">5</span>],bufch0[N+<span class="number">5</span>],bufch1[N+<span class="number">5</span>],bufval[N+<span class="number">5</span>],bufcnt[N+<span class="number">5</span>],bufsiz[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">ll *nowfa=buffa,*nowch0=bufch0,*nowch1=bufch1,*nowval=bufval,*nowcnt=bufcnt,*nowsiz=bufsiz;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Splay</span>&#123;</span></span><br><span class="line">  ll *fa,*ch[<span class="number">2</span>],*val,*cnt,*siz;</span><br><span class="line">  ll rt,sz;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    fa=nowfa;nowfa+=x+<span class="number">1</span>;</span><br><span class="line">    ch[<span class="number">0</span>]=nowch0;nowch0+=x+<span class="number">1</span>;</span><br><span class="line">    ch[<span class="number">1</span>]=nowch1;nowch1+=x+<span class="number">1</span>;</span><br><span class="line">    val=nowval;nowval+=x+<span class="number">1</span>;</span><br><span class="line">    cnt=nowcnt;nowcnt+=x+<span class="number">1</span>;</span><br><span class="line">    siz=nowsiz;nowsiz+=x+<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">(ll x)</span> </span>&#123;siz[x]=siz[ch[<span class="number">0</span>][x]]+siz[ch[<span class="number">1</span>][x]]+cnt[x];&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">get</span><span class="params">(ll x)</span> </span>&#123;<span class="keyword">return</span> x==ch[<span class="number">1</span>][fa[x]];&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">(ll x)</span> </span>&#123;ch[<span class="number">0</span>][x]=ch[<span class="number">1</span>][x]=fa[x]=val[x]=siz[x]=cnt[x]=<span class="number">0</span>;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    ll y=fa[x],z=fa[y],chk=<span class="built_in">get</span>(x);</span><br><span class="line">    ch[chk][y]=ch[chk^<span class="number">1</span>][x];</span><br><span class="line">    <span class="keyword">if</span>(ch[chk^<span class="number">1</span>][x]) fa[ch[chk^<span class="number">1</span>][x]]=y;</span><br><span class="line">    ch[chk^<span class="number">1</span>][x]=y;fa[y]=x;fa[x]=z;</span><br><span class="line">    <span class="keyword">if</span>(z) ch[y==ch[<span class="number">1</span>][z]][z]=x;</span><br><span class="line">    <span class="built_in">maintain</span>(x);<span class="built_in">maintain</span>(y);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(ll x,ll g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(ll f=fa[x];f=fa[x],f!=g;<span class="built_in">rotate</span>(x)) &#123;</span><br><span class="line">      <span class="keyword">if</span>(fa[f]!=g) <span class="built_in">rotate</span>(<span class="built_in">get</span>(x)==<span class="built_in">get</span>(f)?f:x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(g==<span class="number">0</span>) rt=x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> ll <span class="title">find</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!rt) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll cur=rt;</span><br><span class="line">    <span class="keyword">while</span>(ch[x&gt;val[cur]][cur]&amp;&amp;x!=val[cur]) cur=ch[x&gt;val[cur]][cur];</span><br><span class="line">    <span class="built_in">splay</span>(cur,<span class="number">0</span>);<span class="keyword">return</span> cur;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ins</span><span class="params">(ll k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!rt) &#123;</span><br><span class="line">      val[++sz]=k;cnt[sz]++;rt=sz;<span class="built_in">maintain</span>(rt);<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll cur=rt,f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(val[cur]==k) &#123;</span><br><span class="line">        cnt[cur]++;<span class="built_in">maintain</span>(cur);<span class="built_in">maintain</span>(f);<span class="built_in">splay</span>(cur,<span class="number">0</span>);<span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      f=cur;cur=ch[val[cur]&lt;k][cur];</span><br><span class="line">      <span class="keyword">if</span>(!cur) &#123;</span><br><span class="line">        val[++sz]=k;cnt[sz]++;fa[sz]=f;ch[val[f]&lt;k][f]=sz;</span><br><span class="line">        <span class="built_in">maintain</span>(sz);<span class="built_in">maintain</span>(f);<span class="built_in">splay</span>(sz,<span class="number">0</span>);<span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> ll <span class="title">rk</span><span class="params">(ll k)</span> </span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>,cur=rt;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(k&lt;val[cur]) &#123;cur=ch[<span class="number">0</span>][cur];&#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!cur) <span class="keyword">return</span> res+<span class="number">1</span>;</span><br><span class="line">        res+=siz[ch[<span class="number">0</span>][cur]];</span><br><span class="line">        <span class="keyword">if</span>(k==val[cur]) &#123;<span class="built_in">splay</span>(cur,<span class="number">0</span>);<span class="keyword">return</span> res+<span class="number">1</span>;&#125;</span><br><span class="line">        res+=cnt[cur];cur=ch[<span class="number">1</span>][cur];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> ll <span class="title">kth</span><span class="params">(ll k)</span> </span>&#123;</span><br><span class="line">    ll cur=rt;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(ch[<span class="number">0</span>][cur]&amp;&amp;k&lt;=siz[ch[<span class="number">0</span>][cur]]) &#123;cur=ch[<span class="number">0</span>][cur];&#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        k-=cnt[cur]+siz[ch[<span class="number">0</span>][cur]];</span><br><span class="line">        <span class="keyword">if</span>(k&lt;=<span class="number">0</span>) &#123;<span class="built_in">splay</span>(cur,<span class="number">0</span>);<span class="keyword">return</span> val[cur];&#125;</span><br><span class="line">        cur=ch[<span class="number">1</span>][cur];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> ll <span class="title">pre</span><span class="params">(ll k)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">find</span>(k);</span><br><span class="line">    <span class="keyword">if</span>(val[rt]&lt;k) <span class="keyword">return</span> rt;</span><br><span class="line">    ll cur=ch[<span class="number">0</span>][rt];</span><br><span class="line">    <span class="keyword">while</span>(ch[<span class="number">1</span>][cur]) cur=ch[<span class="number">1</span>][cur];</span><br><span class="line">    <span class="built_in">splay</span>(cur,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> ll <span class="title">nxt</span><span class="params">(ll k)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">find</span>(k);</span><br><span class="line">    <span class="keyword">if</span>(val[rt]&gt;k) <span class="keyword">return</span> rt;</span><br><span class="line">    ll cur=ch[<span class="number">1</span>][rt];</span><br><span class="line">    <span class="keyword">while</span>(ch[<span class="number">0</span>][cur]) cur=ch[<span class="number">0</span>][cur];</span><br><span class="line">    <span class="built_in">splay</span>(cur,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(ll k)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">find</span>(k);</span><br><span class="line">    <span class="keyword">if</span>(cnt[rt]&gt;<span class="number">1</span>) &#123;cnt[rt]--;<span class="built_in">maintain</span>(rt);<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(!ch[<span class="number">0</span>][rt]&amp;&amp;!ch[<span class="number">1</span>][rt]) &#123;<span class="built_in">clear</span>(rt);rt=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(!ch[<span class="number">0</span>][rt]) &#123;ll cur=rt;rt=ch[<span class="number">1</span>][rt];fa[rt]=<span class="number">0</span>;<span class="built_in">clear</span>(cur);<span class="keyword">return</span>;&#125;</span><br><span class="line">    ll cur=rt,x=<span class="built_in">pre</span>(k);fa[ch[<span class="number">1</span>][cur]]=x;ch[<span class="number">1</span>][x]=ch[<span class="number">1</span>][cur];</span><br><span class="line">    <span class="built_in">clear</span>(cur);<span class="built_in">maintain</span>(rt);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">  <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">  <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">  <span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">  s.<span class="built_in">init</span>(n+m);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">    x=<span class="built_in">read</span>();s.<span class="built_in">ins</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">    op=<span class="built_in">read</span>();x=<span class="built_in">read</span>();x^=last;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">1</span>) s.<span class="built_in">ins</span>(x);</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">2</span>) s.<span class="built_in">del</span>(x);</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">3</span>) &#123;last=s.<span class="built_in">rk</span>(x);ans^=last;&#125;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">4</span>) &#123;last=s.<span class="built_in">kth</span>(x);ans^=last;&#125;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">5</span>) &#123;last=s.val[s.<span class="built_in">pre</span>(x)];ans^=last;&#125;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">6</span>) &#123;last=s.val[s.<span class="built_in">nxt</span>(x)];ans^=last;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">write</span>(ans);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>Splay</tag>
      </tags>
  </entry>
  <entry>
    <title>P6617</title>
    <url>/2021/12/11/P6617/</url>
    <content><![CDATA[<p>查找 Search</p>
<p>我们尝试维护 $a_i$ 的前驱，定义为 $a_i$ 之前第一个数值为 $w-a_i$ 的数的位置。</p>
<p>但是这样单点修改会非常的麻烦。</p>
<p>所以需要等价转化一下。</p>
<p>比如说，对于数值相同的两个数 $a_i$ 和 $a_{i+k}$，它们的前驱都为 $j$，那么我们其实可以把 $a_{i+k}$ 的前驱直接修改为 0（这样并不会影响答案）。</p>
<p>这样的话，我们单点修改时需要修改的前驱就会少很多。</p>
<p>我们发现，更改 $a_x$ 的值为 $y$，需要修改前驱的位置有这么几个：</p>
<ol>
<li><p>值为 $a_x$ 且在 $x$ 后面的第一个数的位置。</p>
</li>
<li><p>值为 $w-a_x$ 且在 $x$ 后面的第一个数的位置。</p>
</li>
<li><p>$x$ 这个位置。</p>
</li>
<li><p>值为 $y$ 且在 $x$ 后面的第一个数的位置。</p>
</li>
<li><p>值为 $w-y$ 且在 $x$ 后面的第一个数的位置。</p>
</li>
</ol>
<p>很容易发现基本都是求后继，可以用一个 set 来维护。</p>
<p>方便修改前驱而避免一些繁琐的等价转换，我们尝试让实现变得比较整齐。</p>
<p>比如说，加入一个 $pre(x)$ 函数，实时求出 $x$ 的前驱。</p>
<p>这样我们就可以先记录要修改的位置，再直接修改 set 的结构，最后一口气统一修改它们的前驱，同时还能减少很多错误。</p>
<p>因为一开始在技巧性上丢失太多，暴力分类讨论导致代码冗长难以调试，非常痛苦。</p>
<p>时间复杂度 $O((m+n)\log n)$。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">5e5</span>;</span><br><span class="line"></span><br><span class="line">ll n,m,w,op,x,y,cnt;</span><br><span class="line"></span><br><span class="line">ll a[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">set&lt;ll&gt; s[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">pre</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	set&lt;ll&gt;::iterator it1=s[a[x]].<span class="built_in">lower_bound</span>(x),it2=s[w-a[x]].<span class="built_in">lower_bound</span>(x);</span><br><span class="line">	<span class="keyword">if</span>(it2==s[w-a[x]].<span class="built_in">begin</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(it1==s[a[x]].<span class="built_in">begin</span>()) <span class="keyword">return</span> *--it2;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(*--it1&gt;*--it2) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> *it2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sgt</span>&#123;</span></span><br><span class="line">	ll l,r,mp;</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> l(x) tree[x].l</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> r(x) tree[x].r</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> mp(x) tree[x].mp</span></span><br><span class="line">&#125;tree[N*<span class="number">4</span>+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(ll p,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">l</span>(p)=l;<span class="built_in">r</span>(p)=r;</span><br><span class="line">	<span class="keyword">if</span>(l==r) &#123;<span class="built_in">mp</span>(p)=<span class="built_in">pre</span>(l);<span class="keyword">return</span>;&#125;</span><br><span class="line">	ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>,l,mid);<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">	<span class="built_in">mp</span>(p)=<span class="built_in">max</span>(<span class="built_in">mp</span>(p&lt;&lt;<span class="number">1</span>),<span class="built_in">mp</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">ask</span><span class="params">(ll p,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>(p)&gt;=l&amp;&amp;<span class="built_in">r</span>(p)&lt;=r) <span class="keyword">return</span> <span class="built_in">mp</span>(p);</span><br><span class="line">	ll mid=(<span class="built_in">l</span>(p)+<span class="built_in">r</span>(p))&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">ask</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">ask</span>(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">ask</span>(p&lt;&lt;<span class="number">1</span>,l,r),<span class="built_in">ask</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifypre</span><span class="params">(ll p,ll x,ll y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>(p)==<span class="built_in">r</span>(p)) &#123;<span class="built_in">mp</span>(p)=y;<span class="keyword">return</span>;&#125;</span><br><span class="line">	ll mid=(<span class="built_in">l</span>(p)+<span class="built_in">r</span>(p))&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modifypre</span>(p&lt;&lt;<span class="number">1</span>,x,y);</span><br><span class="line">	<span class="keyword">if</span>(x&gt;mid) <span class="built_in">modifypre</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,y);</span><br><span class="line">	<span class="built_in">mp</span>(p)=<span class="built_in">max</span>(<span class="built_in">mp</span>(p&lt;&lt;<span class="number">1</span>),<span class="built_in">mp</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();w=<span class="built_in">read</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		a[i]=<span class="built_in">read</span>();</span><br><span class="line">		s[a[i]].<span class="built_in">insert</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(m--) &#123;</span><br><span class="line">		op=<span class="built_in">read</span>();x=<span class="built_in">read</span>();y=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="number">1</span>) &#123;</span><br><span class="line">			set&lt;ll&gt;::iterator it;</span><br><span class="line">			ll res[<span class="number">5</span>],cnt=<span class="number">-1</span>;</span><br><span class="line">			it=s[a[x]].<span class="built_in">upper_bound</span>(x);</span><br><span class="line">			<span class="keyword">if</span>(it!=s[a[x]].<span class="built_in">end</span>()) res[++cnt]=*it;</span><br><span class="line">			it=s[w-a[x]].<span class="built_in">upper_bound</span>(x);</span><br><span class="line">			<span class="keyword">if</span>(it!=s[w-a[x]].<span class="built_in">end</span>()) res[++cnt]=*it;</span><br><span class="line">			s[a[x]].<span class="built_in">erase</span>(x);</span><br><span class="line">			s[y].<span class="built_in">insert</span>(x);a[x]=y;</span><br><span class="line">			res[++cnt]=x;</span><br><span class="line">			it=s[a[x]].<span class="built_in">upper_bound</span>(x);</span><br><span class="line">			<span class="keyword">if</span>(it!=s[a[x]].<span class="built_in">end</span>()) res[++cnt]=*it;</span><br><span class="line">			it=s[w-a[x]].<span class="built_in">upper_bound</span>(x);</span><br><span class="line">			<span class="keyword">if</span>(it!=s[w-a[x]].<span class="built_in">end</span>()) res[++cnt]=*it;</span><br><span class="line">			<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=cnt;i++) <span class="built_in">modifypre</span>(<span class="number">1</span>,res[i],<span class="built_in">pre</span>(res[i]));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="number">2</span>) &#123;</span><br><span class="line">			x^=cnt;y^=cnt;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">ask</span>(<span class="number">1</span>,x,y)&gt;=x) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PTS</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>STL set</tag>
      </tags>
  </entry>
  <entry>
    <title>UVA11526</title>
    <url>/2021/12/13/UVA11526/</url>
    <content><![CDATA[<p>H(n)</p>
<p>我们要先明白一个道理，虽然 $i$ 有 $n$ 种取值，但是 $\dfrac{n}{i}$ 实际上只有 $O(\sqrt n)$ 的取值。</p>
<p>然而我不会证。</p>
<p>所以在没有任何想法基础的情况下这个结论包括即将讲的做法基本没有做出来的可能。</p>
<p>先引出来一个结论：</p>
<p>若 $j=\lfloor \dfrac{n}{i} \rfloor$，则 $j$ 是满足 $\lfloor \dfrac{n}{j}\rfloor \ge i$ 的最大值。</p>
<p>我不会严谨证明，但是我可以给一个直观的理解。</p>
<p>可以想象一个长度为 $n$ 的序列被长度为 $i$ 的序列逐个覆盖，最多覆盖 $j$ 个这样的序列就没法再覆盖了，因此必然就有长度为 $j$ 的序列在这个长度为 $n$ 的序列上可以覆盖 $i$ 段及以上（因为 $ij=ji$），至于能否再继续用长度为 $j$ 的序列覆盖剩余的段我们并不知道。</p>
<p>因此我们会有 $\lfloor \dfrac{n}{j}\rfloor\ge i$。</p>
<p>如何理解这个 $j$ 是最大的？</p>
<p>比如说我们取一个稍大一点的值 $j+1$，根据我们上面的条件，显然 $i(j+1)&gt;n$，那用长度为 $j+1$ 的序列去覆盖这个长度为 $n$ 的序列必然是覆盖不到 $i$ 段的。</p>
<p>然后我们就可以利用这个结论导出来另一个结论：</p>
<p>若 $j=\lfloor \dfrac{n}{\lfloor \frac{n}{i}\rfloor}\rfloor$，则 $j$ 是满足 $\lfloor\dfrac{n}{j}\rfloor\ge \lfloor \dfrac{n}{i}\rfloor$ 的最大值。</p>
<p>更进一步地，我们可以知道 $\lfloor \dfrac{n}{j}\rfloor=\lfloor\dfrac{n}{i}\rfloor$（根据最大性，实在看不出来就反证，其实挺显然的）。</p>
<p>更进一步地，我们可以知道 $k=j+1$ 是满足 $\lfloor \dfrac{n}{k}\rfloor&lt;\lfloor \dfrac{n}{i}\rfloor$ 的最小值。</p>
<p>所以根据这个结论我们得到一个区间 $[i,j]$ 内的函数值都是相同的，同理 $[j+1,\lfloor\dfrac{n}{\lfloor\frac{n}{j+1}\rfloor}\rfloor]$ 内的函数值也都是相同的，以此类推。</p>
<p>于是时间复杂度与这样区间的数量有关，根据上面结论我们可以知道是 $O(\sqrt n)$ 的。</p>
<p>但我还是不会证。</p>
<p>有大神能救救孩子吗？</p>
<p>找到了一个 <a href="https://www.cnblogs.com/pks-t/p/9212764.html">证明</a>（在第五个），可惜还没时间看（怎么写这么长？）。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">ll T,n,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeln</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">write</span>(x);<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	T=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(T--) &#123;</span><br><span class="line">		n=<span class="built_in">read</span>();ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>,j;i&lt;=n;i=j+<span class="number">1</span>) &#123;</span><br><span class="line">			j=n/(n/i);ans+=(j-i+<span class="number">1</span>)*(n/i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">writeln</span>(ans);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PTS</category>
      </categories>
      <tags>
        <tag>整除分块</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>ProblemsetAD20211224</title>
    <url>/2021/12/24/ProblemsetAD20211224/</url>
    <content><![CDATA[<p>有趣的概率题。</p>
<hr>
<p>P 大数院举行了一场数学考试，有 $n$ 个人围成一圈。</p>
<p>因为题目太难了，所以每个人都想借鉴其他人的答案。</p>
<p>于是它们会等概率的选择借鉴他两边的人中的任意一个。</p>
<p>现在要求不会被任何人借鉴的学生数量的期望值。</p>
<hr>
<p>有一个 $n$ 维的球形空间，球面上有 $n+1$ 个点（可重），求这 $n+1$ 个点用最短距离的方式连接构成的 $n$ 维空间结构包含球形空间圆心的概率。</p>
<p>举个例子，在 2 维的球形空间（圆）上取三个点，可以构成一个三角形，题目即要求这个三角形包含圆心的概率；同理，在三维的球形空间上取四个点，可以构成一个 4 面体，问这个四面体包含圆心的概率。</p>
<hr>
<p>题目大概都是些 MO 原题。</p>
<p>但是我不会。</p>
<p>大神救救我。</p>
<p>T1 的 $n\le 3$ 的情况都可以手算。</p>
<p>直觉够好可以直接找到递推式。</p>
<p>每次相当于往中间加一个人，这个人加上旁边的两个人一共有 8 中可能的借鉴情况，每种借鉴情况又分成两边的人是否被借鉴的情况，大力分类讨论就大概能得到一个递推关系。</p>
<p>不出预料的话是一个线性的递推式。</p>
<p>然后可以矩阵快速幂加速，时间复杂度 $O(\log n)$。</p>
<p>T2 可以盲猜 $2^{-n}$。</p>
<p>不会严谨证明。</p>
<p>$n=1$ 就是数轴上的三个点，所以是 $\dfrac{1}{2}$。</p>
<p>$n=2$ 可以手算得到 $\dfrac{1}{4}$。需要用到一些固定点技巧，不嫌麻烦可以直接暴力解析，不出意外可以做出来。</p>
<p>$n=3$ 的话可以暴力做，比如说固定球中的一个三角形，然后选点，这个面积占球的面积的比即为概率。大概需要作曲面积分什么的，应该也能做出来。最后答案是 $\dfrac{1}{8}$。</p>
<p>规律性感觉挺强的，就是不会证。</p>
<p>以上都是些口胡。</p>
]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>P2000</title>
    <url>/2021/12/25/P2000/</url>
    <content><![CDATA[<p>拯救世界</p>
<p>在学校机房里看的。</p>
<p>比较适合作为生成函数的入门例题。</p>
<p>但是要写高精度，在学校里还是算了。</p>
<p>只讲一下思路。</p>
<p>根据题目所给的十个限制，我们其实可以列出十个生成函数：</p>
<p>$F_1(x)=\sum_{n\ge 0}x^{6n}=\dfrac{1}{1-x^6}$</p>
<p>$F_2(x)=\sum_{n=0}^9x^n=\dfrac{1-x^{10}}{1-x}$</p>
<p>$F_3(x)=\sum_{n=0}^5x^n=\dfrac{1-x^6}{1-x}$</p>
<p>$F_4(x)=\sum_{n\ge 0}x^{4n}=\dfrac{1}{1-x^4}$</p>
<p>$F_5(x)=\sum_{n=0}^7x^n=\dfrac{1-x^8}{1-x}$</p>
<p>$G_1(x)=\sum_{n\ge 0}x^{2n}=\dfrac{1}{1-x^2}$</p>
<p>$G_2(x)=\sum_{n=0}^1x^n=\dfrac{1-x^2}{1-x}$</p>
<p>$G_3(x)=\sum_{n\ge0}x^{8n}=\dfrac{1}{1-x^8}$</p>
<p>$G_4(x)=\sum_{n\ge 0}x^{10n}=\dfrac{1}{1-x^{10}}$</p>
<p>$G_5(x)=\sum_{n=0}^3x^n=\dfrac{1-x^4}{1-x}$</p>
<p>然后这个题的组合意义是什么？</p>
<p>用 $n$ 块且满足条件，显然把 10 个生成函数乘起来，对于次数为 $n$ 的项的系数就是答案（实质就是背包，不如说背包的实质其实是生成函数的卷积）。</p>
<p>不多做解释。</p>
<p>然后我们发现这个题最后乘下来的答案非常漂亮：</p>
<p>$H(x)=\dfrac{1}{(1-x)^5}$</p>
<p>这玩意是什么？</p>
<p>熟悉的人一眼就可以看出来，不做赘述。</p>
<p>$H(x)=\sum_{n\ge 0}\dbinom{n+4}{n}x^n$</p>
<p>第 $n$ 项的系数就是 $\dbinom{n+4}{n}=\dfrac{(n+1)(n+2)(n+3)(n+4)}{24}$，就是答案。</p>
<p>但是这个题要高精度。</p>
]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>生成函数</tag>
      </tags>
  </entry>
  <entry>
    <title>ProveAD20211225</title>
    <url>/2021/12/25/ProveAD20211225/</url>
    <content><![CDATA[<p>曾经问过 fcy 这样一个式子是怎么推的：</p>
<p>$$F(x)=\sum_{n\ge 0}\dbinom{n+k-1}{n}x^n=\dfrac{1}{(1-x)^k}$$</p>
<p>fcy 大概认为是一个 $k$ 次前缀。</p>
<p>虽然觉得很可做但是一番推导过后似乎没有结果。</p>
<p>然后我们翻到了这样一个式子：</p>
<p>$$\dbinom{n}{k}=(-1)^k\dbinom{k-n-1}{k}$$</p>
<p>当然是广义的二项系数。</p>
<p>然后发现有了神奇的反应：</p>
<p>$$\begin{aligned}F(x)&amp;=\sum_{n\ge 0}(-1)^n\dbinom{-k}{n}x^n\&amp;=\sum_{n\ge 0}\dbinom{-k}{n}(-x)^n\end{aligned}$$</p>
<p>再根据广义二项式定理，这个东西就是：</p>
<p>$$\begin{aligned}F(x)=(1-x)^{-k}\end{aligned}$$</p>
<p>证完了。</p>
<p>似乎中午在机房推式子推错了（找机会擦掉）。</p>
<p>当然不是什么很难的东西。</p>
<p>但是不要取笑 QAQ。</p>
<p>关于二项式定理：</p>
<p>fcy 又让我看到了新的结论，关于杨辉三角，实际上每一条平行的斜线，对应了 $k$ 次的前缀和（实际上这个结论很显然，因为本身杨辉三角就是下项等于上两项之和）。</p>
<p>我们知道对应 $k$ 次前缀和的 OGF 必然是 $F(x)=\dfrac{1}{(1-x)^k}$，可以反推过来这个 OGF 的一般形式是一个二项式系数展开。而这个展开是对应每一条斜线的，非常自然的就有 $F(x)=\sum_{n\ge 0}\dbinom{n+k-1}{n}x^n$。</p>
]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>生成函数</tag>
      </tags>
  </entry>
  <entry>
    <title>CompetitionAD20211229</title>
    <url>/2021/12/30/CompetitionAD20211229/</url>
    <content><![CDATA[<p>比赛链接：<a href="http://www.51nod.com/Contest/ContestDescription.html#contestId=786&randomCode=175235">这里</a>。</p>
<p>相较于往次的比赛，质量有了较大的提升。</p>
<p>但其实难度只能说一般。</p>
<h1 id="A"><a href="#A" class="headerlink" title="A."></a>A.</h1><p>这个题先分析一手。</p>
<p>发现是个内向基环树<strong>森林</strong>。</p>
<p>然后我们发现这个能够抓到的充要条件是 $a$ 可到达 $b$，并且 $a$ 和 $b$ 所在的基环树上的环是一个二元环。</p>
<p>特判一手 $a$ 一步就可以到达 $b$ 的情况。</p>
<p>因为没有注意到森林的情况，痛失 5pts。</p>
<p>时间复杂度 $O(Tn)$。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">2e3</span>;</span><br><span class="line"></span><br><span class="line">ll T,n,a,b,amt,flg,flag,top;</span><br><span class="line"></span><br><span class="line">ll ver[N+<span class="number">5</span>],st[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll p)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(vis[p]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(ver[ver[p]]==p) flg=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	vis[p]=<span class="number">1</span>;</span><br><span class="line">	st[++top]=p;</span><br><span class="line">	<span class="built_in">dfs</span>(ver[p]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs_</span><span class="params">(ll p)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p==b) flag=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(vis[p]) <span class="keyword">return</span>;</span><br><span class="line">	vis[p]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">dfs_</span>(ver[p]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	T=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(T--) &#123;</span><br><span class="line">		<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">		top=<span class="number">0</span>;<span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(st));</span><br><span class="line">		flg=<span class="number">0</span>;flag=<span class="number">0</span>;<span class="built_in">memset</span>(ver,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(ver));</span><br><span class="line">		n=<span class="built_in">read</span>();a=<span class="built_in">read</span>();b=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">			ver[i]=<span class="built_in">read</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">dfs</span>(a);</span><br><span class="line">		<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">		<span class="built_in">dfs_</span>(a);</span><br><span class="line">		<span class="keyword">if</span>(ver[a]==b||a==b) <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">if</span>(!flag) <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(flg) <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="B"><a href="#B" class="headerlink" title="B."></a>B.</h1><p>其实可以严谨证明。</p>
<p>最小代价就是区间最小值。</p>
<p>因为中途任何一次清零操作所需要付出的代价都会是 $a_{\min}\times A&gt;a_{\min}$ 的。然后就没了。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line">ll n,q,ans,l,r;</span><br><span class="line"></span><br><span class="line">ll a[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sgt</span>&#123;</span></span><br><span class="line">	ll l,r,dat;</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> l(x) tree[x].l</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> r(x) tree[x].r</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> dat(x) tree[x].dat</span></span><br><span class="line">&#125;tree[N*<span class="number">4</span>+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(ll p,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">l</span>(p)=l;<span class="built_in">r</span>(p)=r;</span><br><span class="line">	<span class="keyword">if</span>(l==r) &#123;<span class="built_in">dat</span>(p)=a[l];<span class="keyword">return</span>;&#125;</span><br><span class="line">	ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>,l,mid);<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">	<span class="built_in">dat</span>(p)=<span class="built_in">min</span>(<span class="built_in">dat</span>(p&lt;&lt;<span class="number">1</span>),<span class="built_in">dat</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">getmin</span><span class="params">(ll p,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">l</span>(p)&gt;=l&amp;&amp;<span class="built_in">r</span>(p)&lt;=r) &#123;<span class="keyword">return</span> <span class="built_in">dat</span>(p);&#125;</span><br><span class="line">	ll mid=(<span class="built_in">l</span>(p)+<span class="built_in">r</span>(p))&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">getmin</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">getmin</span>(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">getmin</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r),<span class="built_in">getmin</span>(p&lt;&lt;<span class="number">1</span>,l,r));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">writeln</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">write</span>(x);<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();q=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		a[i]=<span class="built_in">read</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(q--) &#123;</span><br><span class="line">		l=<span class="built_in">read</span>();r=<span class="built_in">read</span>();</span><br><span class="line">		ans=<span class="built_in">getmin</span>(<span class="number">1</span>,l,r);</span><br><span class="line">		<span class="built_in">writeln</span>(ans);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C"><a href="#C" class="headerlink" title="C."></a>C.</h1><p>这个题实际上仔细分析一下性质。</p>
<p>深度浅的点一定能够尽量多地抢走自己路径上的东西。</p>
<p>深度相同的点可以放在一起后处理。</p>
<p>所以说先按照深度排序，先处理深度浅的点，再处理深的点。</p>
<p>深度相同的点放在一起处理，先统计答案再修改路径。</p>
<p>实际上就是求路径的前缀和，然后附带一个路径乘上一个固定常数（这个动物不会参加游戏的概率）的操作。</p>
<p>显然树链剖分可以实现。</p>
<p>但是这个题它卡树剖。非常的烦人。</p>
<p>于是尝试把线段树结构体中的区间改为传参，取模全部先进行判断再取模。再加上一个 $O(fast)$ 的优化，勉强贴着 900ms 的线过掉了。</p>
<p>时间复杂度 $O(n\log^2 n)$。</p>
<p>气人的是 fcy 的暴力 $O(n^2)$ 跑得巨快直接碾到 AC。</p>
<p>可能是我人傻自带大常数。。。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;Ofast&quot;</span>, <span class="meta-string">&quot;inline&quot;</span>, <span class="meta-string">&quot;-ffast-math&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target(<span class="meta-string">&quot;avx,sse2,sse3,sse4,mmx&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">2e5</span>;</span><br><span class="line"></span><br><span class="line">ll n,m,rt,mo,u,v,tot,cnt,inv;</span><br><span class="line"></span><br><span class="line">ll siz[N+<span class="number">5</span>],hs[N+<span class="number">5</span>],dt[N+<span class="number">5</span>],fa[N+<span class="number">5</span>],top[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">ll a[N+<span class="number">5</span>],wt[N+<span class="number">5</span>],id[N+<span class="number">5</span>],b[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">ll ver[N*<span class="number">2</span>+<span class="number">5</span>],nxt[N*<span class="number">2</span>+<span class="number">5</span>],head[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sgt</span>&#123;</span></span><br><span class="line">	ll sum,mul;</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> sum(x) tree[x].sum</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> mul(x) tree[x].mul</span></span><br><span class="line">&#125;tree[N*<span class="number">4</span>+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">	ll id,dt,ans,p;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp; rhs) <span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> dt&lt;rhs.dt;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;c[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">pow</span><span class="params">(ll b,ll p)</span> </span>&#123;</span><br><span class="line">	ll res=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(p) &#123;</span><br><span class="line">		<span class="keyword">if</span>(p&amp;<span class="number">1</span>) res=(res*b)%mo;</span><br><span class="line">		b=(b*b)%mo;p&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(ll p,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">mul</span>(p)=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l==r) &#123;<span class="built_in">sum</span>(p)=wt[l];<span class="keyword">return</span>;&#125;</span><br><span class="line">	ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>,l,mid);<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">	<span class="built_in">sum</span>(p)=<span class="built_in">sum</span>(p&lt;&lt;<span class="number">1</span>)+<span class="built_in">sum</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">sum</span>(p)&gt;=mo) <span class="built_in">sum</span>(p)%=mo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spread</span><span class="params">(ll p)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">sum</span>(p&lt;&lt;<span class="number">1</span>)=<span class="built_in">sum</span>(p&lt;&lt;<span class="number">1</span>)*<span class="built_in">mul</span>(p);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">sum</span>(p&lt;&lt;<span class="number">1</span>)&gt;=mo) <span class="built_in">sum</span>(p&lt;&lt;<span class="number">1</span>)%=mo;</span><br><span class="line">	<span class="built_in">sum</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)=<span class="built_in">sum</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)*<span class="built_in">mul</span>(p);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">sum</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)&gt;=mo) <span class="built_in">sum</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)%=mo;</span><br><span class="line">	<span class="built_in">mul</span>(p&lt;&lt;<span class="number">1</span>)=(<span class="built_in">mul</span>(p&lt;&lt;<span class="number">1</span>)*<span class="built_in">mul</span>(p))%mo;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">mul</span>(p&lt;&lt;<span class="number">1</span>)&gt;=mo) <span class="built_in">mul</span>(p&lt;&lt;<span class="number">1</span>)%=mo;</span><br><span class="line">	<span class="built_in">mul</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)=(<span class="built_in">mul</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)*<span class="built_in">mul</span>(p))%mo;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">mul</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)&gt;=mo) <span class="built_in">mul</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)%=mo;</span><br><span class="line">	<span class="built_in">mul</span>(p)=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _mul(ll p,ll L,ll R,ll l,ll r,ll d) &#123;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=L&amp;&amp;r&gt;=R) &#123;</span><br><span class="line">		<span class="built_in">sum</span>(p)=<span class="built_in">sum</span>(p)*d;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">sum</span>(p)&gt;=mo) <span class="built_in">sum</span>(p)%=mo;</span><br><span class="line">		<span class="built_in">mul</span>(p)=<span class="built_in">mul</span>(p)*d;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">mul</span>(p)&gt;=mo) <span class="built_in">mul</span>(p)%=mo;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid=(L+R)&gt;&gt;<span class="number">1</span>;<span class="built_in">spread</span>(p);</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=mid) _mul(p&lt;&lt;<span class="number">1</span>,L,mid,l,r,d);</span><br><span class="line">	<span class="keyword">if</span>(r&gt;mid) _mul(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,R,l,r,d);</span><br><span class="line">	<span class="built_in">sum</span>(p)=<span class="built_in">sum</span>(p&lt;&lt;<span class="number">1</span>)+<span class="built_in">sum</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">sum</span>(p)&gt;=mo) <span class="built_in">sum</span>(p)%=mo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(ll p,ll L,ll R,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=L&amp;&amp;r&gt;=R) &#123;<span class="keyword">return</span> <span class="built_in">sum</span>(p);&#125;</span><br><span class="line">	ll mid=(L+R)&gt;&gt;<span class="number">1</span>,res=<span class="number">0</span>;<span class="built_in">spread</span>(p);</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=mid) &#123;res=res+<span class="built_in">query</span>(p&lt;&lt;<span class="number">1</span>,L,mid,l,r);<span class="keyword">if</span>(res&gt;=mo) res%=mo;&#125;;</span><br><span class="line">	<span class="keyword">if</span>(r&gt;mid) &#123;res=res+<span class="built_in">query</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,R,l,r);<span class="keyword">if</span>(res&gt;=mo) res%=mo;&#125;;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll p,ll fath)</span> </span>&#123;</span><br><span class="line">	dt[p]=dt[fath]+<span class="number">1</span>;siz[p]=<span class="number">1</span>;fa[p]=fath;</span><br><span class="line">	<span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(ver[i]==fath) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(ver[i],p);siz[p]+=siz[ver[i]];</span><br><span class="line">		<span class="keyword">if</span>(siz[ver[i]]&gt;siz[hs[p]]) hs[p]=ver[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _dfs(ll p,ll fath,ll topf) &#123;</span><br><span class="line">	id[p]=++cnt;wt[cnt]=a[p];top[p]=topf;</span><br><span class="line">	<span class="keyword">if</span>(!hs[p]) <span class="keyword">return</span>;</span><br><span class="line">	_dfs(hs[p],p,topf);</span><br><span class="line">	<span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(ver[i]==fath||ver[i]==hs[p]) <span class="keyword">continue</span>;</span><br><span class="line">		_dfs(ver[i],p,ver[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mulpath</span><span class="params">(ll x,ll y,ll k)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(top[x]!=top[y]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(dt[top[x]]&lt;dt[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">		_mul(<span class="number">1</span>,<span class="number">1</span>,n,id[top[x]],id[x],k);</span><br><span class="line">		x=fa[top[x]];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(id[x]&gt;id[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">	_mul(<span class="number">1</span>,<span class="number">1</span>,n,id[x],id[y],k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpath</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(top[x]!=top[y]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(dt[top[x]]&lt;dt[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">		ans=ans+<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[top[x]],id[x]);</span><br><span class="line">		<span class="keyword">if</span>(ans&gt;=mo) ans%=mo;</span><br><span class="line">		x=fa[top[x]];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(id[x]&gt;id[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">	ans=ans+<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[x],id[y]);</span><br><span class="line">	<span class="keyword">if</span>(ans&gt;=mo) ans%=mo;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(ll u,ll v)</span> </span>&#123;</span><br><span class="line">	ver[++tot]=v;nxt[tot]=head[u];head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">writeln</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">write</span>(x);<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x.id&lt;y.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	n=<span class="built_in">read</span>();rt=<span class="number">1</span>;mo=<span class="number">998244353</span>;inv=<span class="built_in">pow</span>(<span class="number">100</span>,mo<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) a[i]=<span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;b[i]=<span class="built_in">read</span>();&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i++) &#123;u=<span class="built_in">read</span>();v=<span class="built_in">read</span>();<span class="built_in">addedge</span>(u,v);<span class="built_in">addedge</span>(v,u);&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">dfs</span>(rt,<span class="number">0</span>);_dfs(rt,<span class="number">0</span>,rt);<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		c[i].id=i;c[i].dt=dt[i];c[i].p=(<span class="number">100</span>-b[i]+mo)*inv%mo;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">sort</span>(c+<span class="number">1</span>,c+n+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	ll L=<span class="number">1</span>,R=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(c[i].dt==c[i+<span class="number">1</span>].dt) <span class="keyword">continue</span>;</span><br><span class="line">		R=i;</span><br><span class="line">		<span class="keyword">for</span>(ll j=L;j&lt;=R;j++) &#123;</span><br><span class="line">			c[j].ans=<span class="built_in">qpath</span>(<span class="number">1</span>,c[j].id);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(ll j=L;j&lt;=R;j++) &#123;</span><br><span class="line">			<span class="built_in">mulpath</span>(<span class="number">1</span>,c[j].id,c[j].p);</span><br><span class="line">		&#125;</span><br><span class="line">		L=i+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">sort</span>(c+<span class="number">1</span>,c+n+<span class="number">1</span>,cmp);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		<span class="built_in">writeln</span>(c[i].ans);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="D"><a href="#D" class="headerlink" title="D."></a>D.</h1><p>这个题一个暴力的想法是 $O(n^2)$ 的，实际上就是做一个暴力的背包。</p>
<p>事实上，循环的顺序会极大影响程序的效率。</p>
<p>同机房一堆人使用循环展开加 $O(fast)$ 直接碾掉了这个题，然而我还在想怎么用 NTT。。。</p>
<p>这个题的 NTT 看似不太可做，实则需要一些奇技淫巧。</p>
<p>假如说是 $0$ 和 $1$ 的卷积，显然相乘就是正确的。</p>
<p>那么就可以这样干：如果说一个数大于等于一个常数 $k$，我们就把这个系数当作 $1$，否则当作 $0$。然后得到了两个生成函数，直接 NTT 即可。</p>
<p>那么剩下的肯定还有一点边边角角的数值，我们可以暴力处理。</p>
<p>比较偷懒的话可以直接取一个 $k=100$ 或 $k=1000$ 什么的，这样算下来大概就可以过了。</p>
<p>但是我不会写。</p>
<p>代码（$O(n^2)$）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;Ofast&quot;</span>, <span class="meta-string">&quot;inline&quot;</span>, <span class="meta-string">&quot;-ffast-math&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target(<span class="meta-string">&quot;avx,sse2,sse3,sse4,mmx&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">2e5</span>;</span><br><span class="line"></span><br><span class="line">ll n,res;</span><br><span class="line"></span><br><span class="line">ll a[N+<span class="number">5</span>],b[N+<span class="number">5</span>],g[N+<span class="number">5</span>],f[N+<span class="number">5</span>],ans[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	ll tmp1=<span class="number">0</span>,tmp2=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		a[i]=<span class="built_in">read</span>();f[a[i]]++;</span><br><span class="line">		tmp1=<span class="built_in">max</span>(tmp1,a[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		b[i]=<span class="built_in">read</span>();g[b[i]]++;</span><br><span class="line">		tmp2=<span class="built_in">max</span>(tmp2,b[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=tmp1;i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;=tmp2;j++) &#123;</span><br><span class="line">			ans[i+j]+=<span class="built_in">min</span>(f[i],g[j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=tmp1+tmp2;i++) &#123;</span><br><span class="line">		res=<span class="built_in">max</span>(res,ans[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">write</span>(res);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>比赛题解</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>基环树</tag>
        <tag>树链剖分</tag>
        <tag>NTT</tag>
      </tags>
  </entry>
  <entry>
    <title>Errorprone</title>
    <url>/2021/12/30/Errorprone/</url>
    <content><![CDATA[<h1 id="A-编译器类"><a href="#A-编译器类" class="headerlink" title="A.编译器类"></a>A.编译器类</h1><ol>
<li><p>一个 fcy 曾经提供的。宏定义谨慎使用。</p>
<p> 举个例子，我们有一个 <code>#define max(a,b) a&gt;b?a:b</code>，这个东西其实非常危险。因为这句宏定义里的每一个所需值都会<strong>调用后再处理</strong>。比如说我们有一个函数 <code>f(n)</code>，它的复杂度是 $O(2^n)$ 的。如果说调用 <code>max(f(n),f(n-1))</code> 的话，上面的函数实际上会执行四次。</p>
</li>
<li><p>如果全篇都用的是 <code>long long</code>，并且使用了一些常数，建议使用 <code>1ll</code> 参与运算。因为 <code>1</code> 默认是一个 <code>int</code> 类型的东西，很容易溢出。</p>
</li>
<li><p><code>next</code> 这个东西在一些新版本的编译器中无法通过编译。谨慎使用。</p>
</li>
<li><p>段错误的寻找方法。虽然在 <a href="https://onlypath.github.io/2021/11/27/NOI-Linux/">这里</a> 曾经提过一嘴。使用 gdb 寻找段错误可以有效的提高效率。</p>
</li>
<li><p>传入 <code>double</code> 类型参数，但是函数内部的类型是 <code>ll</code> 的时候是不会报错的。还有 <code>bool</code> 之类也是同理。所以这个一定要谨防。</p>
</li>
</ol>
<h1 id="B-其他"><a href="#B-其他" class="headerlink" title="B.其他"></a>B.其他</h1><ol>
<li><p>无向图存边要开两倍。离散化数组要开多倍。</p>
</li>
<li><p>数组有时候要适量开大防止 RE。但是同时一定要谨防爆内存。这个东西往往最考验经验和心态。。。</p>
</li>
<li><p>调试时候的 <code>printf</code> 语句尽量换行，防止误删源代码。</p>
</li>
<li><p>断环为链有时候要开 3 倍而非 2 倍。比如说 <a href="https://onlypath.github.io/2021/12/16/P4155/">这个题</a>。</p>
</li>
<li><p>慎用 memset 清零，可能会复杂度爆炸。</p>
</li>
<li><p>图论建模的时候加入了源点，那么时刻注意此时的点数为 $n+1$。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>易错点</tag>
      </tags>
  </entry>
  <entry>
    <title>ConstantSkill</title>
    <url>/2021/12/30/ConstantSkill/</url>
    <content><![CDATA[<ol>
<li><p>函数传参 <code>&amp;</code>。</p>
</li>
<li><p>把多维数组中较小维前置。</p>
</li>
<li><p>可以换循环顺序/循环展开。</p>
</li>
<li><p>把数据结构写成 class。应该还需要使用类的内联函数才能发挥真正作用。（在洛谷上使用了 P6136 来测试，效果似乎不是那么的明显）</p>
</li>
<li><p>在多次取模的情况下可以先判断数的大小是否超过模数再决定是否取模，以减少取模次数。</p>
</li>
<li><p>在不必要的时候把 <code>long long</code> 换成 <code>int</code> 会得到显著的常数提升。</p>
</li>
<li><p>即便是现行 C++ 版本，内联函数 <code>inline</code> 仍然有着加速的作用。没有加速作用的是 <code>register</code>，望周知。</p>
</li>
<li><p>一个显然的加速，就是自造运算。有如下的一些方法（虽然看起来很扯拐）：</p>
<ul>
<li><p><code>i=-i</code> 可以换成 <code>i=~i+1</code> 或 <code>i=(i^-1)+1</code>。</p>
</li>
<li><p>如果取模 $2^k$，可以把 <code>ans%=mo</code> 换成 <code>ans=ans&amp;(mo-1)</code>。</p>
</li>
<li><p>判断奇偶，使用 <code>i&amp;1</code>。</p>
</li>
<li><p>自己写一个 <code>abs</code>，比如 <code>i=x&lt;0?-x:x</code>。注意宏定义的使用。</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>卡常</tag>
      </tags>
  </entry>
  <entry>
    <title>SthAboutAD2021</title>
    <url>/2021/12/31/SthAboutAD2021/</url>
    <content><![CDATA[<pre><code>过去的迷雾，终将散开。

因为，黎明会来，未来仍在。

需要做的，便是去热爱所爱。

    —— AD20211231
</code></pre>
<p>2021，再见！</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Love OI forever.</span></span><br><span class="line"><span class="comment">//Love Liz und ein Blauer Vogel forever.</span></span><br><span class="line"><span class="comment">//Love every nice person I meet.</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>A_Dream_of_Cyan</title>
    <url>/2022/01/02/A-Dream-of-Cyan/</url>
    <content><![CDATA[<p>我仍喜欢，撑着那把青伞，</p>
<p>独自，徘徊在那灰色的天。</p>
<p>我总希望，能再逢着那个青色的姑娘，</p>
<p>就像，我曾经看见她一样。</p>
<p>而这青的希望，终究只是彷徨。</p>
<p>只因在这雨的哀曲中，</p>
<p>早已消了这青的颜色，</p>
<p>散了这青的明亮，</p>
<p>消散了，我往日忆中的浮光，</p>
<p>与那雨中的惆怅。</p>
<p>（仿《雨巷》戴望舒）</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>EssayAD20220121</title>
    <url>/2022/01/21/EssayAD20220121/</url>
    <content><![CDATA[<p>期末考地理的时候写的。</p>
<pre><code>迷雾散开的黎明，
留下梦破碎的光影。
</code></pre>
<p>仿用了北岛的诗。</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>CF600E</title>
    <url>/2022/01/05/CF600E/</url>
    <content><![CDATA[<p>Lomsat gelral</p>
<p>其实挺好理解的。理解了树剖的复杂度原理之后，这个东西的原理其实非常相似。</p>
<p>同样，我们第一次 dfs 寻找重儿子。</p>
<p>然后我们开始统计。</p>
<p>统计的顺序是这样的：</p>
<ol>
<li><p>求解 $p$ 点轻儿子子树内的答案。但是不保留它对桶 $cnt$ 的贡献。</p>
</li>
<li><p>求解 $p$ 的重儿子子树内的答案，并且保留（暂时）它对桶 $cnt$ 的贡献。</p>
</li>
<li><p>再遍历 $p$ 的轻儿子子树，相当于暴力统计出 $p$ 的答案，然后 $p$ 的答案就算出来了。</p>
</li>
<li><p>如果需要保留现有的桶和答案什么的就保留；反之，我们就把之前统计的所有桶内的答案撤销。</p>
</li>
</ol>
<p>这个原理我们可以从每一个点的被数次数想。</p>
<p>显然一个点被统计的次数与其到根节点路径上的<strong>轻边数</strong>基本线性相关，或者，更通俗地说，与<strong>重链数</strong>基本线性相关。而根据重链剖分的性质我们容易知道重链数是 $O(\log n)$ 的。</p>
<p>显然求解的递归过程是 $O(n)$（除去计数操作）。</p>
<p>那么意味着每个点都会被基础性的操作一次。</p>
<p>那么除去基础性的操作，剩下的都是附加操作了。</p>
<p>一个点被附加操作数到，当且仅当被作为轻儿子子树内的一个点。</p>
<p>于是乎就和轻边数线性相关了。</p>
<p>所以时间复杂度是 $O(n\log n)$ 的。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line">ll n,u,v,tmp_col,tot,macnt,mc,tc;</span><br><span class="line"></span><br><span class="line">ll ver[N*<span class="number">2</span>+<span class="number">5</span>],nxt[N*<span class="number">2</span>+<span class="number">5</span>],head[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">ll main_col[N+<span class="number">5</span>],siz[N+<span class="number">5</span>],hs[N+<span class="number">5</span>],cnt[N+<span class="number">5</span>],c[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll p,ll fath)</span> </span>&#123;</span><br><span class="line">	siz[p]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(ver[i]==fath) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(ver[i],p);</span><br><span class="line">		<span class="keyword">if</span>(siz[ver[i]]&gt;siz[hs[p]]) hs[p]=ver[i];</span><br><span class="line">		siz[p]+=siz[ver[i]];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ll p,ll fath,ll k)</span> </span>&#123;</span><br><span class="line">	cnt[c[p]]+=k;</span><br><span class="line">	<span class="keyword">if</span>(cnt[c[p]]&gt;mc) &#123;mc=cnt[c[p]];tc=c[p];&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;<span class="keyword">if</span>(cnt[c[p]]==mc) tc+=c[p];&#125;</span><br><span class="line">	<span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(ver[i]==fath) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">add</span>(ver[i],p,k);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs_</span><span class="params">(ll p,ll fath,<span class="keyword">bool</span> kp)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(ver[i]==fath||ver[i]==hs[p]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs_</span>(ver[i],p,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(hs[p]) <span class="built_in">dfs_</span>(hs[p],p,<span class="number">1</span>);</span><br><span class="line">	mc=macnt;tc=tmp_col;</span><br><span class="line">	<span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(ver[i]==fath||ver[i]==hs[p]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">add</span>(ver[i],p,<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	cnt[c[p]]++;</span><br><span class="line">	<span class="keyword">if</span>(cnt[c[p]]&gt;mc) &#123;mc=cnt[c[p]];tc=c[p];&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;<span class="keyword">if</span>(cnt[c[p]]==mc) tc+=c[p];&#125;</span><br><span class="line">	main_col[p]=tc;</span><br><span class="line">	<span class="keyword">if</span>(kp) &#123;macnt=mc;tmp_col=tc;&#125;</span><br><span class="line">	<span class="keyword">if</span>(!kp) &#123;</span><br><span class="line">		cnt[c[p]]--;</span><br><span class="line">		<span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">			<span class="keyword">if</span>(ver[i]==fath) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="built_in">add</span>(ver[i],p,<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		macnt=<span class="number">0</span>;tmp_col=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(ll u,ll v)</span> </span>&#123;</span><br><span class="line">	ver[++tot]=v;nxt[tot]=head[u];head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		c[i]=<span class="built_in">read</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">		u=<span class="built_in">read</span>();v=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">addedge</span>(u,v);<span class="built_in">addedge</span>(v,u);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">dfs_</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		<span class="built_in">write</span>(main_col[i]);<span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PTS</category>
      </categories>
      <tags>
        <tag>启发式合并</tag>
      </tags>
  </entry>
  <entry>
    <title>CF741D</title>
    <url>/2022/01/21/CF741D/</url>
    <content><![CDATA[<p>Arpa’s letter-marked tree and Mehrdad’s Dokhtar-kosh paths</p>
<p>启发式合并。</p>
<p>实际上也不太好想。</p>
<p>但是都快期末考试了，我为什么还要在机房写题。</p>
<p>应该在机房颓文化课。$\sqrt{}$</p>
<p>我们采用状态压缩。每个字符出现偶数次没有问题，出现奇数次的字符只能出现一个。那么可以直接异或，最后使用目标状态来反推出需要接上的状态。</p>
<p>简单来说，如果我们暴力来做，先要需处理处该子树内某些状态的最优值。然后显然，我们需要不同字数的两个最优值接在一起构成一条树上路径。</p>
<p>那么基本思路知道了之后，就可以写启发式合并了。</p>
<p>道理一样的。</p>
<p>时间复杂度 $O(22n\log n)$。</p>
<p>CF 机子跑得快，这个 22 可以当做小常数。</p>
<p>被卡的测试点似乎是因为没有判断转移的状态是否存在。每次转移都需要判一下才行。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">5e5</span>;</span><br><span class="line"></span><br><span class="line">ll n,v,tmpans,lca,tot;</span><br><span class="line"></span><br><span class="line">ll ver[N*<span class="number">2</span>+<span class="number">5</span>],nxt[N*<span class="number">2</span>+<span class="number">5</span>],wt[N*<span class="number">2</span>+<span class="number">5</span>],head[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">ll ans[N+<span class="number">5</span>],siz[N+<span class="number">5</span>],dt[N+<span class="number">5</span>],dep[(<span class="number">1ll</span>&lt;&lt;<span class="number">23</span>)+<span class="number">5</span>],val[N+<span class="number">5</span>],hs[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll p,ll fath)</span> </span>&#123;</span><br><span class="line">	siz[p]=<span class="number">1</span>;dt[p]=dt[fath]+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(ver[i]==fath) <span class="keyword">continue</span>;</span><br><span class="line">		val[ver[i]]=val[p]^(<span class="number">1ll</span>&lt;&lt;wt[i]);</span><br><span class="line">		<span class="built_in">dfs</span>(ver[i],p);</span><br><span class="line">		<span class="keyword">if</span>(siz[ver[i]]&gt;siz[hs[p]]) hs[p]=ver[i];</span><br><span class="line">		siz[p]+=siz[ver[i]];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getans</span><span class="params">(ll p,ll fath)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;<span class="number">22</span>;j++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(dep[(<span class="number">1ll</span>&lt;&lt;j)^val[p]])</span><br><span class="line">		tmpans=<span class="built_in">max</span>(tmpans,dt[p]+dep[(<span class="number">1ll</span>&lt;&lt;j)^val[p]]<span class="number">-2</span>*dt[lca]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dep[<span class="number">0</span>^val[p]])</span><br><span class="line">	tmpans=<span class="built_in">max</span>(tmpans,dt[p]+dep[<span class="number">0</span>^val[p]]<span class="number">-2</span>*dt[lca]);</span><br><span class="line">	<span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(ver[i]==fath) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">getans</span>(ver[i],p);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(ll p,ll fath)</span> </span>&#123;</span><br><span class="line">	dep[val[p]]=<span class="built_in">max</span>(dep[val[p]],dt[p]);</span><br><span class="line">	<span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(ver[i]==fath) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">modify</span>(ver[i],p);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">(ll p,ll fath)</span> </span>&#123;</span><br><span class="line">	dep[val[p]]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(ver[i]==fath) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">clear</span>(ver[i],p);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs_</span><span class="params">(ll p,ll fath,<span class="keyword">bool</span> kp)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(ver[i]==fath||ver[i]==hs[p]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs_</span>(ver[i],p,<span class="number">0</span>);ans[p]=<span class="built_in">max</span>(ans[p],ans[ver[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(hs[p]) &#123;<span class="built_in">dfs_</span>(hs[p],p,<span class="number">1</span>);ans[p]=<span class="built_in">max</span>(ans[p],ans[hs[p]]);&#125;</span><br><span class="line">	tmpans=ans[p];lca=p;</span><br><span class="line">	<span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(ver[i]==hs[p]||ver[i]==fath) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">getans</span>(ver[i],p);<span class="built_in">modify</span>(ver[i],p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;<span class="number">22</span>;j++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(dep[(<span class="number">1ll</span>&lt;&lt;j)^val[p]])</span><br><span class="line">		tmpans=<span class="built_in">max</span>(tmpans,dt[p]+dep[(<span class="number">1ll</span>&lt;&lt;j)^val[p]]<span class="number">-2</span>*dt[lca]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dep[<span class="number">0</span>^val[p]])</span><br><span class="line">	tmpans=<span class="built_in">max</span>(tmpans,dt[p]+dep[<span class="number">0</span>^val[p]]<span class="number">-2</span>*dt[lca]);</span><br><span class="line">	dep[val[p]]=<span class="built_in">max</span>(dep[val[p]],dt[p]);</span><br><span class="line">	ans[p]=<span class="built_in">max</span>(ans[p],tmpans);</span><br><span class="line">	<span class="keyword">if</span>(!kp) &#123;</span><br><span class="line">		<span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">			<span class="keyword">if</span>(ver[i]==fath) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="built_in">clear</span>(ver[i],p);</span><br><span class="line">		&#125;</span><br><span class="line">		dep[val[p]]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(ll u,ll v,ll w)</span> </span>&#123;</span><br><span class="line">	ver[++tot]=v;wt[tot]=w;nxt[tot]=head[u];head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">    	<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">writeln</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">write</span>(x);<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	n=<span class="built_in">read</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">2</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		<span class="keyword">char</span> ch[<span class="number">3</span>];</span><br><span class="line">		v=<span class="built_in">read</span>();<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,ch);</span><br><span class="line">		<span class="built_in">addedge</span>(v,i,ch[<span class="number">0</span>]-<span class="string">&#x27;a&#x27;</span>);<span class="built_in">addedge</span>(i,v,ch[<span class="number">0</span>]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);<span class="built_in">dfs_</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		<span class="built_in">write</span>(ans[i]);<span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PTS</category>
      </categories>
      <tags>
        <tag>启发式合并</tag>
      </tags>
  </entry>
  <entry>
    <title>P3379</title>
    <url>/2022/01/21/P3379/</url>
    <content><![CDATA[<p>【模板】最近公共祖先（LCA）</p>
<p>继续划水摸鱼。</p>
<p>总结一下 LCA 的常用求法：</p>
<ol>
<li><p>倍增。$O(n\log n)$ 预处理，$O(\log n)$ 查询。码量适中。</p>
</li>
<li><p>树剖。$O(n)$ 预处理，$O(\log n)$ 查询。码量小。</p>
</li>
<li><p>Tarjan。离线算法，需要预先知道询问。$O(n+q)$ 预处理，$O(1)$ 查询。码量小。</p>
</li>
<li><p>四毛子。$O(n\log n)$ 预处理，$O(1)$ 查询。码量稍大。</p>
</li>
</ol>
<p>首先是第一种。原理是存储 $x$ 的 $2^i$ 级父亲 $fa(x,i)$，然后往上跳。优点是比较好写，速度还好，可以在线。缺点是还要再多开一些内存。</p>
<p>第二种树剖是我比较喜欢的写法。树剖实际上非常灵活，不少树上问题都可以用树剖来解决。实际上原理和第一种很类似，我们是跳重链来保证复杂度。这个算法的空间也是 $O(n)$ 的，预处理也不会有瓶颈，码量非常小，记忆很方便。</p>
<p>第三种的做法依托于 DFS，借助并查集来寻找 LCA。优点是比较好写，而且重复访问复杂度 $O(1)$。缺点是只能离线。</p>
<p>第四种做法依托于欧拉序和 ST 表。原理就是把树的欧拉序搞出来，每个位置存放其深度，查询两点间欧拉序中深度最小的点就是 LCA。优点是查询快，可以在线。缺点是码量稍大，处理起来有一点点麻烦。</p>
<p>这里没有第四种的代码，<del>因为我比较懒</del>。</p>
<p>代码（倍增）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">5e5</span>;</span><br><span class="line"></span><br><span class="line">ll n,m,s,u,v,tot;</span><br><span class="line"></span><br><span class="line">ll lg[N+<span class="number">5</span>],ver[(N&lt;&lt;<span class="number">1</span>)+<span class="number">5</span>],nxt[(N&lt;&lt;<span class="number">1</span>)+<span class="number">5</span>],head[N+<span class="number">5</span>],dt[N+<span class="number">5</span>],fa[N+<span class="number">5</span>][<span class="number">25</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll p,ll fath)</span> </span>&#123;</span><br><span class="line">	fa[p][<span class="number">0</span>]=fath;dt[p]=dt[fath]+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=lg[dt[p]];i++) &#123;</span><br><span class="line">		fa[p][i]=fa[fa[p][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(ver[i]!=fath) <span class="built_in">dfs</span>(ver[i],p);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		lg[i]=lg[i<span class="number">-1</span>]+(<span class="number">1</span>&lt;&lt;lg[i<span class="number">-1</span>]==i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs</span>(s,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">lca</span><span class="params">(ll a,ll b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(dt[a]&lt;dt[b]) <span class="built_in">swap</span>(a,b);</span><br><span class="line">	<span class="keyword">while</span>(dt[a]&gt;dt[b]) a=fa[a][lg[dt[a]-dt[b]]<span class="number">-1</span>];</span><br><span class="line">	<span class="keyword">if</span>(a==b) <span class="keyword">return</span> a;</span><br><span class="line">	<span class="keyword">for</span>(ll k=lg[dt[a]]<span class="number">-1</span>;k&gt;=<span class="number">0</span>;k--) &#123;</span><br><span class="line">		<span class="keyword">if</span>(fa[a][k]!=fa[b][k]) &#123;</span><br><span class="line">			a=fa[a][k];b=fa[b][k];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> fa[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll u,ll v)</span> </span>&#123;</span><br><span class="line">	ver[++tot]=v;nxt[tot]=head[u];head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>) &#123;x=-x;<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);&#125;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;<span class="number">9</span>) <span class="built_in">write</span>(x/<span class="number">10</span>);</span><br><span class="line">	<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();s=<span class="built_in">read</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">		u=<span class="built_in">read</span>();v=<span class="built_in">read</span>();<span class="built_in">add</span>(u,v);<span class="built_in">add</span>(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">		u=<span class="built_in">read</span>();v=<span class="built_in">read</span>();<span class="built_in">write</span>(<span class="built_in">lca</span>(u,v));<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码（树剖）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">5e5</span>;</span><br><span class="line"></span><br><span class="line">ll n,m,rt,u,v,tot;</span><br><span class="line"></span><br><span class="line">ll ver[N*<span class="number">2</span>+<span class="number">5</span>],nxt[N*<span class="number">2</span>+<span class="number">5</span>],head[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">ll siz[N+<span class="number">5</span>],dt[N+<span class="number">5</span>],fa[N+<span class="number">5</span>],hs[N+<span class="number">5</span>],top[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll p,ll fath)</span> </span>&#123;</span><br><span class="line">	siz[p]=<span class="number">1</span>;dt[p]=dt[fath]+<span class="number">1</span>;fa[p]=fath;</span><br><span class="line">	<span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(ver[i]==fath) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(ver[i],p);</span><br><span class="line">		<span class="keyword">if</span>(siz[ver[i]]&gt;siz[hs[p]]) hs[p]=ver[i];</span><br><span class="line">		siz[p]+=siz[ver[i]];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs_</span><span class="params">(ll p,ll fath,ll topf)</span> </span>&#123;</span><br><span class="line">	top[p]=topf;</span><br><span class="line">	<span class="keyword">if</span>(hs[p]) &#123;</span><br><span class="line">		<span class="built_in">dfs_</span>(hs[p],p,topf);</span><br><span class="line">		<span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">			<span class="keyword">if</span>(ver[i]==fath||ver[i]==hs[p]) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="built_in">dfs_</span>(ver[i],p,ver[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">getlca</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(top[x]!=top[y]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(dt[top[x]]&lt;dt[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">		x=fa[top[x]];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dt[x]&lt;dt[y]) <span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(ll u,ll v)</span> </span>&#123;</span><br><span class="line">	ver[++tot]=v;nxt[tot]=head[u];head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">    	<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">writeln</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">write</span>(x);<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();rt=<span class="built_in">read</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">		u=<span class="built_in">read</span>();v=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">addedge</span>(u,v);<span class="built_in">addedge</span>(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">dfs</span>(rt,<span class="number">0</span>);<span class="built_in">dfs_</span>(rt,<span class="number">0</span>,rt);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(m--) &#123;</span><br><span class="line">		u=<span class="built_in">read</span>();v=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">writeln</span>(<span class="built_in">getlca</span>(u,v));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码（Tarjan）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">5e5</span>;</span><br><span class="line"></span><br><span class="line">ll n,m,rt,u,v,tot,tq;</span><br><span class="line"></span><br><span class="line">ll fa[N+<span class="number">5</span>],ans[N+<span class="number">5</span>],a[N+<span class="number">5</span>],b[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">ll ver[N*<span class="number">2</span>+<span class="number">5</span>],nxt[N*<span class="number">2</span>+<span class="number">5</span>],head[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">ll vq[N*<span class="number">2</span>+<span class="number">5</span>],nq[N*<span class="number">2</span>+<span class="number">5</span>],hq[N*<span class="number">2</span>+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">find</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==fa[x]) <span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">return</span> fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">uni</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">	fa[<span class="built_in">find</span>(x)]=<span class="built_in">find</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll p,ll fath)</span> </span>&#123;</span><br><span class="line">	vis[p]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(ver[i]==fath) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(ver[i],p);<span class="built_in">uni</span>(ver[i],p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(ll i=hq[p];i;i=nq[i]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(vis[vq[i]]) &#123;ans[i/<span class="number">2</span>]=<span class="built_in">find</span>(vq[i]);&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(ll u,ll v)</span> </span>&#123;</span><br><span class="line">	ver[++tot]=v;nxt[tot]=head[u];head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addquery</span><span class="params">(ll u,ll v)</span> </span>&#123;</span><br><span class="line">	vq[++tq]=v;nq[tq]=hq[u];hq[u]=tq;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">    	<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">writeln</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">write</span>(x);<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();rt=<span class="built_in">read</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">		u=<span class="built_in">read</span>();v=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">addedge</span>(u,v);<span class="built_in">addedge</span>(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;</span><br><span class="line">	</span><br><span class="line">	tq=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">		a[i]=<span class="built_in">read</span>();b[i]=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">addquery</span>(a[i],b[i]);<span class="built_in">addquery</span>(b[i],a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">dfs</span>(rt,<span class="number">0</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">		<span class="built_in">writeln</span>(ans[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>LCA</tag>
      </tags>
  </entry>
  <entry>
    <title>P3567</title>
    <url>/2022/01/21/P3567/</url>
    <content><![CDATA[<p>[POI2014]KUR-Couriers</p>
<p>写裸题愉悦身心。</p>
<p>直接可持久化线段树即可。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<p>空间被小卡了一下，开个 <code>int</code> 就过了。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">5e5</span>;</span><br><span class="line"></span><br><span class="line">ll n,m,l,r,lim,tot;</span><br><span class="line"></span><br><span class="line">ll a[N+<span class="number">5</span>],rt[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sgt</span>&#123;</span></span><br><span class="line">	ll l,r,cnt;</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> l(x) tree[x].l</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> r(x) tree[x].r</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> cnt(x) tree[x].cnt</span></span><br><span class="line">&#125;tree[N*<span class="number">25</span>+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">build</span><span class="params">(ll l,ll r)</span> </span>&#123;</span><br><span class="line">	ll p=++tot;</span><br><span class="line">	<span class="keyword">if</span>(l==r) <span class="keyword">return</span> p;</span><br><span class="line">	ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">l</span>(p)=<span class="built_in">build</span>(l,mid);<span class="built_in">r</span>(p)=<span class="built_in">build</span>(mid+<span class="number">1</span>,r);</span><br><span class="line">	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">ins</span><span class="params">(ll cur,ll l,ll r,ll loc,ll val)</span> </span>&#123;</span><br><span class="line">	ll p=++tot;</span><br><span class="line">	tree[p]=tree[cur];</span><br><span class="line">	<span class="keyword">if</span>(l==r) &#123;<span class="built_in">cnt</span>(p)+=val;<span class="keyword">return</span> p;&#125;</span><br><span class="line">	ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(loc&lt;=mid) &#123;<span class="built_in">l</span>(p)=<span class="built_in">ins</span>(<span class="built_in">l</span>(cur),l,mid,loc,val);&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;<span class="built_in">r</span>(p)=<span class="built_in">ins</span>(<span class="built_in">r</span>(cur),mid+<span class="number">1</span>,r,loc,val);&#125;</span><br><span class="line">	<span class="built_in">cnt</span>(p)=<span class="built_in">cnt</span>(<span class="built_in">l</span>(p))+<span class="built_in">cnt</span>(<span class="built_in">r</span>(p));</span><br><span class="line">	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">getmax</span><span class="params">(ll L,ll R,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r) &#123;<span class="keyword">if</span>(<span class="built_in">cnt</span>(R)-<span class="built_in">cnt</span>(L)&gt;lim/<span class="number">2</span>) <span class="keyword">return</span> l;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">	ll mid=(l+r)&gt;&gt;<span class="number">1</span>,lcnt=<span class="built_in">cnt</span>(<span class="built_in">l</span>(R))-<span class="built_in">cnt</span>(<span class="built_in">l</span>(L));</span><br><span class="line">	<span class="keyword">if</span>(lcnt&gt;lim/<span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">getmax</span>(<span class="built_in">l</span>(L),<span class="built_in">l</span>(R),l,mid);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">getmax</span>(<span class="built_in">r</span>(L),<span class="built_in">r</span>(R),mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">    	<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">writeln</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">write</span>(x);<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		a[i]=<span class="built_in">read</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	rt[<span class="number">0</span>]=<span class="built_in">build</span>(<span class="number">1</span>,n);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">		rt[i]=<span class="built_in">ins</span>(rt[i<span class="number">-1</span>],<span class="number">1</span>,n,a[i],<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(m--) &#123;</span><br><span class="line">		l=<span class="built_in">read</span>();r=<span class="built_in">read</span>();lim=r-l+<span class="number">1</span>;</span><br><span class="line">		ll tmp=<span class="built_in">getmax</span>(rt[l<span class="number">-1</span>],rt[r],<span class="number">1</span>,n);</span><br><span class="line">		<span class="built_in">writeln</span>(tmp);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PTS</category>
      </categories>
      <tags>
        <tag>主席树</tag>
      </tags>
  </entry>
  <entry>
    <title>P3979</title>
    <url>/2022/01/21/P3979/</url>
    <content><![CDATA[<p>遥远的国度</p>
<p>在机房做树剖水题愉悦身心。</p>
<p>直接按照 1 为根剖分。</p>
<p>如果说现有根是询问点，输出全局最小。</p>
<p>如果说现有根是不在询问点的子树中，我们就直接输出询问点的子树最小值。</p>
<p>如果说现有根在询问点的子树中，我们需要找到询问点的一个儿子，这个儿子是现有根的祖先。然后把这个儿子中的子树数据剔除计算最小值。</p>
<p>那么主要问题是如何在规定复杂度下找到这个儿子。</p>
<p>其实可以从现有根直接在链上跳啊跳，跳到某一个链的顶端的时候，发现自己头上的那个链包含了询问点，那么这个时候判断自己的父亲。如果说，巧了，这个父亲就是询问点，那么很显然已经找到这个轻儿子了，直接返回即可。反之，说明这个点不在询问点的轻儿子子树里，那就只能输出重儿子了。记得特判一开始两个点就在同一条链上的情况。</p>
<p>时间复杂度 $O(n\log^2 n)$。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">1e6</span>,inf=(<span class="number">1ll</span>&lt;&lt;<span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">ll n,m,u,v,w,rt,op,tot,cnt;</span><br><span class="line"></span><br><span class="line">ll ver[N*<span class="number">2</span>+<span class="number">5</span>],nxt[N*<span class="number">2</span>+<span class="number">5</span>],head[N*<span class="number">2</span>+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">ll dt[N+<span class="number">5</span>],fa[N+<span class="number">5</span>],siz[N+<span class="number">5</span>],top[N+<span class="number">5</span>],id[N+<span class="number">5</span>],wt[N+<span class="number">5</span>],a[N+<span class="number">5</span>],hs[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sgt</span>&#123;</span></span><br><span class="line">	ll mi,lazchg;</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> mi(x) tree[x].mi</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> lazchg(x) tree[x].lazchg</span></span><br><span class="line">&#125;tree[N*<span class="number">4</span>+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(ll p,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r) &#123;<span class="built_in">mi</span>(p)=wt[l];<span class="keyword">return</span>;&#125;</span><br><span class="line">	ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>,l,mid);<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">	<span class="built_in">mi</span>(p)=<span class="built_in">min</span>(<span class="built_in">mi</span>(p&lt;&lt;<span class="number">1</span>),<span class="built_in">mi</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spread</span><span class="params">(ll p)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">lazchg</span>(p)) &#123;</span><br><span class="line">		<span class="built_in">mi</span>(p&lt;&lt;<span class="number">1</span>)=<span class="built_in">lazchg</span>(p);<span class="built_in">lazchg</span>(p&lt;&lt;<span class="number">1</span>)=<span class="built_in">lazchg</span>(p);</span><br><span class="line">		<span class="built_in">mi</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)=<span class="built_in">lazchg</span>(p);<span class="built_in">lazchg</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)=<span class="built_in">lazchg</span>(p);</span><br><span class="line">		<span class="built_in">lazchg</span>(p)=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(ll p,ll lp,ll rp,ll l,ll r,ll k)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(lp&gt;=l&amp;&amp;rp&lt;=r) &#123;</span><br><span class="line">		<span class="built_in">mi</span>(p)=k;<span class="built_in">lazchg</span>(p)=k;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid=(lp+rp)&gt;&gt;<span class="number">1</span>;<span class="built_in">spread</span>(p);</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=mid) <span class="built_in">modify</span>(p&lt;&lt;<span class="number">1</span>,lp,mid,l,r,k);</span><br><span class="line">	<span class="keyword">if</span>(r&gt;mid) <span class="built_in">modify</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,rp,l,r,k);</span><br><span class="line">	<span class="built_in">mi</span>(p)=<span class="built_in">min</span>(<span class="built_in">mi</span>(p&lt;&lt;<span class="number">1</span>),<span class="built_in">mi</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">getmi</span><span class="params">(ll p,ll lp,ll rp,ll l,ll r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(lp&gt;=l&amp;&amp;rp&lt;=r) &#123;<span class="keyword">return</span> <span class="built_in">mi</span>(p);&#125;</span><br><span class="line">	ll mid=(lp+rp)&gt;&gt;<span class="number">1</span>;<span class="built_in">spread</span>(p);</span><br><span class="line">	<span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">getmi</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,rp,l,r);</span><br><span class="line">	<span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">getmi</span>(p&lt;&lt;<span class="number">1</span>,lp,mid,l,r);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">getmi</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,rp,l,r),<span class="built_in">getmi</span>(p&lt;&lt;<span class="number">1</span>,lp,mid,l,r));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll p,ll fath)</span> </span>&#123;</span><br><span class="line">	siz[p]=<span class="number">1</span>;dt[p]=dt[fath]+<span class="number">1</span>;fa[p]=fath;</span><br><span class="line">	<span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(ver[i]==fath) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(ver[i],p);</span><br><span class="line">		siz[p]+=siz[ver[i]];</span><br><span class="line">		<span class="keyword">if</span>(siz[ver[i]]&gt;siz[hs[p]]) hs[p]=ver[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs_</span><span class="params">(ll p,ll fath,ll topf)</span> </span>&#123;</span><br><span class="line">	id[p]=++cnt;wt[cnt]=a[p];top[p]=topf;</span><br><span class="line">	<span class="keyword">if</span>(hs[p]) &#123;</span><br><span class="line">		<span class="built_in">dfs_</span>(hs[p],p,topf);</span><br><span class="line">		<span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">			<span class="keyword">if</span>(ver[i]==fath||ver[i]==hs[p]) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="built_in">dfs_</span>(ver[i],p,ver[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">chgpath</span><span class="params">(ll x,ll y,ll k)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(top[x]!=top[y]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(dt[top[x]]&lt;dt[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">		<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[top[x]],id[x],k);</span><br><span class="line">		x=fa[top[x]];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(id[x]&gt;id[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">	<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[x],id[y],k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qsubmi</span><span class="params">(ll p)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">getmi</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[p],id[p]+siz[p]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">findson</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(top[x]==top[y]) <span class="keyword">return</span> hs[y];</span><br><span class="line">	<span class="keyword">while</span>(top[fa[top[x]]]!=top[y]) x=fa[top[x]];</span><br><span class="line">	<span class="keyword">if</span>(fa[top[x]]==y) <span class="keyword">return</span> top[x];</span><br><span class="line">	<span class="keyword">return</span> hs[y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(ll u,ll v)</span> </span>&#123;</span><br><span class="line">	ver[++tot]=v;nxt[tot]=head[u];head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">writeln</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">write</span>(x);<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">		u=<span class="built_in">read</span>();v=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">addedge</span>(u,v);<span class="built_in">addedge</span>(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) a[i]=<span class="built_in">read</span>();</span><br><span class="line">	</span><br><span class="line">	rt=<span class="built_in">read</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);<span class="built_in">dfs_</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(m--) &#123;</span><br><span class="line">		op=<span class="built_in">read</span>();</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="number">1</span>) &#123;rt=<span class="built_in">read</span>();&#125;</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="number">2</span>) &#123;</span><br><span class="line">			u=<span class="built_in">read</span>();v=<span class="built_in">read</span>();w=<span class="built_in">read</span>();</span><br><span class="line">			<span class="built_in">chgpath</span>(u,v,w);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="number">3</span>) &#123;</span><br><span class="line">			u=<span class="built_in">read</span>();</span><br><span class="line">			<span class="keyword">if</span>(rt==u) &#123;</span><br><span class="line">				<span class="built_in">writeln</span>(<span class="built_in">qsubmi</span>(<span class="number">1</span>));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">if</span>(id[rt]&gt;id[u]&amp;&amp;id[rt]&lt;=id[u]+siz[u]<span class="number">-1</span>) &#123;</span><br><span class="line">				v=<span class="built_in">findson</span>(rt,u);</span><br><span class="line">				ll ans=inf;</span><br><span class="line">				<span class="keyword">if</span>(<span class="number">1</span>&lt;=id[v]<span class="number">-1</span>) ans=<span class="built_in">min</span>(ans,<span class="built_in">getmi</span>(<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">1</span>,id[v]<span class="number">-1</span>));</span><br><span class="line">				<span class="keyword">if</span>(id[v]+siz[v]&lt;=n) ans=<span class="built_in">min</span>(ans,<span class="built_in">getmi</span>(<span class="number">1</span>,<span class="number">1</span>,n,id[v]+siz[v],n));</span><br><span class="line">				<span class="built_in">writeln</span>(ans);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">writeln</span>(<span class="built_in">qsubmi</span>(u));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PTS</category>
      </categories>
      <tags>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1009F</title>
    <url>/2022/01/22/CF1009F/</url>
    <content><![CDATA[<p>Dominant Indices</p>
<p>这个题显然可以启发式合并做掉。</p>
<p>时间复杂度是 $O(n\log n)$ 的。</p>
<p>满足于这个题肯定已经够了，但还有更快的方法：长链剖分。</p>
<p>长链剖分，顾名思义就是找到每个点的长儿子（深度最深），把整棵树剖成长链。</p>
<p>OI wiki 上有讲，这种方法的跳链一类的复杂度是 $O(\sqrt{n})$ 级别的，而且能卡。</p>
<p>但我们这题显然不是利用这个性质。</p>
<p>我们有一个最简单的 DP。</p>
<p>定义 $f(p,j)$ 表示离节点 $p$ 距离为 $j$ 的节点个数，则有：</p>
<p>$$f(p,j)=\sum_{v}f(v,j-1)$$</p>
<p>特别的，我们有初始化：</p>
<p>$$f(p,0)=1$$</p>
<p>即距离为 $0$ 的节点只有 $p$ 自己。</p>
<p>我们发现这个转移的瓶颈在于每个节点都要 $O(n)$ 的合并。</p>
<p>然后我们就想到一个偷懒的方法，那就是根本不去合并，而是把长儿子的答案直接存在自己的答案里，然后把非长儿子的信息暴力合并进来。</p>
<p>可能刚听到这个想法大部分人反应不过来，实际上这是一个用指针动态分配内存的操作。直接叙述实际上稍显累赘，看代码的话会更为清晰（只可意会不可言传）。</p>
<p>比如说，我们开一串数组，给下面的动态分配内存留下一个池子。</p>
<p>接着我们给 $p$ 分配一个长度为 $dep(p)$ 的内存空间。在这个空间上，我们直接把 $p$ 的长儿子的答案存在这段空间的上，不过对应的下标要错开一位。</p>
<p>接着，我们把非长儿子的答案暴力合并，也就是去做上述的 DP。</p>
<p>可能在直觉上，很多人觉得这个方法的复杂度大概还是 $O(n^2)$ 级别的。</p>
<p>但实际上，这个优化把空间和时间复杂度全部优化到了 $O(n)$ 级别。</p>
<p>先说时间上，我们真正的复杂度开销全在暴力合并这一个环节上。我们不从 $p$ 考虑，而去从它的非长儿子考虑。每个点会被暴力合并，当且仅当它是一个非长儿子，即它是一条长链的顶点。那么时间复杂度就与长链数线性相关。而长链数是 $O(n)$ 级别的（我这里说的是严格的 $O$ 而不是 $\Theta$，因为从这个角度来考虑，我们的开销就全在长儿子的计算上了，而长儿子的计算显然是 $\Theta(n)$ 的）。</p>
<p>那么接下来看空间，我们相当于给每个长链申请了一片大小为长链长度的内存，所以最后所需的内存大小即为树的大小，空间复杂度也是 $O(n)$ 的。</p>
<p>至此，这道题目得到了 $O(n)$ 的解决。</p>
<p>代码（长链剖分优化）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line">ll n,u,v,tot;</span><br><span class="line"></span><br><span class="line">ll buf[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">ll *f[N+<span class="number">5</span>],*now=buf;</span><br><span class="line"></span><br><span class="line">ll ver[N*<span class="number">2</span>+<span class="number">5</span>],nxt[N*<span class="number">2</span>+<span class="number">5</span>],head[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">ll ans[N+<span class="number">5</span>],dep[N+<span class="number">5</span>],ls[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll p,ll fath)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">    <span class="keyword">if</span>(ver[i]==fath) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(ver[i],p);</span><br><span class="line">    <span class="keyword">if</span>(dep[ver[i]]&gt;dep[ls[p]]) ls[p]=ver[i];</span><br><span class="line">  &#125;</span><br><span class="line">  dep[p]=dep[ls[p]]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs_</span><span class="params">(ll p,ll fath)</span> </span>&#123;</span><br><span class="line">  f[p][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>(ls[p]) &#123;</span><br><span class="line">    f[ls[p]]=f[p]+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs_</span>(ls[p],p);</span><br><span class="line">    ans[p]=ans[ls[p]]+<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">    <span class="keyword">if</span>(ver[i]==fath||ver[i]==ls[p]) <span class="keyword">continue</span>;</span><br><span class="line">    f[ver[i]]=now;now+=dep[ver[i]];</span><br><span class="line">    <span class="built_in">dfs_</span>(ver[i],p);</span><br><span class="line">    <span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;=dep[ver[i]];j++) &#123;</span><br><span class="line">      f[p][j]+=f[ver[i]][j<span class="number">-1</span>];</span><br><span class="line">      <span class="keyword">if</span>(f[p][j]&gt;f[p][ans[p]]||(f[p][j]==f[p][ans[p]]&amp;&amp;j&lt;ans[p])) ans[p]=j;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(f[p][ans[p]]==<span class="number">1</span>) ans[p]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(ll u,ll v)</span> </span>&#123;</span><br><span class="line">  ver[++tot]=v;nxt[tot]=head[u];head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">  <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">  <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">  <span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">writeln</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">write</span>(x);<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  n=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">    u=<span class="built_in">read</span>();v=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">addedge</span>(u,v);<span class="built_in">addedge</span>(v,u);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">  f[<span class="number">1</span>]=now;now+=dep[<span class="number">1</span>];</span><br><span class="line">  <span class="built_in">dfs_</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;<span class="built_in">writeln</span>(ans[i]);&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码（启发式合并）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line">ll n,u,v,tot,tmpans;</span><br><span class="line"></span><br><span class="line">ll siz[N+<span class="number">5</span>],dt[N+<span class="number">5</span>],hs[N+<span class="number">5</span>],ans[N+<span class="number">5</span>],cnt[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">ll ver[N*<span class="number">2</span>+<span class="number">5</span>],nxt[N*<span class="number">2</span>+<span class="number">5</span>],head[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll p,ll fath)</span> </span>&#123;</span><br><span class="line">  siz[p]=<span class="number">1</span>;dt[p]=dt[fath]+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">    <span class="keyword">if</span>(ver[i]==fath) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(ver[i],p);</span><br><span class="line">    <span class="keyword">if</span>(siz[ver[i]]&gt;siz[hs[p]]) hs[p]=ver[i];</span><br><span class="line">    siz[p]+=siz[ver[i]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getans</span><span class="params">(ll p,ll fath)</span> </span>&#123;</span><br><span class="line">  cnt[dt[p]]++;</span><br><span class="line">  <span class="keyword">if</span>(cnt[dt[p]]&gt;cnt[tmpans]) tmpans=dt[p];</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(cnt[dt[p]]==cnt[tmpans]&amp;&amp;dt[p]&lt;tmpans) tmpans=dt[p];</span><br><span class="line">  <span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">    <span class="keyword">if</span>(ver[i]==fath) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">getans</span>(ver[i],p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">(ll p,ll fath)</span> </span>&#123;</span><br><span class="line">  cnt[dt[p]]--;</span><br><span class="line">  <span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">    <span class="keyword">if</span>(ver[i]==fath) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">clear</span>(ver[i],p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs_</span><span class="params">(ll p,ll fath,<span class="keyword">bool</span> kp)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">    <span class="keyword">if</span>(ver[i]==fath||ver[i]==hs[p]) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">dfs_</span>(ver[i],p,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(hs[p]) <span class="built_in">dfs_</span>(hs[p],p,<span class="number">1</span>);</span><br><span class="line">  cnt[dt[p]]++;</span><br><span class="line">  <span class="keyword">if</span>(cnt[dt[p]]&gt;cnt[tmpans]) tmpans=dt[p];</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(cnt[dt[p]]==cnt[tmpans]&amp;&amp;dt[p]&lt;tmpans) tmpans=dt[p];</span><br><span class="line">  <span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">    <span class="keyword">if</span>(ver[i]==fath||ver[i]==hs[p]) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">getans</span>(ver[i],p);</span><br><span class="line">  &#125;</span><br><span class="line">  ans[p]=tmpans-dt[p];</span><br><span class="line">  <span class="keyword">if</span>(!kp) <span class="built_in">clear</span>(p,fath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(ll u,ll v)</span> </span>&#123;</span><br><span class="line">  ver[++tot]=v;nxt[tot]=head[u];head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">  <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">  <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">  <span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">writeln</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">write</span>(x);<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  n=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">    u=<span class="built_in">read</span>();v=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">addedge</span>(u,v);<span class="built_in">addedge</span>(v,u);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);<span class="built_in">dfs_</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">    <span class="built_in">writeln</span>(ans[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PTS</category>
      </categories>
      <tags>
        <tag>启发式合并</tag>
        <tag>长链剖分优化 DP</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1499F</title>
    <url>/2022/01/23/CF1499F/</url>
    <content><![CDATA[<p>Diameter Cuts</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/ooc3uvdh.png" alt="没错我真的菜"></p>
<p>把这个当作长链剖分的基础题讲了。</p>
<p>首先要有 DP。（下文所著 $K$ 为题目所述 $k$，下文的 $k$ 是普通自变量）</p>
<p>我们对于一个点，可以分类讨论：</p>
<ol>
<li>不连上这个点与其儿子的边，则有转移：</li>
</ol>
<p>$$f(p,j)=f(p,j)\sum_{k=0}^K f(v,k)$$</p>
<ol start="2">
<li>连上这个点与其儿子的边，则有转移：</li>
</ol>
<p>$$f(p,\max{j,k+1})=f(p,\max{j,k+1})+f(p,j)\sum_{k=0}^{K-j-1}f(v,k)$$</p>
<p>上述的转移显然是独立出来的，而实际情况需要考虑其间的相互影响，所以用一个临时的变量 $g$ 存贮结果，在最后再传给 $f$。</p>
<p>那么问题来了，这个转移的复杂度是 $O(nk^2)$ 的，怎么使用长链剖分优化？</p>
<p>实际上，就是在满足题目计数的限制的同时，再满足长剖的计数限制。</p>
<p>这样复杂度就可以优化到 $O(nk)$ 了，空间复杂度是 $O(n)$ 的。</p>
<p>有一些细节，具体看代码。</p>
<p>在做完这题之后，我们对长链剖分优化的本质有了更为深入的了解。</p>
<p>实际上，长剖所作的就是让一条长链上的点重复利用同一段状态计数来节省空间，再让每次计数仅发生在长链顶端来节省时间，从而达到了优化的效果。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">5e3</span>,mo=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line">ll n,K,u,v,tot,ans;</span><br><span class="line"></span><br><span class="line">ll buf[N*<span class="number">10</span>+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">ll *f[N+<span class="number">5</span>],*now=buf;</span><br><span class="line"></span><br><span class="line">ll g[N+<span class="number">5</span>],dep[N+<span class="number">5</span>],ls[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">ll ver[N*<span class="number">2</span>+<span class="number">5</span>],nxt[N*<span class="number">2</span>+<span class="number">5</span>],head[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll p,ll fath)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">    <span class="keyword">if</span>(ver[i]==fath) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(ver[i],p);</span><br><span class="line">    <span class="keyword">if</span>(dep[ver[i]]&gt;dep[ls[p]]) ls[p]=ver[i];</span><br><span class="line">  &#125;</span><br><span class="line">  dep[p]=dep[ls[p]]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs_</span><span class="params">(ll p,ll fath)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(ls[p]) &#123;</span><br><span class="line">    f[ls[p]]=f[p]+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs_</span>(ls[p],p);</span><br><span class="line">    <span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;=K&amp;&amp;j&lt;dep[ls[p]];j++) &#123;</span><br><span class="line">      f[p][<span class="number">0</span>]+=f[ls[p]][j];</span><br><span class="line">      <span class="keyword">if</span>(f[p][<span class="number">0</span>]&gt;mo) f[p][<span class="number">0</span>]%=mo;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> f[p][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(ll i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">    <span class="keyword">if</span>(ver[i]==fath||ver[i]==ls[p]) <span class="keyword">continue</span>;</span><br><span class="line">    f[ver[i]]=now;now+=dep[ver[i]]+<span class="number">3</span>;</span><br><span class="line">    <span class="built_in">dfs_</span>(ver[i],p);</span><br><span class="line">    <span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;=K&amp;&amp;j&lt;dep[p];j++) g[j]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;=K&amp;&amp;j&lt;dep[p];j++) &#123;</span><br><span class="line">      <span class="keyword">for</span>(ll k=<span class="number">0</span>;k&lt;dep[ver[i]]&amp;&amp;j+k+<span class="number">1</span>&lt;=K;k++) &#123;</span><br><span class="line">        g[<span class="built_in">max</span>(j,k+<span class="number">1</span>)]+=f[p][j]*f[ver[i]][k];</span><br><span class="line">        <span class="keyword">if</span>(g[<span class="built_in">max</span>(j,k+<span class="number">1</span>)]&gt;mo) g[<span class="built_in">max</span>(j,k+<span class="number">1</span>)]%=mo;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;=K&amp;&amp;j&lt;dep[p];j++) &#123;</span><br><span class="line">      <span class="keyword">for</span>(ll k=<span class="number">0</span>;k&lt;=K&amp;&amp;k&lt;dep[ver[i]];k++) &#123;</span><br><span class="line">        g[j]+=f[p][j]*f[ver[i]][k];</span><br><span class="line">        <span class="keyword">if</span>(g[j]&gt;mo) g[j]%=mo;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(ll j=<span class="number">0</span>;j&lt;=K&amp;&amp;j&lt;dep[p];j++) f[p][j]=g[j];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(ll u,ll v)</span> </span>&#123;</span><br><span class="line">  ver[++tot]=v;nxt[tot]=head[u];head[u]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">  <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">  <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">  <span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  n=<span class="built_in">read</span>();K=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">    u=<span class="built_in">read</span>();v=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">addedge</span>(u,v);<span class="built_in">addedge</span>(v,u);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">  f[<span class="number">1</span>]=now;now+=dep[<span class="number">1</span>]+<span class="number">3</span>;</span><br><span class="line">  <span class="built_in">dfs_</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=K&amp;&amp;i&lt;dep[<span class="number">1</span>];i++) &#123;</span><br><span class="line">    ans+=f[<span class="number">1</span>][i];<span class="keyword">if</span>(ans&gt;mo) ans%=mo;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">write</span>(ans);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PTS</category>
      </categories>
      <tags>
        <tag>长链剖分优化 DP</tag>
      </tags>
  </entry>
  <entry>
    <title>EssayAD20220123</title>
    <url>/2022/01/23/EssayAD20220123/</url>
    <content><![CDATA[<pre><code>I something and nothing
</code></pre>
<p>存在即虚无。（一句极为精妙的翻译）</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Outline</title>
    <url>/2022/01/23/Outline/</url>
    <content><![CDATA[<p>随便列一下吧。</p>
<h1 id="一、数据结构"><a href="#一、数据结构" class="headerlink" title="一、数据结构"></a>一、数据结构</h1><ol>
<li><p>基础数据结构</p>
<ul>
<li>线段树与 zkw 线段树<ul>
<li>扫描线</li>
</ul>
</li>
<li>树状数组</li>
<li>ST 表</li>
</ul>
</li>
<li><p>进阶数据结构</p>
<ul>
<li>可并堆<ul>
<li>左偏树</li>
</ul>
</li>
<li>平衡树<ul>
<li>Splay</li>
<li>Treap</li>
</ul>
</li>
<li>可持久化数据结构<ul>
<li>可持久化线段树与主席树（可持久化权值线段树）</li>
<li>可持久化Trie</li>
<li>可持久化可并堆（左偏树）</li>
<li>可持久化平衡树</li>
</ul>
</li>
<li>树套树<ul>
<li>线段树套线段树</li>
<li>线段树（一般是权值）套平衡树</li>
<li>树状数组套主席树</li>
</ul>
</li>
<li>动态树<ul>
<li>LCT</li>
</ul>
</li>
</ul>
</li>
<li><p>根号算法</p>
<ul>
<li>分块</li>
<li>数论分块</li>
<li>操作分块</li>
<li>根号分治</li>
<li>根号重构</li>
<li>静态询问分块</li>
<li>动态带修分块</li>
<li>莫队<ul>
<li>普通莫队</li>
<li>回滚莫队</li>
<li>带修莫队</li>
<li>莫队二次离线</li>
</ul>
</li>
</ul>
</li>
<li><p>一些技巧</p>
<ul>
<li>动态开点线段树</li>
<li>李超线段树</li>
<li>珂朵莉树</li>
</ul>
</li>
</ol>
<h1 id="二、数学"><a href="#二、数学" class="headerlink" title="二、数学"></a>二、数学</h1><ol>
<li><p>数论</p>
<ul>
<li>裴蜀定理、欧几里得算法</li>
<li>莫比乌斯反演</li>
<li>中国剩余定理</li>
<li>Lucas 定理</li>
<li>欧拉定理<ul>
<li>费马小定理</li>
<li>乘法逆元 $O(\log p)$</li>
</ul>
</li>
<li>线性求逆元</li>
<li>Miller-Rabin</li>
<li>Pollard’s rho</li>
<li>BSGS</li>
<li>原根</li>
<li>数论分块</li>
<li>二次剩余</li>
<li>杜教筛</li>
</ul>
</li>
<li><p>组合计数</p>
<ul>
<li>基础组合恒等式</li>
<li>斯特林数</li>
<li>容斥原理</li>
<li>生成函数<ul>
<li>多元生成函数</li>
</ul>
</li>
<li>伯努利数</li>
</ul>
</li>
<li><p>代数</p>
<ul>
<li>多项式算法<ul>
<li>拉格朗日插值</li>
<li>FFT，NTT</li>
<li>FMT，FWT</li>
<li>多项式求逆</li>
</ul>
</li>
<li>高斯消元</li>
<li>线性基</li>
</ul>
</li>
<li><p>博弈论</p>
<ul>
<li>SG 函数</li>
<li>非公平博弈</li>
</ul>
</li>
<li><p>杂项</p>
<ul>
<li>概率期望</li>
<li>群论</li>
<li>微积分<ul>
<li>辛普森方法</li>
</ul>
</li>
<li>线性规划</li>
</ul>
</li>
</ol>
<h1 id="三、图论"><a href="#三、图论" class="headerlink" title="三、图论"></a>三、图论</h1><ol>
<li><p>Tarjan</p>
<ul>
<li>割边，割点</li>
<li>e-DCC（无向图边双连通分量）</li>
<li>v-DCC（无向图点双连通分量）</li>
<li>SCC（有向图强连通分量）</li>
<li>2-SAT</li>
<li>圆方树</li>
</ul>
</li>
<li><p>二分图</p>
<ul>
<li>二分图最大匹配<ul>
<li>增广路算法</li>
<li>最大流建模</li>
</ul>
</li>
<li>二分图最大带权匹配<ul>
<li>匈牙利算法</li>
<li>费用流建模</li>
</ul>
</li>
<li>二分图最小点覆盖</li>
<li>二分图最大独立集</li>
<li>DAG 最小边覆盖</li>
</ul>
</li>
<li><p>生成树</p>
<ul>
<li>Boruvka 算法</li>
<li>Kruskal 重构树</li>
<li>wqs 二分</li>
<li>最小斯坦纳树</li>
<li>矩阵树定理</li>
<li>最小树形图<ul>
<li>朱-刘算法</li>
<li>DMST 算法</li>
</ul>
</li>
</ul>
</li>
<li><p>最短路</p>
<ul>
<li>负环</li>
<li>差分约束</li>
<li>k 短路</li>
<li>最短路建模</li>
</ul>
</li>
<li><p>网络流</p>
<ul>
<li>最大流，最小割，费用流</li>
<li>上下界网络流</li>
<li>最大权闭合子图</li>
<li>平面图最小割</li>
<li>最小割树</li>
<li>全局最小割</li>
</ul>
</li>
<li><p>弦图</p>
</li>
<li><p>其他</p>
<ul>
<li>欧拉路与哈密顿路</li>
<li>基环树</li>
<li>树的直径</li>
<li>树的重心</li>
<li>支配树</li>
<li>全局最小割</li>
<li>最小割树</li>
<li>一般图最大匹配<ul>
<li>带花树算法</li>
</ul>
</li>
</ul>
</li>
</ol>
<h1 id="四、动态规划"><a href="#四、动态规划" class="headerlink" title="四、动态规划"></a>四、动态规划</h1><ol>
<li><p>线性 DP</p>
<ul>
<li>分组 DP</li>
<li>背包</li>
</ul>
</li>
<li><p>区间 DP</p>
</li>
<li><p>概率期望 DP</p>
</li>
<li><p>树形 DP</p>
</li>
<li><p>DAG 上 DP</p>
</li>
<li><p>数位 DP</p>
</li>
<li><p>数据结构优化 DP</p>
<ul>
<li>线性数据结构优化</li>
<li>线段树优化</li>
<li>可并堆优化</li>
<li>分治优化</li>
</ul>
</li>
<li><p>状压 DP</p>
<ul>
<li>插头 DP</li>
</ul>
</li>
<li><p>斜率优化</p>
</li>
<li><p>四边形不等式优化</p>
</li>
<li><p>矩阵表示 DP</p>
<ul>
<li>矩阵快速幂</li>
<li>数据结构优化</li>
</ul>
</li>
<li><p>生成函数优化 DP</p>
<ul>
<li>生成函数描述问题</li>
<li>计数型背包</li>
</ul>
</li>
</ol>
<h1 id="五、计算几何"><a href="#五、计算几何" class="headerlink" title="五、计算几何"></a>五、计算几何</h1><ol>
<li><p>计算几何基础</p>
<ul>
<li>向量、点积、正弦定理、余弦定理、平面几何基础</li>
<li>线段、射线、直线相交判定，求交点</li>
<li>圆与直线交点，圆与圆交点</li>
</ul>
</li>
<li><p>凸包、半平面交</p>
<ul>
<li>Andrew 算法</li>
<li>S&amp;I 算法</li>
<li>判断点是否在凸包/半平面交内</li>
<li>旋转卡壳</li>
<li>凸包的闵可夫斯基和</li>
<li>动态凸包</li>
</ul>
</li>
<li><p>杂项</p>
<ul>
<li>圆反演</li>
<li>平面最近点对</li>
<li>最小圆覆盖</li>
<li>三角剖分</li>
<li>三维凸包</li>
</ul>
</li>
</ol>
<h1 id="六、字符串"><a href="#六、字符串" class="headerlink" title="六、字符串"></a>六、字符串</h1><ol>
<li><p>Hash</p>
</li>
<li><p>Trie</p>
</li>
<li><p>KMP</p>
<ul>
<li>Ex KMP</li>
</ul>
</li>
<li><p>AC 自动机</p>
</li>
<li><p>后缀数组</p>
</li>
<li><p>后缀自动机</p>
</li>
<li><p>Manacher</p>
</li>
</ol>
<h1 id="七、杂项"><a href="#七、杂项" class="headerlink" title="七、杂项"></a>七、杂项</h1><ol>
<li><p>一些技巧</p>
<ul>
<li>分治类<ul>
<li>三分法</li>
<li>分数规划</li>
<li>二维分治</li>
<li>CDQ 分治</li>
<li>线段树分治</li>
<li>整体二分</li>
<li>分治转移斜率优化</li>
<li>树分治<ul>
<li>点分治</li>
<li>点分树</li>
</ul>
</li>
</ul>
</li>
<li>树上剖分类<ul>
<li>树链剖分</li>
<li>启发式合并</li>
<li>长链剖分</li>
</ul>
</li>
<li>倍增类<ul>
<li>倍增法求 LCA</li>
<li>倍增答案</li>
<li>环上倍增</li>
</ul>
</li>
<li>骗分类<ul>
<li>模拟退火</li>
<li>随机化技巧</li>
</ul>
</li>
<li>理论基础类<ul>
<li>时间复杂度分析（主定理）</li>
</ul>
</li>
<li>技术类<ul>
<li>指针动态分配内存</li>
<li>STL<ul>
<li>set</li>
<li>map 与 unorded_map</li>
<li>bitset</li>
<li>algorithm<ul>
<li>unique</li>
</ul>
</li>
<li>priority_queue<ul>
<li>懒惰删除法</li>
</ul>
</li>
</ul>
</li>
<li>对拍</li>
<li>卡常</li>
<li>GDB</li>
<li>Linux 使用</li>
</ul>
</li>
</ul>
</li>
<li><p>特殊题型</p>
<ul>
<li>提交答案题</li>
<li>交互题</li>
<li>构造题</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>纲要</tag>
      </tags>
  </entry>
  <entry>
    <title>P3391</title>
    <url>/2022/01/23/P3391/</url>
    <content><![CDATA[<p>【模板】文艺平衡树</p>
<p>就是 Splay 区间翻转模板。</p>
<p>我们采取这样的策略，多塞一个极小点和一个极大点。</p>
<p>每次翻转 $[l,r]$ 的时候，先找到 $l-1$ 和 $r+1$，将 $l-1$ 转到根，$r+1$ 转到 $l-1$ 下方，然后要翻转的区间就是 $r+1$ 的左子树，打上标记即可。（以上的 $l-1$ 指的是在区间中排在第 $l-1$ 个位置上的数对应 Splay 中的点）</p>
<p>因为有了懒标记，所以要记得下传（这当然是废话）。</p>
<p>时间复杂度 $O(n\log n)$。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line">ll n,m,l,r;</span><br><span class="line"></span><br><span class="line">ll buffa[N+<span class="number">5</span>],bufch0[N+<span class="number">5</span>],bufch1[N+<span class="number">5</span>],bufval[N+<span class="number">5</span>],bufcnt[N+<span class="number">5</span>],bufsiz[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> buftag[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">ll *nowfa=buffa,*nowch0=bufch0,*nowch1=bufch1,*nowval=bufval,</span><br><span class="line">  *nowcnt=bufcnt,*nowsiz=bufsiz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> *nowtag=buftag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">  <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">  <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">  <span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Splay</span>&#123;</span></span><br><span class="line">  ll *fa,*ch[<span class="number">2</span>],*val,*cnt,*siz;</span><br><span class="line">  <span class="keyword">bool</span> *tag;</span><br><span class="line">  ll rt,sz;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    fa=nowfa;nowfa+=x+<span class="number">1</span>;</span><br><span class="line">    ch[<span class="number">0</span>]=nowch0;nowch0+=x+<span class="number">1</span>;</span><br><span class="line">    ch[<span class="number">1</span>]=nowch1;nowch1+=x+<span class="number">1</span>;</span><br><span class="line">    val=nowval;nowval+=x+<span class="number">1</span>;</span><br><span class="line">    cnt=nowcnt;nowcnt+=x+<span class="number">1</span>;</span><br><span class="line">    siz=nowsiz;nowsiz+=x+<span class="number">1</span>;</span><br><span class="line">    tag=nowtag;nowtag+=x+<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Maintain</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    siz[x]=siz[ch[<span class="number">0</span>][x]]+siz[ch[<span class="number">1</span>][x]]+cnt[x];</span><br><span class="line">    <span class="keyword">if</span>(x&amp;&amp;tag[x]) &#123;</span><br><span class="line">      tag[ch[<span class="number">0</span>][x]]^=<span class="number">1</span>;tag[ch[<span class="number">1</span>][x]]^=<span class="number">1</span>;</span><br><span class="line">      <span class="built_in">swap</span>(ch[<span class="number">0</span>][x],ch[<span class="number">1</span>][x]);tag[x]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Get</span><span class="params">(ll x)</span> </span>&#123;<span class="keyword">return</span> x==ch[<span class="number">1</span>][fa[x]];&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Rotate</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    ll y=fa[x],z=fa[y],chk=<span class="built_in">Get</span>(x);</span><br><span class="line">    ch[chk][y]=ch[chk^<span class="number">1</span>][x];</span><br><span class="line">    <span class="keyword">if</span>(ch[chk^<span class="number">1</span>][x]) fa[ch[chk^<span class="number">1</span>][x]]=y;</span><br><span class="line">    ch[chk^<span class="number">1</span>][x]=y;fa[y]=x;fa[x]=z;</span><br><span class="line">    <span class="keyword">if</span>(z) ch[y==ch[<span class="number">1</span>][z]][z]=x;</span><br><span class="line">    <span class="built_in">Maintain</span>(x);<span class="built_in">Maintain</span>(y);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(ll x,ll g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(ll f=fa[x];(f=fa[x])!=g;<span class="built_in">Rotate</span>(x)) &#123;</span><br><span class="line">      <span class="keyword">if</span>(fa[f]!=g) <span class="built_in">Rotate</span>(<span class="built_in">Get</span>(x)==<span class="built_in">Get</span>(f)?f:x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(g==<span class="number">0</span>) rt=x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Ins</span><span class="params">(ll k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!rt) &#123;</span><br><span class="line">      val[++sz]=k;cnt[sz]++;rt=sz;<span class="built_in">Maintain</span>(rt);<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll cur=rt,f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">Maintain</span>(cur);</span><br><span class="line">      <span class="keyword">if</span>(val[cur]==k) &#123;</span><br><span class="line">        cnt[cur]++;<span class="built_in">Maintain</span>(cur);<span class="built_in">Maintain</span>(f);<span class="built_in">splay</span>(cur,<span class="number">0</span>);<span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      f=cur;cur=ch[val[cur]&lt;k][cur];</span><br><span class="line">      <span class="keyword">if</span>(!cur) &#123;</span><br><span class="line">        val[++sz]=k;cnt[sz]++;fa[sz]=f;ch[val[f]&lt;k][f]=sz;</span><br><span class="line">        <span class="built_in">Maintain</span>(sz);<span class="built_in">Maintain</span>(f);<span class="built_in">splay</span>(sz,<span class="number">0</span>);<span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> ll <span class="title">Kth</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    ll cur=rt;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">Maintain</span>(cur);</span><br><span class="line">      <span class="keyword">if</span>(ch[<span class="number">0</span>][cur]&amp;&amp;x&lt;=siz[ch[<span class="number">0</span>][cur]]) &#123;cur=ch[<span class="number">0</span>][cur];&#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        x-=cnt[cur]+siz[ch[<span class="number">0</span>][cur]];</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=<span class="number">0</span>) &#123;<span class="built_in">splay</span>(cur,<span class="number">0</span>);<span class="keyword">return</span> cur;&#125;</span><br><span class="line">        cur=ch[<span class="number">1</span>][cur];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Print</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">Maintain</span>(x);</span><br><span class="line">    <span class="keyword">if</span>(ch[<span class="number">0</span>][x]) <span class="built_in">Print</span>(ch[<span class="number">0</span>][x]);</span><br><span class="line">    <span class="keyword">if</span>(val[x]&gt;=<span class="number">1</span>&amp;&amp;val[x]&lt;=n) &#123;</span><br><span class="line">      <span class="built_in">write</span>(val[x]);<span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch[<span class="number">1</span>][x]) <span class="built_in">Print</span>(ch[<span class="number">1</span>][x]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">  s.<span class="built_in">Init</span>(n+<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;=n+<span class="number">1</span>;i++) s.<span class="built_in">Ins</span>(i);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">    l=<span class="built_in">read</span>();r=<span class="built_in">read</span>();</span><br><span class="line">    ll tmpl=s.<span class="built_in">Kth</span>(l),tmpr=s.<span class="built_in">Kth</span>(r+<span class="number">2</span>);</span><br><span class="line">    s.<span class="built_in">splay</span>(tmpl,<span class="number">0</span>);s.<span class="built_in">splay</span>(tmpr,tmpl);</span><br><span class="line">    s.tag[s.ch[<span class="number">0</span>][tmpr]]^=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  s.<span class="built_in">Print</span>(s.rt);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>Splay</tag>
      </tags>
  </entry>
  <entry>
    <title>P3690</title>
    <url>/2022/01/24/P3690/</url>
    <content><![CDATA[<p>【模板】动态树（Link Cut Tree）</p>
<p><del>零卡树</del>。</p>
<p>这个模板基本把 LCT 需要的操作都整全了。</p>
<p>一句话讲 LCT 的本质，动态维护原树的虚实链剖分，每条实链使用一棵 Splay 维护。</p>
<ol>
<li><p>最重要的是 <code>Access</code>。就是将某点到原树的根的路径上的点搞到一条实链上。具体就是不断重复：<code>Splay</code>，虚边变实边。</p>
</li>
<li><p><code>Makeroot</code> 就是让某点成为原树的根。具体就是 <code>Access</code> 之后，颠倒辅助树中的这棵 Splay 对原树深度关系的描述，而 Splay 描述深度关系是依靠于 Splay 的中序遍历的顺序的，因此颠倒深度关系就是把这颗 Splay 翻转一下。</p>
</li>
<li><p><code>Find</code> 是找树根。先 <code>Access</code>，然后 <code>Splay</code> 一下，那原树的树根就是最左边的点。最后要再 <code>Splay</code> 一次保证复杂度。</p>
</li>
<li><p><code>Split</code> 是抽出 $x$ 到 $y$ 的路径。先 <code>Makeroot</code> $x$，然后 <code>Access</code> $y$，再 <code>Splay</code> $y$ 即可。这样 $x$ 到 $y$ 的路径信息就是 $y$ 所在的 Splay 的信息。</p>
</li>
<li><p><code>Link</code> 先需要判断是否连通，就是判断 <code>Find</code> 是否相同。然后我们 <code>Makeroot</code> $x$ 再 <code>Splay</code> $x$，这样 $x$ 就成为了原树的树根，我们将 $x$ 向 $y$ 连一条虚边即可。</p>
</li>
<li><p><code>Cut</code> 先需要判断在同一棵原树里，也是判断 <code>Find</code>。然后 <code>Split</code> $x$ 和 $y$。然后我们要判断是否有边连着 $x$ 和 $y$。首先由上我们知道 $x$ 和 $y$ 已经保证连通了，并且经过了 <code>Split</code> 导致 $x$ 成为原树的根（意味着它一定在 $y$ 现在的左子树里）。那么如果保证两者有边相连，则其深度一定是连续的，所以 $x$ 不能再有右子树，$y$ 的左儿子就是 $x$。判断一下之后，把边双向断开即可。</p>
</li>
<li><p><code>Splay</code> 和 <code>Rotate</code> 与 Splay 的操作基本相同，但是注意现在的根不是真的根，而是对于单个 Splay 的根。所以我们要写一个 <code>Isroot</code> 函数方便判断。</p>
</li>
</ol>
<p>这两个操作里有一些小坑，首先，<code>Rotate</code> 中要在旋转之前就把 $z$ 与 $x$ 的关系定下，不然马上 <code>Rotate</code> 之后改变了树的关系，原本的虚边就被转成实边了，而这显然是不可以的。</p>
<p>其次，<code>Splay</code> 之前要先把翻转路径上 Splay 的翻转标记全部下放。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line">ll n,m,op,x,y;</span><br><span class="line"></span><br><span class="line">ll bufch0[N+<span class="number">5</span>],bufch1[N+<span class="number">5</span>],buffa[N+<span class="number">5</span>],bufxr[N+<span class="number">5</span>],bufval[N+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">bool</span> bufrev[N+<span class="number">5</span>];</span><br><span class="line">ll *nowch0=bufch0,*nowch1=bufch1,*nowfa=buffa,*nowxr=bufxr,*nowval=bufval;</span><br><span class="line"><span class="keyword">bool</span> *nowrev=bufrev;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LCT</span>&#123;</span></span><br><span class="line">  ll *ch[<span class="number">2</span>],*fa,*xr,*val;</span><br><span class="line">  <span class="keyword">bool</span> *rev;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    ch[<span class="number">0</span>]=nowch0;ch[<span class="number">1</span>]=nowch1;fa=nowfa;xr=nowxr;rev=nowrev;val=nowval;</span><br><span class="line">    nowch0+=x+<span class="number">1</span>;nowch1+=x+<span class="number">1</span>;nowfa+=x+<span class="number">1</span>;nowxr+=x+<span class="number">1</span>;nowrev+=x+<span class="number">1</span>;nowval+=x+<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Pushup</span><span class="params">(ll x)</span> </span>&#123;xr[x]=xr[ch[<span class="number">0</span>][x]]^xr[ch[<span class="number">1</span>][x]]^val[x];&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Pushdown</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rev[x]) &#123;</span><br><span class="line">      rev[ch[<span class="number">0</span>][x]]^=<span class="number">1</span>;rev[ch[<span class="number">1</span>][x]]^=<span class="number">1</span>;</span><br><span class="line">      <span class="built_in">swap</span>(ch[<span class="number">0</span>][ch[<span class="number">0</span>][x]],ch[<span class="number">1</span>][ch[<span class="number">0</span>][x]]);</span><br><span class="line">      <span class="built_in">swap</span>(ch[<span class="number">0</span>][ch[<span class="number">1</span>][x]],ch[<span class="number">1</span>][ch[<span class="number">1</span>][x]]);</span><br><span class="line">      rev[x]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Isroot</span><span class="params">(ll x)</span> </span>&#123;<span class="keyword">return</span> ch[<span class="number">0</span>][fa[x]]!=x&amp;&amp;ch[<span class="number">1</span>][fa[x]]!=x;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Update</span><span class="params">(ll x)</span> </span>&#123;<span class="keyword">if</span>(!<span class="built_in">Isroot</span>(x)) <span class="built_in">Update</span>(fa[x]);<span class="built_in">Pushdown</span>(x);&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Get</span><span class="params">(ll x)</span> </span>&#123;<span class="keyword">return</span> x==ch[<span class="number">1</span>][fa[x]];&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Rotate</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    ll y=fa[x],z=fa[y],chk=<span class="built_in">Get</span>(x);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">Isroot</span>(y)) ch[y==ch[<span class="number">1</span>][z]][z]=x;</span><br><span class="line">    ch[chk][y]=ch[chk^<span class="number">1</span>][x];</span><br><span class="line">    <span class="keyword">if</span>(ch[chk^<span class="number">1</span>][x]) fa[ch[chk^<span class="number">1</span>][x]]=y;</span><br><span class="line">    ch[chk^<span class="number">1</span>][x]=y;fa[y]=x;fa[x]=z;</span><br><span class="line">    <span class="built_in">Pushup</span>(y);<span class="built_in">Pushup</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">Update</span>(x);</span><br><span class="line">    <span class="keyword">for</span>(ll f;f=fa[x],!<span class="built_in">Isroot</span>(x);<span class="built_in">Rotate</span>(x)) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!<span class="built_in">Isroot</span>(f)) <span class="built_in">Rotate</span>(<span class="built_in">Get</span>(f)==<span class="built_in">Get</span>(x)?f:x);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> ll <span class="title">Access</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    ll p;</span><br><span class="line">    <span class="keyword">for</span>(p=<span class="number">0</span>;x;p=x,x=fa[x]) &#123;<span class="built_in">splay</span>(x);ch[<span class="number">1</span>][x]=p;<span class="built_in">Pushup</span>(x);&#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Makeroot</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    x=<span class="built_in">Access</span>(x);<span class="built_in">swap</span>(ch[<span class="number">0</span>][x],ch[<span class="number">1</span>][x]);rev[x]^=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> ll <span class="title">Find</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">Access</span>(x);<span class="built_in">splay</span>(x);<span class="built_in">Pushdown</span>(x);</span><br><span class="line">    <span class="keyword">while</span>(ch[<span class="number">0</span>][x]) &#123;x=ch[<span class="number">0</span>][x];<span class="built_in">Pushdown</span>(x);&#125;</span><br><span class="line">    <span class="built_in">splay</span>(x);<span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Split</span><span class="params">(ll x,ll y)</span> </span>&#123;<span class="built_in">Makeroot</span>(x);<span class="built_in">Access</span>(y);<span class="built_in">splay</span>(y);&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Link</span><span class="params">(ll x,ll y)</span> </span>&#123;<span class="built_in">Makeroot</span>(x);<span class="built_in">splay</span>(x);fa[x]=y;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Cut</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">Split</span>(x,y);</span><br><span class="line">    <span class="keyword">if</span>(ch[<span class="number">0</span>][y]==x&amp;&amp;ch[<span class="number">1</span>][x]==<span class="number">0</span>) ch[<span class="number">0</span>][y]=fa[x]=<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Fix</span><span class="params">(ll x,ll y)</span> </span>&#123;<span class="built_in">Access</span>(x);<span class="built_in">splay</span>(x);val[x]=y;<span class="built_in">Pushup</span>(x);&#125;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">  <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">  <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">  <span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">writeln</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">write</span>(x);<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();T.<span class="built_in">Init</span>(n);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;T.xr[i]=T.val[i]=<span class="built_in">read</span>();&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">    op=<span class="built_in">read</span>();x=<span class="built_in">read</span>();y=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">0</span>) &#123;T.<span class="built_in">Split</span>(x,y);<span class="built_in">writeln</span>(T.xr[y]);&#125;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">1</span>) &#123;ll x_=T.<span class="built_in">Find</span>(x),y_=T.<span class="built_in">Find</span>(y);<span class="keyword">if</span>(x_!=y_) T.<span class="built_in">Link</span>(x,y);&#125;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">2</span>) &#123;ll x_=T.<span class="built_in">Find</span>(x),y_=T.<span class="built_in">Find</span>(y);<span class="keyword">if</span>(x_==y_) T.<span class="built_in">Cut</span>(x,y);&#125;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">3</span>) &#123;T.<span class="built_in">Fix</span>(x,y);&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>LCT</tag>
      </tags>
  </entry>
  <entry>
    <title>Asahana_Yuho</title>
    <url>/2022/01/24/Asahana-Yuho/</url>
    <content><![CDATA[<p>数据结构题</p>
<ol>
<li><p><a href="https://www.luogu.com.cn/blog/154279/p7706-post">P7706</a> 「Wdsr-2.7」文文的摄影布置</p>
<ul>
<li>线段树题，对理解线段树传参比较有帮助。</li>
</ul>
</li>
<li><p><a href="https://www.luogu.com.cn/blog/154279/p4211-post">P4211</a> [LNOI2014]LCA</p>
<ul>
<li>离线转化神题</li>
</ul>
</li>
<li><p><a href="https://www.luogu.com.cn/blog/154279/p6647-post">P6647</a> [CCC 2019] Tourism</p>
<ul>
<li>线段树加单调栈优化 DP</li>
<li>用 $\infty$ 减少讨论</li>
</ul>
</li>
<li><p><a href="https://www.luogu.com.cn/blog/154279/cf438d">CF438D</a> The Child and Sequence</p>
<ul>
<li>取模操作次数有限，支持局部暴力</li>
<li>类似的题 <a href="https://www.luogu.com.cn/blog/154279/p4145-post">P4145</a> 上帝造题的七分钟 2 / 花神游历各国，这里开根的次数是有限的</li>
</ul>
</li>
</ol>
<p>图论题</p>
<ol>
<li><p><a href="https://www.luogu.com.cn/blog/154279/p6175-post">P6175</a> 无向图的最小环问题</p>
</li>
<li><p><a href="https://www.luogu.com.cn/blog/154279/p1613-post">P1613</a> 跑路</p>
<ul>
<li>位运算类最短路，建立单位 $2^k$ 边</li>
</ul>
</li>
<li><p><a href="https://www.luogu.com.cn/blog/154279/p6833-post">P6833</a> [Cnoi2020]雷雨</p>
<ul>
<li>最短路建模</li>
</ul>
</li>
</ol>
<p>DP 题</p>
<ol>
<li><p><a href="https://www.luogu.com.cn/blog/154279/p5336-post">P5336</a> [THUSC2016]成绩单</p>
<ul>
<li>以值域定义状态</li>
</ul>
</li>
<li><p><a href="https://www.luogu.com.cn/blog/154279/p1758-post">P1758</a> [NOI2009] 管道取珠</p>
<ul>
<li>从意义上解决计数题</li>
</ul>
</li>
<li><p><a href="https://www.luogu.com.cn/blog/154279/p2467-post">P2467</a> [SDOI2010]地精部落</p>
<ul>
<li>转换视角计数</li>
</ul>
</li>
<li><p><a href="https://www.luogu.com.cn/blog/154279/p5664-post">P5664</a> [CSP-S2019] Emiya 家今天的饭</p>
<ul>
<li>容斥 DP</li>
<li>复习</li>
</ul>
</li>
</ol>
<p>杂题</p>
<ol>
<li><p><a href="https://www.luogu.com.cn/blog/154279/p6902-post">P6902</a> [ICPC2014 WF]Surveillance</p>
<ul>
<li>环上倍增</li>
<li>类似题目 <a href="https://onlypath.github.io/2021/12/16/P4155/">P4155</a> 国旗计划，区别在于这题需要三倍断环为链</li>
</ul>
</li>
<li><p><a href="https://www.luogu.com.cn/blog/154279/cf1548a">CF1548A</a> Web of Lies</p>
<ul>
<li>小 Trick 题，从结果的角度思考（或者说是现象）</li>
<li>想起来一个数学题，$n$ 个屋子里人员流动，平方和公式的递增性解释</li>
</ul>
</li>
<li><p><a href="https://www.luogu.com.cn/blog/154279/cf1542b">CF1542B</a> Plus and Multiply</p>
<ul>
<li>同样是小 Trick</li>
<li>转换变量与系数观察</li>
</ul>
</li>
<li><p><a href="https://www.luogu.com.cn/blog/154279/p7567-post">P7567</a> 「MCOI-05」魔仙</p>
<ul>
<li>打表找规律</li>
<li>利用奇偶性</li>
<li>构造</li>
<li>待定系数</li>
<li>总之很神奇的小学奥数题</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>整理</tag>
      </tags>
  </entry>
  <entry>
    <title>P4097</title>
    <url>/2022/01/24/P4097/</url>
    <content><![CDATA[<p>[HEOI2013]Segment</p>
<p><del>我超李超不超</del>。</p>
<p>为何我的我爆了。</p>
<p>论理解题意的重要性。</p>
<p>这里是按斜率比较。实际上也有按交点比较的方法。本质是一样的。</p>
<p>维护区间中点最高的线段编号。比较中较次的线段再进入某一边子树继续比较。</p>
<p>每次插入线段的复杂度是 $O(\log^2 n)$ 的，查询最大的复杂度是 $O(\log n)$。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll mo=<span class="number">39989</span>,ymo=<span class="number">1e9</span>,N=<span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line">ll n,op,lastans,xa,ya,xb,yb,tot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> k[N+<span class="number">5</span>],b[N+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lcsgt</span>&#123;</span></span><br><span class="line">  ll best;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> best(x) tree[x].best</span></span><br><span class="line">&#125;tree[mo*<span class="number">4</span>+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">f</span><span class="params">(ll id,ll x)</span> </span>&#123;<span class="keyword">return</span> k[id]*x+b[id];&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ask</span><span class="params">(ll p,ll lp,ll rp,ll x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">double</span> fnow=<span class="built_in">f</span>(lastans,x),fp=<span class="built_in">f</span>(<span class="built_in">best</span>(p),x);</span><br><span class="line">  <span class="keyword">if</span>(fp&gt;fnow||(fp==fnow&amp;&amp;<span class="built_in">best</span>(p)&lt;lastans)) &#123;lastans=<span class="built_in">best</span>(p);&#125;</span><br><span class="line">  <span class="keyword">if</span>(lp==rp) <span class="keyword">return</span>;</span><br><span class="line">  ll mid=(lp+rp)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>(x&lt;=mid) <span class="built_in">ask</span>(p&lt;&lt;<span class="number">1</span>,lp,mid,x);</span><br><span class="line">  <span class="keyword">if</span>(x&gt;mid) <span class="built_in">ask</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,rp,x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ins</span><span class="params">(ll p,ll lp,ll rp,ll l,ll r,ll now)</span> </span>&#123;</span><br><span class="line">  ll mid=(lp+rp)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">double</span> fnow=<span class="built_in">f</span>(now,mid),fp=<span class="built_in">f</span>(<span class="built_in">best</span>(p),mid);</span><br><span class="line">  <span class="keyword">if</span>(lp&gt;=l&amp;&amp;rp&lt;=r) &#123;</span><br><span class="line">    <span class="keyword">if</span>(lp==rp) &#123;<span class="keyword">if</span>(fnow&gt;fp) <span class="built_in">best</span>(p)=now;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(k[now]&gt;k[<span class="built_in">best</span>(p)]) &#123;</span><br><span class="line">      <span class="keyword">if</span>(fnow&gt;fp) &#123;<span class="built_in">ins</span>(p&lt;&lt;<span class="number">1</span>,lp,mid,l,r,<span class="built_in">best</span>(p));<span class="built_in">best</span>(p)=now;&#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="built_in">ins</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,rp,l,r,now);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(k[now]&lt;k[<span class="built_in">best</span>(p)]) &#123;</span><br><span class="line">      <span class="keyword">if</span>(fnow&gt;fp) &#123;<span class="built_in">ins</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,rp,l,r,<span class="built_in">best</span>(p));<span class="built_in">best</span>(p)=now;&#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="built_in">ins</span>(p&lt;&lt;<span class="number">1</span>,lp,mid,l,r,now);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b[now]&gt;b[<span class="built_in">best</span>(p)]) <span class="built_in">best</span>(p)=now;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(l&lt;=mid) <span class="built_in">ins</span>(p&lt;&lt;<span class="number">1</span>,lp,mid,l,r,now);</span><br><span class="line">  <span class="keyword">if</span>(r&gt;mid) <span class="built_in">ins</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,rp,l,r,now);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ll ret=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">  <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=-f;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">  <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;ret=(ret&lt;&lt;<span class="number">3</span>)+(ret&lt;&lt;<span class="number">1</span>)+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">  <span class="keyword">return</span> ret*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">22</span>];<span class="keyword">static</span> ll len=<span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span>(x&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;buf[++len]=x%<span class="number">10</span>+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">do</span>&#123;buf[++len]=-(x%<span class="number">10</span>)+<span class="number">48</span>;x/=<span class="number">10</span>;&#125;<span class="keyword">while</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(len&gt;=<span class="number">0</span>) <span class="built_in">putchar</span>(buf[len--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">writeln</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">write</span>(x);<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  n=<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(n--) &#123;</span><br><span class="line">    op=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">0</span>) &#123;</span><br><span class="line">      ll K=<span class="built_in">read</span>();K=(K+lastans<span class="number">-1</span>+mo)%mo+<span class="number">1</span>;</span><br><span class="line">      lastans=<span class="number">0</span>;<span class="built_in">ask</span>(<span class="number">1</span>,<span class="number">1</span>,mo,K);</span><br><span class="line">      <span class="built_in">writeln</span>(lastans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">1</span>) &#123;</span><br><span class="line">      xa=<span class="built_in">read</span>();ya=<span class="built_in">read</span>();xb=<span class="built_in">read</span>();yb=<span class="built_in">read</span>();</span><br><span class="line">      xa=(xa+lastans<span class="number">-1</span>+mo)%mo+<span class="number">1</span>;xb=(xb+lastans<span class="number">-1</span>+mo)%mo+<span class="number">1</span>;</span><br><span class="line">      ya=(ya+lastans<span class="number">-1</span>+ymo)%ymo+<span class="number">1</span>;yb=(yb+lastans<span class="number">-1</span>+ymo)%ymo+<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span>(xa&gt;xb) &#123;<span class="built_in">swap</span>(xa,xb);<span class="built_in">swap</span>(ya,yb);&#125;</span><br><span class="line">      <span class="keyword">if</span>(xa==xb) &#123;k[++tot]=<span class="number">0</span>;b[tot]=<span class="built_in">max</span>(ya,yb);&#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        k[++tot]=(<span class="keyword">double</span>)(ya-yb)/(xa-xb);b[tot]=(<span class="keyword">double</span>)(xa*yb-xb*ya)/(xa-xb);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">ins</span>(<span class="number">1</span>,<span class="number">1</span>,mo,xa,xb,tot);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>李超线段树</tag>
      </tags>
  </entry>
</search>
