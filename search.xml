<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>NOI_Linux</title>
    <url>/2021/11/27/NOI-Linux/</url>
    <content><![CDATA[<p>Ctrl+Alt+T 召唤终端。</p>
<p>新建文件的指令是 touch+文件名 。</p>
<p>现在给一些在英文环境下使用 VSC 的指北。</p>
<p>左下角有一个设置按钮，点开，第二行的 Settings。</p>
<p>然后点第一行 Text Editor，再点第三行 Font，选择 Font Size，选择至合适大小（这里在 Windows 下 30 比较合适）。</p>
<p>然后是 Text Editor 下倒数第三行的 Minimap，Maxcolumn 调整为 240（差不多罢），然后下面的 Scale 调整为 3。</p>
<p>大概可以了，在 NOI Linux 的环境下应该可以较为正常的使用了。</p>
<p>然后再补充一些指令，以及 gdb 的使用。</p>
<p>time ./code 可以在运行的同时显示运行所需的时间。</p>
<p>gdb 最强大的地方在于可以快速找到段错误（除 0，数组越界，爆栈等），我们可以直接在 gdb 下运行，然后就可以直接给你返回出错的地方。</p>
<p>然后还有一些它的调试功能。</p>
<p>在编译时使用该指令：</p>
<p>g++ -g code.cpp -o code -Wall</p>
<p>然后我们在调试的时候这样：</p>
<p>gdb code</p>
<p>这样我们就能进入 gdb 的调试。</p>
<p>r 可以直接运行。如果想要干大事，可以 start，从 main 函数的第一行开始执行，然后不断地 n （执行下一行）即可。disp ans 可以一直显示 ans 的值，方便调试。</p>
<p>b 可以设置断点，还有一些附加比如：</p>
<p>b 34 if i==4</p>
<p>在 i==4 的时候断点才会起作用。</p>
<p>d 可以删除所有断点。</p>
<p>当然有的时候也需要在调试时使用 s，表示执行时进入函数内部，看内部的使用。</p>
<p>u 会执行当前行直到当前行对应的循环结束。</p>
<p>finish 运行到当前函数结束，如果有返回值，会输出返回值。</p>
<p>return 强行 return，可以返回指定的值。</p>
<p>p x=4，将此时的 x 赋值 4。</p>
<p>l 可以显示代码。l,r 显示区间代码，l 显示 l 附近的 10 行代码。</p>
<p>VSCode 里 shift+{ 可以把选中的内容套上大括号，小括号同理，方括号不行。</p>
<p>Ctrl+{ 可以减去区域的整体缩进，Ctrl+} 可以增加区域的整体缩进。</p>
<p>在底边栏中可以调整缩进是空格还是真的缩进。</p>
<p>一些比较神奇的东西。。。在 Windows 下装 MinGW 其实完全不需要重新下载，只要找到 Dev-Cpp 的路径，然后把里面 MinGW 的 bin 路径赋值到系统变量 path 里就完事了。。。弄了半天。。。</p>
<p>然后 VSC 里撤销是 Ctrl+Z，恢复上一步操作是 Ctrl+Shift+Z。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>NOI-Linux</tag>
        <tag>VScode</tag>
        <tag>gdb</tag>
      </tags>
  </entry>
</search>
